sep=,
"ID","Title","Automation Type","Endpoint","Postcondition","Preconditions","Priority","References","Status","Steps","Steps (Expected Result)","Steps (Step)","Suite","Summary","Test Type","Type"
"C19146851","Verify that Job can be opened"," Selenide","","Job data like name is shown on gui","- Source System CIF_AUTOMATED_TEST exists
- Job exists
- Command is running and login was successfull","Medium",""," Final","1. 1. Open Administration module
2. Open Tools -> Jobs
3. Search for CIF_AUTOMATED_TEST_JOB in Combobox ""Name""
4. Click Search
5. Select Job from the grid 
5. Double click to open the job
6. Check that Job is loaded correctly
Expected Result:
![](index.php?/attachments/get/12041)","1. ![](index.php?/attachments/get/12041)","1. 1. Open Administration module
2. Open Tools -> Jobs
3. Search for CIF_AUTOMATED_TEST_JOB in Combobox ""Name""
4. Click Search
5. Select Job from the grid 
5. Double click to open the job
6. Check that Job is loaded correctly","CIF (Command Integration Framework) (Automated testing)",""," Smoke test","Automated"
"C19146855","Verify that job can be duplicated"," Selenide","","Job is shown in grid, too","- Source System CIF_AUTOMATED_TEST exists
- Job exists
- Command is running and login was successfull","Medium",""," Reviewed","1. 1. Open Administration module
2. Open Tools -> Jobs
3. Select Job CIF_AUTOMATED_TEST_JOB in combobox ""Name""
3. Click Search
4. Select Job from the grid 
5. Open Context menu
6. Click: Duplicate
7. Check that Job's data is copied correctly and set new name: CIF_AUTOMATED_TEST_DUBLICATE
8. Save and Close Job and search for it in the grid
Expected Result:
![](index.php?/attachments/get/12379)","1. ![](index.php?/attachments/get/12379)","1. 1. Open Administration module
2. Open Tools -> Jobs
3. Select Job CIF_AUTOMATED_TEST_JOB in combobox ""Name""
3. Click Search
4. Select Job from the grid 
5. Open Context menu
6. Click: Duplicate
7. Check that Job's data is copied correctly and set new name: CIF_AUTOMATED_TEST_DUBLICATE
8. Save and Close Job and search for it in the grid","CIF (Command Integration Framework) (Automated testing)",""," End-to-end test","Automated"
"C19146860","Verify that job can be exported to excel file"," Selenide","","Excel file was dowanloaded","- Source System CIF_AUTOMATED_TEST exists
- Job exists
- Command is running and login was successfull","Medium",""," Reviewed","1. 1. Open Administration module
2. Open Tools -> Jobs
3. Look for CIF_AUTOMATED_TEST_JOB in combobox Name
4. Click Search
5. Select Job from the grid 
6. Open Context menu
7. Click Export
6. JobExport.xlsx will be downloaded
Expected Result:
![](index.php?/attachments/get/12380)","1. ![](index.php?/attachments/get/12380)","1. 1. Open Administration module
2. Open Tools -> Jobs
3. Look for CIF_AUTOMATED_TEST_JOB in combobox Name
4. Click Search
5. Select Job from the grid 
6. Open Context menu
7. Click Export
6. JobExport.xlsx will be downloaded","CIF (Command Integration Framework) (Automated testing)",""," End-to-end test","Automated"
"C19146864","Verify that job time control can be set"," Selenide","","Time control is set and chekbox on ON","- Source System CIF_AUTOMATED_TEST exists
- Job exists
- Command is running and login was successfull","Medium",""," Reviewed","1. 1. Open Administration module
2. Open Tools -> Jobs
3. Set CIF_AUTOMATED_TEST_JOB in combobox Name
4. Click Search
5. Select Job from the grid 
6. Open the job with double click
6. Select Time Control section
7. Set check box ON
7. Specify required parameters
8. Click Save
9. Check that Time changes applied correctly
Expected Result:
![](index.php?/attachments/get/12096)","1. ![](index.php?/attachments/get/12096)","1. 1. Open Administration module
2. Open Tools -> Jobs
3. Set CIF_AUTOMATED_TEST_JOB in combobox Name
4. Click Search
5. Select Job from the grid 
6. Open the job with double click
6. Select Time Control section
7. Set check box ON
7. Specify required parameters
8. Click Save
9. Check that Time changes applied correctly","CIF (Command Integration Framework) (Automated testing)",""," End-to-end test","Automated"
"C19146859","Tools: Jobs:  Release Job","","","","","Medium",""," Ready for review","1. 1. Open Administration module
2. Open Tools -> Jobs
3. Click Search
4. Select some Job in the grid  (or create a new one)
5. Execute in Context menu:  Start/Simulate
6. Execute in Context menu:  Release Job
7. Click Search button again to see how changed the Status of Job:
In column Runtime:
- black square: Failed or never Run

In column 'Functional log level':
- blue: no errors in functional log
In column Status: CANCELED

7. Open Job and then Monitoring Section, check here job Status
->Status= CANCELED,
Description: Job was not successfully completed, potential cause server restart or disconnection

Expected Result:
->Status= CANCELED,
Description: Job was not successfully completed, potential cause server restart or disconnection

![](index.php?/attachments/get/12071)","1. ->Status= CANCELED,
Description: Job was not successfully completed, potential cause server restart or disconnection

![](index.php?/attachments/get/12071)","1. 1. Open Administration module
2. Open Tools -> Jobs
3. Click Search
4. Select some Job in the grid  (or create a new one)
5. Execute in Context menu:  Start/Simulate
6. Execute in Context menu:  Release Job
7. Click Search button again to see how changed the Status of Job:
In column Runtime:
- black square: Failed or never Run

In column 'Functional log level':
- blue: no errors in functional log
In column Status: CANCELED

7. Open Job and then Monitoring Section, check here job Status
->Status= CANCELED,
Description: Job was not successfully completed, potential cause server restart or disconnection","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19423966","Verify that time control settings can be modified"," Selenide","","changed values are saved in time control","- Source System CIF_AUTOMATED_TEST exists
- Job exists
- Command is running and login was successfull

3. Set CIF_AUTOMATED_TEST_JOB in combobox name","Medium",""," Reviewed","1. 1. Open Administration module
2. Open Tools -> Jobs
3. Set CIF_AUTOMATED_TEST_JOB in combobox name
4. Click Search
5. Select Job from the grid 
6. Open job with double click
7. Select Time Control section on the left
8. Set another time value
9. Click Save
10. Check that Time changes are applied correctly
Expected Result:
![](index.php?/attachments/get/12096)","1. ![](index.php?/attachments/get/12096)","1. 1. Open Administration module
2. Open Tools -> Jobs
3. Set CIF_AUTOMATED_TEST_JOB in combobox name
4. Click Search
5. Select Job from the grid 
6. Open job with double click
7. Select Time Control section on the left
8. Set another time value
9. Click Save
10. Check that Time changes are applied correctly","CIF (Command Integration Framework) (Automated testing)",""," End-to-end test","Automated"
"C19721581","Verify that time cotrol settings can be deactivated"," Selenide","","","- Source System CIF_AUTOMATED_TEST exists
- Job exists
- Command is running and login was successfull","Medium",""," Reviewed","1. 1. Open Administration module
2. Open Tools -> Jobs
3. Set CIF_AUTOMATED_TEST_JOB in combobox name
4. Click Search
5. Select Job from the grid 
6. Open job with double click
7. Select Time Control section on the left
8. set checkbox on OFF
10. Check that checkbox is correctly ticked and the entries are still there
Expected Result:
![](index.php?/attachments/get/12383)","1. ![](index.php?/attachments/get/12383)","1. 1. Open Administration module
2. Open Tools -> Jobs
3. Set CIF_AUTOMATED_TEST_JOB in combobox name
4. Click Search
5. Select Job from the grid 
6. Open job with double click
7. Select Time Control section on the left
8. set checkbox on OFF
10. Check that checkbox is correctly ticked and the entries are still there","CIF (Command Integration Framework) (Automated testing)",""," End-to-end test","Automated"
"C19423967","Verify that time control can be deleted"," Selenide","","Time control is NONE and entry fields are ampty","- Source System CIF_AUTOMATED_TEST exists
- Job exists
- Command is running and login was successfull

3. Set CIF_AUTOMATED_TEST_JOB in combobox name
4. Click Search
5. Select Job from the grid 
6. Open job with double click","Medium",""," Reviewed","1. 1. Open Administration module
2. Open Tools -> Jobs
3. Set CIF_AUTOMATED_TEST_JOB in combobox name
4. Click Search
5. Select Job from the grid 
6. Open job with double click
7. Select Time Control section on the left
8. Set check box NONE 
8. Click Save
9. Check that entries of time control where deleted
Expected Result:
![](index.php?/attachments/get/12382)","1. ![](index.php?/attachments/get/12382)","1. 1. Open Administration module
2. Open Tools -> Jobs
3. Set CIF_AUTOMATED_TEST_JOB in combobox name
4. Click Search
5. Select Job from the grid 
6. Open job with double click
7. Select Time Control section on the left
8. Set check box NONE 
8. Click Save
9. Check that entries of time control where deleted","CIF (Command Integration Framework) (Automated testing)",""," End-to-end test","Automated"
"C19146866","Verify that technical log can be downloaded for job run"," Selenide","","","","Medium",""," Final","1. 1. Open Administration module
2. Open Tools -> Jobs
3. Click Search
4. Select some Job in the grid (or create a new one)
5. Execute Job via Context menu: Start/Simulate
6. Open Job
7. Open Monitoring section
8. Select some item in the grid
9. Execute in Context menu: Download technical log file
Expected Result:
![](index.php?/attachments/get/12088)","1. ![](index.php?/attachments/get/12088)","1. 1. Open Administration module
2. Open Tools -> Jobs
3. Click Search
4. Select some Job in the grid (or create a new one)
5. Execute Job via Context menu: Start/Simulate
6. Open Job
7. Open Monitoring section
8. Select some item in the grid
9. Execute in Context menu: Download technical log file","CIF (Command Integration Framework) (Automated testing)",""," Integration test","ToBeAutomated"
"C19146793","Delta Report: Delta: Search","","","","Delta auto-apply configuration:
- Delta= Hardware Delta
- Active = OFF
- Delta auto-apply condition:
AND Action = CREATE
OR Source system = e.g. TEST_SK1

Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE_DATA = N


1. Test data is imported in Nms tables
2. Necessary Job (e.g. Hardware, Cable, Telco, etc.) is executed

","Medium",""," Ready for review","1. 1. Open Administration module
2. Open Delta reports: Delta
3. Set necessary Search restrictions
4. Click Search
5. Check that correct data is loaded
Expected Result:
![](index.php?/attachments/get/12062)","1. ![](index.php?/attachments/get/12062)","1. 1. Open Administration module
2. Open Delta reports: Delta
3. Set necessary Search restrictions
4. Click Search
5. Check that correct data is loaded","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19146794","Delta Report: Delta: Open","","","","Delta auto-apply configuration:
- Delta= Hardware Delta
- Active = OFF
- Delta auto-apply condition:
AND Action = CREATE
OR Source system = e.g. TEST_SK1

Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE_DATA = N


1. Test data is imported in Nms tables
2. Necessary Job (e.g. Hardware, Cable, Telco, etc.) is executed
","Medium",""," Ready for review","1. 1. Open Administration module
2. Open Delta reports: Delta
3. Set necessary Search restrictions
4. Click Search
5. Check that no errors on Double click by item in the grid,
No Context menu command: Open
Expected Result:
![](index.php?/attachments/get/12063)","1. ![](index.php?/attachments/get/12063)","1. 1. Open Administration module
2. Open Delta reports: Delta
3. Set necessary Search restrictions
4. Click Search
5. Check that no errors on Double click by item in the grid,
No Context menu command: Open","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19146796","Delta Report: Delta: Grouping by Group ID","","","","Delta auto-apply configuration:
- Delta= Hardware Delta
- Active = OFF
- Delta auto-apply condition:
AND Action = CREATE
OR Source system = e.g. TEST_SK1

Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE_DATA = N

1. Test data is imported in Nms tables
2. Necessary Job (e.g. Hardware, Cable, Telco, etc.) is executed
","Medium",""," Ready for review","1. 1. Open Administration module
2. Open Delta reports: Delta
3. Set necessary Search restrictions
4. Click Search
5. Check that data in the table is corretly grouped by Group ID
Expected Result:
Data in the table is corretly grouped by Group ID

![](index.php?/attachments/get/12064)","1. Data in the table is corretly grouped by Group ID

![](index.php?/attachments/get/12064)","1. 1. Open Administration module
2. Open Delta reports: Delta
3. Set necessary Search restrictions
4. Click Search
5. Check that data in the table is corretly grouped by Group ID","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19146798","Delta Report: Delta Cable: Search","","","","Delta auto-apply configuration:
- Delta= Cable Delta
- Active = OFF
- Delta auto-apply condition:
AND Action = CREATE
OR Source system = e.g. TEST_SK1

Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_CABLE_DATA = Y
SYNCHRONIZE_DATA =N

1. Test data is imported in Nms tables
2. Necessary Job (e.g. Hardware, Cable, Telco, etc.) is executed
","Medium",""," Ready for review","1. Open Administration module
Open Delta reports: Delta Cable
Set necessary Search restrictions
Click Search
Check that correct data is loaded
Expected Result:
![](index.php?/attachments/get/12065)","1. ![](index.php?/attachments/get/12065)","1. Open Administration module
Open Delta reports: Delta Cable
Set necessary Search restrictions
Click Search
Check that correct data is loaded","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19146799","Delta Report: Delta Cable: Open","","","","Delta auto-apply configuration:
- Delta= Cable Delta
- Active = OFF
- Delta auto-apply condition:
AND Action = CREATE
OR Source system = e.g. TEST_SK1

Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_CABLE_DATA = Y
SYNCHRONIZE_DATA =N

1. Test data is imported in Nms tables
2. Necessary Job (e.g. Hardware, Cable, Telco, etc.) is executed
","Medium",""," Ready for review","1. Open Administration module
Open Delta reports: Delta Cable
Set necessary Search restrictions
Click Search
Check that no errors on Double click by item in the grid, No Context menu command: Open
Expected Result:
no errors on Double click by item in the grid, No Context menu command: Open","1. no errors on Double click by item in the grid, No Context menu command: Open","1. Open Administration module
Open Delta reports: Delta Cable
Set necessary Search restrictions
Click Search
Check that no errors on Double click by item in the grid, No Context menu command: Open","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19146813","Delta Report: Delta Service: Search","","","","Delta auto-apply configuration:
- Delta= Telco Delta
- Active = OFF
- Delta auto-apply condition:
AND Action = CREATE
OR Source system = e.g. TEST_SK1

Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_TELCO_SERVICE_DATA
LOAD_TELCO_LINKS = Y
SYNCHRONIZE_DATA = N

1. Test data is imported in Nms tables
2. Necessary Job (e.g. Hardware, Cable, Telco, etc.) is executed
","Medium",""," Ready for review","1. Open Administration module
Open Delta reports: Delta Service
Set necessary Search restrictions
Click Search
Check that correct data is loaded
Expected Result:
Correct data is loaded

![](index.php?/attachments/get/12066)","1. Correct data is loaded

![](index.php?/attachments/get/12066)","1. Open Administration module
Open Delta reports: Delta Service
Set necessary Search restrictions
Click Search
Check that correct data is loaded","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19146814","Delta Report: Delta Service: Open","","","","Delta auto-apply configuration:
- Delta= Telco Delta
- Active = OFF
- Delta auto-apply condition:
AND Action = CREATE
OR Source system = e.g. TEST_SK1

Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_TELCO_SERVICE_DATA
LOAD_TELCO_LINKS = Y
SYNCHRONIZE_DATA = N

1. Test data is imported in Nms tables
2. Necessary Job (e.g. Hardware, Cable, Telco, etc.) is executed
","Medium",""," Ready for review","1. Open Administration module
Open Delta reports: Delta Service
Set necessary Search restrictions
Click Search
Check that no errors on Double click by item in the grid, No Context menu command: Open
Expected Result:
no errors on Double click by item in the grid, No Context menu command: Open","1. no errors on Double click by item in the grid, No Context menu command: Open","1. Open Administration module
Open Delta reports: Delta Service
Set necessary Search restrictions
Click Search
Check that no errors on Double click by item in the grid, No Context menu command: Open","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19146911","Delta auto-apply configuration: Search","","","","1. Open Administration module
2. Click on Delta auto-apply configuration ","Medium",""," Ready for review","1. Click on Search button
Specify Search Restrictions and click Search
Expected Result:
Correct data is displayed","1. Correct data is displayed","1. Click on Search button
Specify Search Restrictions and click Search","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19146913","Delta auto-apply configuration: Duplicate","","","","1. Open Administration module
2. Click on Delta auto-apply configuration ","Medium",""," Ready for review","1. Click on Search button
Select some item in the grid and open it
Click Duplicate button
Check that values are copied from Original item
Expected Result:
values are copied from Original item","1. values are copied from Original item","1. Click on Search button
Select some item in the grid and open it
Click Duplicate button
Check that values are copied from Original item","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19146915","Delta auto-apply configuration: Open","","","","1. Open Administration module
2. Click on Delta auto-apply configuration ","Medium",""," Ready for review","1. Click on Search button
Select some item in the grid click Open button or Double click by item
Check that item's view is displayed
Expected Result:
item's view is displayed","1. item's view is displayed","1. Click on Search button
Select some item in the grid click Open button or Double click by item
Check that item's view is displayed","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19146917","Delta auto-apply configuration: Context menu: Export","","","","1. Open Administration module
2. Click on Delta auto-apply configuration ","Medium",""," Draft","1. Click on Search button
Select some item in the grid
Execute Context command: Export

Check that data is correctly exported to AutoApplyExport.xlsx
Expected Result:
data is correctly exported to AutoApplyExport.xlsx","1. data is correctly exported to AutoApplyExport.xlsx","1. Click on Search button
Select some item in the grid
Execute Context command: Export

Check that data is correctly exported to AutoApplyExport.xlsx","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19146918","Delta auto-apply configuration: Context menu: Apply Configuration","","","","1. Open Administration module
2. Click on Delta auto-apply configuration ","Medium",""," Draft","1. Click on Search button
Select some item in the grid
Execute Context command: Apply Configuration
Open Delta report which is affected by selected AAConfiguration
(e.g. for Cable AAConfiguration - Open Delta Cable report)

Check that command is executed correctly:
Approve Check box is set to ON

Expected Result:
command is executed correctly","1. command is executed correctly","1. Click on Search button
Select some item in the grid
Execute Context command: Apply Configuration
Open Delta report which is affected by selected AAConfiguration
(e.g. for Cable AAConfiguration - Open Delta Cable report)

Check that command is executed correctly:
Approve Check box is set to ON","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19146919","Delta auto-apply configuration: Item View: Activ Checkbox","","","","1. Open Administration module
2. Click on Delta auto-apply configuration ","Medium",""," Ready for review","1. Click on Search button
Select some item in the grid and open it
Set Active checkbox ON / OFF
Click Save button 
Execute some Job with appropriate configuration and check:
Active checkbox ON: AAConfiguration is executed
Active checkbox OFF: AAConfiguration is not executed
Check that command is executed correctly
Expected Result:
command is executed correctly","1. command is executed correctly","1. Click on Search button
Select some item in the grid and open it
Set Active checkbox ON / OFF
Click Save button 
Execute some Job with appropriate configuration and check:
Active checkbox ON: AAConfiguration is executed
Active checkbox OFF: AAConfiguration is not executed
Check that command is executed correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19146867","Mapping: Search","","","","1. Open Administration module
2. Open Tools -> Mapping","Medium",""," Ready for review","1. Click Search button
Check that Search/Search with Restrictions work
Expected Result:
![](index.php?/attachments/get/12090)","1. ![](index.php?/attachments/get/12090)","1. Click Search button
Check that Search/Search with Restrictions work","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19146869","Mapping: Context menu: Open","","","","1. Open Administration module
2. Open Tools -> Mapping
3. Click Search
4. Select some item in the grid
5. Open Context menu","Medium",""," Ready for review","1. Execute Open command
Expected Result:
![](index.php?/attachments/get/12092)

Item is opened in separate tab","1. ![](index.php?/attachments/get/12092)

Item is opened in separate tab","1. Execute Open command","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19146870","Mapping: Context menu: Duplicate","","","","1. Open Administration module
2. Open Tools -> Mapping
3. Click Search
4. Select some item in the grid
5. Open Context menu","Medium",""," Ready for review","1. Execute Duplicate command
Check that all data is copied from original item
Expected Result:
all data is copied from original item","1. all data is copied from original item","1. Execute Duplicate command
Check that all data is copied from original item","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19146872","Mapping: Context menu: Export","","","","1. Open Administration module
2. Open Tools -> Mapping
3. Click Search
4. Select some item in the grid
5. Open Context menu","Medium",""," Ready for review","1. Execute Export command
Check that data is correctly exported in xls file
Expected Result:
data is correctly exported in xls file","1. data is correctly exported in xls file","1. Execute Export command
Check that data is correctly exported in xls file","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19640882","Verify that login and logout are successfull"," Selenide","/axis/api/rest/businessGateway/login","","- GUI is running, which is proved by [C19276350]","High",""," Final","1. User name and password are filled into the empty fiels
Expected Result:
Error code of returned JSON is 0 and sessionId is there as in image:
![](index.php?/attachments/get/12227)
![](index.php?/attachments/get/12394)

2. Desired user group and mandator are selected
Expected Result:
![](index.php?/attachments/get/12395)

3. Login is approved with click on ""ok""
Expected Result:
Home Screen of Command is opened
4. User returns to home screen of command by closing the open module he is in right now
Expected Result:
Start page is shown
5. User clicks on Logout-Button
Expected Result:
User is on login page again","1. Error code of returned JSON is 0 and sessionId is there as in image:
![](index.php?/attachments/get/12227)
![](index.php?/attachments/get/12394)

2. ![](index.php?/attachments/get/12395)

3. Home Screen of Command is opened
4. Start page is shown
5. User is on login page again","1. User name and password are filled into the empty fiels
2. Desired user group and mandator are selected
3. Login is approved with click on ""ok""
4. User returns to home screen of command by closing the open module he is in right now
5. User clicks on Logout-Button","CIF (Command Integration Framework) (Automated testing)","login and logout on GUI is done"," Smoke test","Automated"
"C18871730","Chassis: Create Type Mapping"," API","","Mapping is stored in database","SOURCE_SYSTEM CIF_AUTOMATED_TEST is in data lexicon CDDMOD_SOURCE_SYSTEM and data lexicon exists","Medium",""," Final","1. 1. Mapping should be created via BGE
2. check if mapping is saved correctly via BGE
Expected Result:
Mapping is stored in database","1. Mapping is stored in database","1. 1. Mapping should be created via BGE
2. check if mapping is saved correctly via BGE","CIF (Command Integration Framework) (Automated testing)","Mapping should be created for chassis"," Integration test","ToBeAutomated"
"C18943135","Chassis: Create Mapping Values for Type Mapping"," API","","","- Mapping needs to be created in [C18871730] 
- elid of mapping is needed
- SOURCE_SYSTEM CIF_AUTOMATED_TEST is in data lexicon CDDMOD_SOURCE_SYSTEM and data lexicon exists","Medium",""," Final","1. 1. Create Mapping values
2. save Mapping values for mapping via BGE
3. check if mapping values are stored via BGE
Expected Result:
mapping values are created and stored","1. mapping values are created and stored","1. 1. Create Mapping values
2. save Mapping values for mapping via BGE
3. check if mapping values are stored via BGE","CIF (Command Integration Framework) (Automated testing)",""," Integration test","ToBeAutomated"
"C19146871","Mapping: Context menu: Delete","","","","1. Open Administration module
2. Open Tools -> Mapping
3. Click Search
4. Select some item in the grid
5. Open Context menu","Medium",""," Ready for review","1. Execute Delete command
Click Yes/No in confirmation dialog
Expected Result:
Command is executed correctly","1. Command is executed correctly","1. Execute Delete command
Click Yes/No in confirmation dialog","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19146874","Mapping: Mapping item: Values: Modify","","","","1. Open Administration module
2. Open Tools -> Mapping
3. Click Search
4. Select some item in the grid and open it
5. Open Values section on the left","Medium",""," Ready for review","1. Click Modify button
Specify new values
Click OK / Close
Check that command is executed correctly
Expected Result:
![](index.php?/attachments/get/12094)


command is executed correctly","1. ![](index.php?/attachments/get/12094)


command is executed correctly","1. Click Modify button
Specify new values
Click OK / Close
Check that command is executed correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19146875","Mapping: Mapping item: Values: Remove","","","","1. Open Administration module
2. Open Tools -> Mapping
3. Click Search
4. Select some item in the grid and open it
5. Open Values section on the left","Medium",""," Ready for review","1. Execute Remove command
Click Save
Check that command is executed correctly
Expected Result:
command is executed correctly","1. command is executed correctly","1. Execute Remove command
Click Save
Check that command is executed correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19786074","Smoke test: verify delta calculation is working basically","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19980204","Verify that entries in delta table are grouped by group ID","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19980205","Verify that entries in delta cable table are grouped by group ID","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19980206","Verify that entries in delta service table are grouped by group ID","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19146912","Delta auto-apply configuration Cable delta: New","","","","1. Open Administration module
2. Click on Delta auto-apply configuration ","Medium",""," Ready for review","1. Click New button
Specify required parameters
Click Save, check that item is created
Expected Result:
![](index.php?/attachments/get/12115)","1. ![](index.php?/attachments/get/12115)","1. Click New button
Specify required parameters
Click Save, check that item is created","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19983614","Create Delta Auto-apply Condition for  cable delta","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19147246","Delta Auto-apply: Cable Delta (CREATE/UPDATE/DELETE)"," API","","","Delta auto-apply configuration:
- Delta= Cable Delta
- Active = ON
- Delta auto-apply condition:
	AND Action IN CREATE,UPDATE,DELETE
	OR Source system = e.g. TEST_SK1


Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_CABLE_DATA = Y
SYNCHRONIZE_DATA =N


","Medium",""," Ready for review","1. 1. Open necessary Delta Report
2. Click Search
3. Verify that Approved checkbox is set corretly 
Expected Result:
![](index.php?/attachments/get/12114)","1. ![](index.php?/attachments/get/12114)","1. 1. Open necessary Delta Report
2. Click Search
3. Verify that Approved checkbox is set corretly","CIF (Command Integration Framework) (Automated testing)","1. Open Administration module
2. Open 'Delta Auto-apply configuration' section
3. Create Auto-apply configuration as described in Preconditions
4. In Search view execute for this Auto-apply configuration Context command: 
<Apply configuration>"," Integration test","Manual"
"C19980215","Delta auto-apply configuration Cable Delta: Delete","","","","1. Open Administration module
2. Click on Delta auto-apply configuration ","Medium",""," Ready for review","1. Click on Search button
Select some item in the grid
Clik Delete button
Check that item is deleted
Expected Result:
item is deleted","1. item is deleted","1. Click on Search button
Select some item in the grid
Clik Delete button
Check that item is deleted","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19980207","Delta auto-apply configuration Common Delta: New","","","","1. Open Administration module
2. Click on Delta auto-apply configuration ","Medium",""," Ready for review","1. Click New button
Specify required parameters
Click Save, check that item is created
Expected Result:
![](index.php?/attachments/get/12115)","1. ![](index.php?/attachments/get/12115)","1. Click New button
Specify required parameters
Click Save, check that item is created","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19983615","Create Delta Auto-apply Condition for common delta","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19147247","Delta Auto-apply: Common Delta  (CREATE,UPDATE,DELETE)","","","","Delta auto-apply configuration:
- Delta= Common Delta
- Active = ON
- Delta auto-apply condition:
	AND Action IN CREATE,UPDATE,DELETE
	AND Source system = e.g. TEST_SK1

Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_COMMON_DATA = Y
SYNCHRONIZE_DATA =N

","Medium",""," Ready for review","1. 1. Open necessary Delta Report (or Report created via Query Editor)
2. Click Search
3. Verify that Approved checkbox is set corretly 
Expected Result:
Approve Checkbox (Flag) is set correctly in Delta Report","1. Approve Checkbox (Flag) is set correctly in Delta Report","1. 1. Open necessary Delta Report (or Report created via Query Editor)
2. Click Search
3. Verify that Approved checkbox is set corretly","CIF (Command Integration Framework) (Automated testing)","1. Open Administration module
2. Open 'Delta Auto-apply configuration' section
3. Create Auto-apply configuration as described in Preconditions
4. In Search view execute for this Auto-apply configuration Context command: 
<Apply configuration>","","Manual"
"C19980216","Delta auto-apply configuration Common Delta: Delete","","","","1. Open Administration module
2. Click on Delta auto-apply configuration ","Medium",""," Ready for review","1. Click on Search button
Select some item in the grid
Clik Delete button
Check that item is deleted
Expected Result:
item is deleted","1. item is deleted","1. Click on Search button
Select some item in the grid
Clik Delete button
Check that item is deleted","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19980208","Delta auto-apply configuration Common Link Delta: New","","","","1. Open Administration module
2. Click on Delta auto-apply configuration ","Medium",""," Ready for review","1. Click New button
Specify required parameters
Click Save, check that item is created
Expected Result:
![](index.php?/attachments/get/12115)","1. ![](index.php?/attachments/get/12115)","1. Click New button
Specify required parameters
Click Save, check that item is created","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19983751","Create Delta Auto-apply Condition for common link delta","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19147248","Delta Auto-apply: Common Link Delta (CREATE,UPDATE,DELETE)","","","","Delta auto-apply configuration:
- Delta= Common Link Delta
- Active = ON
- Delta auto-apply condition:
	AND Action IN CREATE,UPDATE,DELETE
	AND Source system = e.g. TEST_SK1


Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_COMMON_DATA = Y
SYNCHRONIZE_DATA =Y

-----------------------


","Medium",""," Ready for review","1. 1. Open necessary Delta Report (or Report created via Query Editor)
2. Click Search
3. Verify that Approved checkbox is set corretly 
Expected Result:
Approve checkbox is applied correctly","1. Approve checkbox is applied correctly","1. 1. Open necessary Delta Report (or Report created via Query Editor)
2. Click Search
3. Verify that Approved checkbox is set corretly","CIF (Command Integration Framework) (Automated testing)","1. Open Administration module
2. Open 'Delta Auto-apply configuration' section
3. Create Auto-apply configuration as described in Preconditions
4. In Search view execute for this Auto-apply configuration Context command: 
<Apply configuration>","","Manual"
"C19980217","Delta auto-apply configuration Common Link Delta: Delete","","","","1. Open Administration module
2. Click on Delta auto-apply configuration ","Medium",""," Ready for review","1. Click on Search button
Select some item in the grid
Clik Delete button
Check that item is deleted
Expected Result:
item is deleted","1. item is deleted","1. Click on Search button
Select some item in the grid
Clik Delete button
Check that item is deleted","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19980209","Delta auto-apply configuration Dynamic Delta: New","","","","1. Open Administration module
2. Click on Delta auto-apply configuration ","Medium",""," Ready for review","1. Click New button
Specify required parameters
Click Save, check that item is created
Expected Result:
![](index.php?/attachments/get/12115)","1. ![](index.php?/attachments/get/12115)","1. Click New button
Specify required parameters
Click Save, check that item is created","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19983752","Create Delta Auto-apply Condition for dynamic delta","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19147249","Delta Auto-apply: Dynamic Delta  (CREATE,UPDATE,DELETE)","","","","Delta auto-apply configuration:
- Delta= Dynamic Delta
- Active = ON
- Delta auto-apply condition:
	  AND Action IN CREATE,UPDATE,DELETE
	  AND Source system = e.g. TEST_SK1

Dynamic Entity
Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_DYNAMIC_DATA= Y
SYNCHRONIZE_DATA =N
","Medium",""," Ready for review","1. 1. Open necessary Delta Report (or Report created via Query Editor)
2. Click Search
3. Verify that Approved checkbox is set corretly 
Expected Result:
Changes (CREATE/UPDATE/DELETE) are applied correctly","1. Changes (CREATE/UPDATE/DELETE) are applied correctly","1. 1. Open necessary Delta Report (or Report created via Query Editor)
2. Click Search
3. Verify that Approved checkbox is set corretly","CIF (Command Integration Framework) (Automated testing)","1. Open Administration module
2. Open 'Delta Auto-apply configuration' section
3. Create Auto-apply configuration as described in Preconditions
4. In Search view execute for this Auto-apply configuration Context command: 
<Apply configuration>","","Manual"
"C19980218","Delta auto-apply configuration Dynamic Delta: Delete","","","","1. Open Administration module
2. Click on Delta auto-apply configuration ","Medium",""," Ready for review","1. Click on Search button
Select some item in the grid
Clik Delete button
Check that item is deleted
Expected Result:
item is deleted","1. item is deleted","1. Click on Search button
Select some item in the grid
Clik Delete button
Check that item is deleted","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19980210","Delta auto-apply configuration Dynamic Link Delta: New","","","","1. Open Administration module
2. Click on Delta auto-apply configuration ","Medium",""," Ready for review","1. Click New button
Specify required parameters
Click Save, check that item is created
Expected Result:
![](index.php?/attachments/get/12115)","1. ![](index.php?/attachments/get/12115)","1. Click New button
Specify required parameters
Click Save, check that item is created","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19983753","Create Delta Auto-apply Condition for dynamic link delta","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19147250","Delta Auto-apply: Dynamic Link Delta  (CREATE,UPDATE,DELETE)","","","","Delta auto-apply configuration:
- Delta= Dynamic Delta
- Active = ON
- Delta auto-apply condition:
	  AND Action IN CREATE,UPDATE,DELETE
	  AND Source system = e.g. TEST_SK1

Dynamic Entity
Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_DYNAMIC_DATA= Y
SYNCHRONIZE_DATA =N

","Medium",""," Ready for review","1. 1. Open necessary Delta Report (or Report created via Query Editor)
2. Click Search
3. Verify that Approved checkbox is set corretly 
Expected Result:
Approve Checkbox (Flag) is set correctly in Delta Report","1. Approve Checkbox (Flag) is set correctly in Delta Report","1. 1. Open necessary Delta Report (or Report created via Query Editor)
2. Click Search
3. Verify that Approved checkbox is set corretly","CIF (Command Integration Framework) (Automated testing)","1. Open Administration module
2. Open 'Delta Auto-apply configuration' section
3. Create Auto-apply configuration as described in Preconditions
4. In Search view execute for this Auto-apply configuration Context command: 
<Apply configuration>","","Manual"
"C19980219","Delta auto-apply configuration Dynamic Link Delta: Delete","","","","1. Open Administration module
2. Click on Delta auto-apply configuration ","Medium",""," Ready for review","1. Click on Search button
Select some item in the grid
Clik Delete button
Check that item is deleted
Expected Result:
item is deleted","1. item is deleted","1. Click on Search button
Select some item in the grid
Clik Delete button
Check that item is deleted","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19980211","Delta auto-apply configuration Hardware Delta: New","","","","1. Open Administration module
2. Click on Delta auto-apply configuration ","Medium",""," Ready for review","1. Click New button
Specify required parameters
Click Save, check that item is created
Expected Result:
![](index.php?/attachments/get/12115)","1. ![](index.php?/attachments/get/12115)","1. Click New button
Specify required parameters
Click Save, check that item is created","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19983755","Create Delta Auto-apply Condition for hardware delta","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19147251","Delta Auto-apply: Hardware Delta  (CREATE,UPDATE,DELETE)","","","","Delta auto-apply configuration:
- Delta= Hardware Delta
- Active = ON
- Delta auto-apply condition:
	   AND Action IN CREATE,UPDATE,DELETE
	   AND Source system = e.g. TEST_SK1


Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE_DATA =N

","Medium",""," Ready for review","1. 1. Open necessary Delta Report (or Report created via Query Editor)
2. Click Search
3. Verify that Approved checkbox is set corretly 
Expected Result:
Approve Checkbox (Flag) is set correctly in Delta Report","1. Approve Checkbox (Flag) is set correctly in Delta Report","1. 1. Open necessary Delta Report (or Report created via Query Editor)
2. Click Search
3. Verify that Approved checkbox is set corretly","CIF (Command Integration Framework) (Automated testing)","1. Open Administration module
2. Open 'Delta Auto-apply configuration' section
3. Create Auto-apply configuration as described in Preconditions
4. In Search view execute for this Auto-apply configuration Context command: 
<Apply configuration>","","Manual"
"C19980220","Delta auto-apply configuration Hardware Delta: Delete","","","","1. Open Administration module
2. Click on Delta auto-apply configuration ","Medium",""," Ready for review","1. Click on Search button
Select some item in the grid
Clik Delete button
Check that item is deleted
Expected Result:
item is deleted","1. item is deleted","1. Click on Search button
Select some item in the grid
Clik Delete button
Check that item is deleted","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19980212","Delta auto-apply configuration Telco Delta: New","","","","1. Open Administration module
2. Click on Delta auto-apply configuration ","Medium",""," Ready for review","1. Click New button
Specify required parameters
Click Save, check that item is created
Expected Result:
![](index.php?/attachments/get/12115)","1. ![](index.php?/attachments/get/12115)","1. Click New button
Specify required parameters
Click Save, check that item is created","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19983756","Create Delta Auto-apply Condition for telco delta","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19147252","Delta Auto-apply: Telco Delta  (CREATE,UPDATE,DELETE)","","","","Delta auto-apply configuration:
- Delta= Telco Delta
- Active = ON
- Delta auto-apply condition:
	AND Action IN CREATE,UPDATE,DELETE
	AND Source system = e.g. TEST_SK1


Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_TELCO_SERVICE_DATA
LOAD_TELCO_LINKS = Y
SYNCHRONIZE_DATA =Y


","Medium",""," Ready for review","1. 1. Open necessary Delta Report (or Report created via Query Editor)
2. Click Search
3. Verify that Approved checkbox is set corretly 
Expected Result:
Approve Checkbox (Flag) is set correctly in Delta Report","1. Approve Checkbox (Flag) is set correctly in Delta Report","1. 1. Open necessary Delta Report (or Report created via Query Editor)
2. Click Search
3. Verify that Approved checkbox is set corretly","CIF (Command Integration Framework) (Automated testing)","1. Open Administration module
2. Open 'Delta Auto-apply configuration' section
3. Create Auto-apply configuration as described in Preconditions
4. In Search view execute for this Auto-apply configuration Context command: 
<Apply configuration>","","Manual"
"C19980221","Delta auto-apply configuration Telco Delta: Delete","","","","1. Open Administration module
2. Click on Delta auto-apply configuration ","Medium",""," Ready for review","1. Click on Search button
Select some item in the grid
Clik Delete button
Check that item is deleted
Expected Result:
item is deleted","1. item is deleted","1. Click on Search button
Select some item in the grid
Clik Delete button
Check that item is deleted","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19980213","Delta auto-apply configuration Telco Link Delta: New","","","","1. Open Administration module
2. Click on Delta auto-apply configuration ","Medium",""," Ready for review","1. Click New button
Specify required parameters
Click Save, check that item is created
Expected Result:
![](index.php?/attachments/get/12115)","1. ![](index.php?/attachments/get/12115)","1. Click New button
Specify required parameters
Click Save, check that item is created","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19983754","Create Delta Auto-apply Condition for telco link delta","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19147253","Delta Auto-apply: Telco Link Delta  (CREATE,UPDATE,DELETE)","","","","Delta auto-apply configuration:
- Delta= Telco Link Delta
- Active = ON
- Delta auto-apply condition:
AND Action IN CREATE,UPDATE,DELETE
AND Source system = e.g. TEST_SK1

Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_TELCO_SERVICE_DATA
LOAD_TELCO_LINKS = Y
SYNCHRONIZE_DATA =N

","Medium",""," Ready for review","1. Open necessary Delta Report (or Report created via Query Editor)
Click Search
Verify that Approved checkbox is set corretly
Expected Result:
Approve Checkbox (Flag) is set correctly in Delta Report","1. Approve Checkbox (Flag) is set correctly in Delta Report","1. Open necessary Delta Report (or Report created via Query Editor)
Click Search
Verify that Approved checkbox is set corretly","CIF (Command Integration Framework) (Automated testing)","1. Open Administration module
2. Open 'Delta Auto-apply configuration' section
3. Create Auto-apply configuration as described in Preconditions
4. In Search view execute for this Auto-apply configuration Context command: 
<Apply configuration>","","Manual"
"C19980222","Delta auto-apply configuration Telco Link Delta: Delete","","","","1. Open Administration module
2. Click on Delta auto-apply configuration ","Medium",""," Ready for review","1. Click on Search button
Select some item in the grid
Clik Delete button
Check that item is deleted
Expected Result:
item is deleted","1. item is deleted","1. Click on Search button
Select some item in the grid
Clik Delete button
Check that item is deleted","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19980214","Delta auto-apply configuration Zone Delta: New","","","","1. Open Administration module
2. Click on Delta auto-apply configuration ","Medium",""," Ready for review","1. Click New button
Specify required parameters
Click Save, check that item is created
Expected Result:
![](index.php?/attachments/get/12115)","1. ![](index.php?/attachments/get/12115)","1. Click New button
Specify required parameters
Click Save, check that item is created","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19983757","Create Delta Auto-apply Condition for zone delta","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19147254","Delta Auto-apply: Zone Delta  (CREATE,UPDATE,DELETE)","","","","Delta auto-apply configuration:
- Delta=  Zone Delta
- Active = ON
- Delta auto-apply condition:
	AND Action IN CREATE,UPDATE,DELETE
	AND Source system = e.g. TEST_SK1


Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_ZONE_DATA = Y
SYNCHRONIZE_DATA =N","Medium",""," Ready for review","1. 1. Open necessary Delta Report (or Report created via Query Editor)
2. Click Search
3. Verify that Approved checkbox is set corretly 
Expected Result:
Approve Checkbox (Flag) is set correctly in Delta Report","1. Approve Checkbox (Flag) is set correctly in Delta Report","1. 1. Open necessary Delta Report (or Report created via Query Editor)
2. Click Search
3. Verify that Approved checkbox is set corretly","CIF (Command Integration Framework) (Automated testing)","1. Open Administration module
2. Open 'Delta Auto-apply configuration' section
3. Create Auto-apply configuration as described in Preconditions
4. In Search view execute for this Auto-apply configuration Context command: 
<Apply configuration>","","Manual"
"C19146914","Delta auto-apply configuration Zone Delta: Delete","","","","1. Open Administration module
2. Click on Delta auto-apply configuration ","Medium",""," Ready for review","1. Click on Search button
Select some item in the grid
Clik Delete button
Check that item is deleted
Expected Result:
item is deleted","1. item is deleted","1. Click on Search button
Select some item in the grid
Clik Delete button
Check that item is deleted","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19146916","Delta auto-apply configuration: Open with","","","","1. Open Administration module
2. Click on Delta auto-apply configuration ","Medium",""," Ready for review","1. Click on Search button
Select some item in the grid
Execute Context/Toolbar command Open With...
Execute Open With -> Entity Manager
Expected Result:
Command is executed correctly","1. Command is executed correctly","1. Click on Search button
Select some item in the grid
Execute Context/Toolbar command Open With...
Execute Open With -> Entity Manager","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19146921","Delta auto-apply configuration: Item View: Delta auto-apply condition: Modify","","","","1. Open Administration module
2. Click on Delta auto-apply configuration ","Medium",""," Ready for review","1. Click on Search button
Select some item in the grid and open it
Select section on the Left: Delta auto-apply condition
Select some item in the grid
Click Modify button, specify new values
Click Save button
Check that command is executed correctly
Expected Result:
 command is executed correctly","1.  command is executed correctly","1. Click on Search button
Select some item in the grid and open it
Select section on the Left: Delta auto-apply condition
Select some item in the grid
Click Modify button, specify new values
Click Save button
Check that command is executed correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19146923","Delta auto-apply configuration: Item View: Delta auto-apply condition: Test Condition","","","","1. Open Administration module
2. Click on Delta auto-apply configuration ","Medium",""," Draft","1. Click on Search button
Select some item in the grid and open it
Select section on the Left: Delta auto-apply condition
Click Test button
Expected Result:
Command is executed correctly","1. Command is executed correctly","1. Click on Search button
Select some item in the grid and open it
Select section on the Left: Delta auto-apply condition
Click Test button","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19640880","Verify that delta entry is set to approved"," API","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)",""," Smoke test","Automated"
"C19272939","Planning: DELETE: NOP","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19272940","Planning: DELETE: PLANNED_DELETE: Apply Planing (Delete)","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19272941","Planning: DELETE: DELETE_WITH_CREATE: Create new with Type b","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19272942","Planning: CREATE: NOP","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19272943","Planning: CREATE: PLANNED_CREATE: Apply Planing (Create)","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19272944","Planning: CREATE: PLANED_CREATE_ BUT_WITH_DIFFERENT_TYPE
: Update Type + Apply Planning (Create)","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19272945","Planning: REPLACE+OTHER: NOP","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19272946","Planning: REPLACE+OTHER: PLANNED_DELETE_ WITH_PLANNED_CREATE
: Apply Planing (Delete) and Apply Planing (Create)","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19272947","Planning: REPLACE+OTHER: PLANNED_DELETE_WITH_PLANNED_CREATE_ BUT_WITH_DEFFERENT_TYPE: Apply Planing (Delete) and Update Type + Apply Planning (CREATE)","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19272948","Planning: REPLACE+OTHER: PLANNED_DELETE: Apply Planing (Delete) but not create planned","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19272949","Real: Delete","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19272950","Real: Create","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19272951","Real: Update attributes","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19272952","Real: Updayte type and attributes","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19272984","Real: DELETE: (TM= , SM= , RM= , AA= ): Delete","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19272985","Real: CREATE: (TM= , SM= , RM= , AA= ): Create","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19272986","Real: UPDATE: (TM=Y, SM=Y, RM=Y, AA= ): Update attributes","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19272987","Real: RECREATE: (TM=Y, SM=Y, RM=N, AA= ): Recreate Service","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19272990","Real: RECREATE: (TM=Y, SM=N, RM=N, AA= ):Recreate Service","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19272991","Real: RECREATE: (TM=N, SM=Y, RM=N, AA= ):Recreate Service","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19272993","Real: RECREATE: (TM=N, SM=N, RM=N, AA= ): Recreate Service","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19273029","Real: DELETE: (TM= , SM= , RM= , AA= ): Delete","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19273030","Real: CREATE: (TM= , SM= , RM= , AA= ): Create","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19273031","Real: UPDATE: (TM=Y, SM=Y, RM=Y, AA= ): Update attributes","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19273035","Zone Delta  (CREATE)","","","","Delta auto-apply configuration:
- Delta=  Zone Delta
- Active = ON
- Delta auto-apply condition:
	AND Action = CREATE
	AND Source system = e.g. TEST_SK1


Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_ZONE_DATA = Y
SYNCHRONIZE_DATA =Y","Medium",""," Ready for review","1. 1. Open Entity Manager -> Business Gateway Entity
2. Find Entities: 
- NmsBuilding
- NmsCampus
- NmsFloor
- NmsRoom
3. Download xls importe templates for them
4. Prepare import data
5. Import it via Administration->Menu Import/Export: Import Configuration data
6. Open in Administration -> CIF Entity configuration
7. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration""
for Entities: 
- Campus
- Building
- Floor
- Room

8. Open in Administration -> Delta auto-apply configuration
9. Create Active auto apply configuration with Delta= Zone Delta
10. Open Tools -> Jobs
11. Create Job for Zone Delta
12. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
13. Open Monitoring results and check records here,e.g.

Start synchronizer	Start zone synchronizer
Campus created	Campus: 'Camp_SK6' created.
Campus created	Campus: 'Camp_SK4' created.
Campus created	Campus: 'Camp_SK5' created.
Building created	Building: 'Camp_SK4|Building_1' created.
Building created	Building: 'Camp_SK6|Building_1' created.
Building created	Building: 'Camp_SK5|Building_1' created.
Floor created	Floor: 'Camp_SK4|Building_1|Floor_1' created.
Floor created	Floor: 'Camp_SK6|Building_1|Floor_1' created.
Floor created	Floor: 'Camp_SK5|Building_1|Floor_1' created.
Room created	Room: 'Camp_SK3|Building_1|Floor_1|Room1' created.
Room created	Room: 'Camp_SK4|Building_1|Floor_1|Room1' created.
Room created	Room: 'Camp_SK5|Building_1|Floor_1|Room1' created.
Room created	Room: 'Camp_SK6|Building_1|Floor_1|Room1' created.
End synchronizer	End zone synchronizer

14. Open Navigator and check that new data is present here
Expected Result:
![](index.php?/attachments/get/11793)","1. ![](index.php?/attachments/get/11793)","1. 1. Open Entity Manager -> Business Gateway Entity
2. Find Entities: 
- NmsBuilding
- NmsCampus
- NmsFloor
- NmsRoom
3. Download xls importe templates for them
4. Prepare import data
5. Import it via Administration->Menu Import/Export: Import Configuration data
6. Open in Administration -> CIF Entity configuration
7. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration""
for Entities: 
- Campus
- Building
- Floor
- Room

8. Open in Administration -> Delta auto-apply configuration
9. Create Active auto apply configuration with Delta= Zone Delta
10. Open Tools -> Jobs
11. Create Job for Zone Delta
12. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
13. Open Monitoring results and check records here,e.g.

Start synchronizer	Start zone synchronizer
Campus created	Campus: 'Camp_SK6' created.
Campus created	Campus: 'Camp_SK4' created.
Campus created	Campus: 'Camp_SK5' created.
Building created	Building: 'Camp_SK4|Building_1' created.
Building created	Building: 'Camp_SK6|Building_1' created.
Building created	Building: 'Camp_SK5|Building_1' created.
Floor created	Floor: 'Camp_SK4|Building_1|Floor_1' created.
Floor created	Floor: 'Camp_SK6|Building_1|Floor_1' created.
Floor created	Floor: 'Camp_SK5|Building_1|Floor_1' created.
Room created	Room: 'Camp_SK3|Building_1|Floor_1|Room1' created.
Room created	Room: 'Camp_SK4|Building_1|Floor_1|Room1' created.
Room created	Room: 'Camp_SK5|Building_1|Floor_1|Room1' created.
Room created	Room: 'Camp_SK6|Building_1|Floor_1|Room1' created.
End synchronizer	End zone synchronizer

14. Open Navigator and check that new data is present here","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19273036","Zone Delta  (UPDATE)","","","","Delta auto-apply configuration:
- Delta=  Zone Delta
- Active = ON
- Delta auto-apply condition:
	AND Action = UPDATE
	AND Source system = e.g. TEST_SK1


Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_ZONE_DATA = Y
SYNCHRONIZE_DATA =Y

-------------------------------
Test Data preparation:
1. Download xls import file(s) from Entity Manager: Business Gateway Entity

Nms Entities:
NmsSwitchCabinet
NmsNetworkElement
NmsChassis
NmsModule
NmsSFP

2 Populate xls file(s) with necessary values.
3 Import xls file(s) in Administration module to populate NMS Cache table with data
Menu Import/Export: Import Configuration data","Medium",""," Ready for review","1. 1. Open Entity Manager -> Business Gateway Entity
2. Find Entities: 
- NmsBuilding
- NmsCampus
- NmsFloor
- NmsRoom
3. Download xls importe templates for them
4. Prepare import data
5. Import it via Administration->Menu Import/Export: Import Configuration data
6. Open in Administration -> CIF Entity configuration
7. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration""
for Entities: 
- Campus
- Building
- Floor
- Room

8. Open in Administration -> Delta auto-apply configuration
9. Create Active auto apply configuration with Delta= Zone Delta
10. Open Tools -> Jobs
11. Create Job for Zone Delta
12. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
Expected Result:
Data is UPDATED correctly","1. Data is UPDATED correctly","1. 1. Open Entity Manager -> Business Gateway Entity
2. Find Entities: 
- NmsBuilding
- NmsCampus
- NmsFloor
- NmsRoom
3. Download xls importe templates for them
4. Prepare import data
5. Import it via Administration->Menu Import/Export: Import Configuration data
6. Open in Administration -> CIF Entity configuration
7. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration""
for Entities: 
- Campus
- Building
- Floor
- Room

8. Open in Administration -> Delta auto-apply configuration
9. Create Active auto apply configuration with Delta= Zone Delta
10. Open Tools -> Jobs
11. Create Job for Zone Delta
12. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19273037","Zone Delta  (DELETE)","","","","Delta auto-apply configuration:
- Delta=  Zone Delta
- Active = ON
- Delta auto-apply condition:
	AND Action = DELETE
	AND Source system = e.g. TEST_SK1


Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_ZONE_DATA = Y
SYNCHRONIZE_DATA =Y","Medium",""," Ready for review","1. 1. Open Entity Manager -> Business Gateway Entity
2. Find Entities: 
- NmsBuilding
- NmsCampus
- NmsFloor
- NmsRoom
3. Download xls importe templates for them
4. Prepare import data
5. Import it via Administration->Menu Import/Export: Import Configuration data

To check DELETE operation data should present in Command but absent in NMS Tables.

6. Open in Administration -> CIF Entity configuration
7. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration""
for Entities: 
- Campus
- Building
- Floor
- Room

8. Open in Administration -> Delta auto-apply configuration
9. Create Active auto apply configuration with Delta= Zone Delta
10. Open Tools -> Jobs
11. Create Job for Zone Delta
12. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly

13. Open Job-> Monitoring and check that corret log entries are present
14. Open Navigator and check that changes are applied correctly
Expected Result:
Data is DELETED correctly from Command.","1. Data is DELETED correctly from Command.","1. 1. Open Entity Manager -> Business Gateway Entity
2. Find Entities: 
- NmsBuilding
- NmsCampus
- NmsFloor
- NmsRoom
3. Download xls importe templates for them
4. Prepare import data
5. Import it via Administration->Menu Import/Export: Import Configuration data

To check DELETE operation data should present in Command but absent in NMS Tables.

6. Open in Administration -> CIF Entity configuration
7. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration""
for Entities: 
- Campus
- Building
- Floor
- Room

8. Open in Administration -> Delta auto-apply configuration
9. Create Active auto apply configuration with Delta= Zone Delta
10. Open Tools -> Jobs
11. Create Job for Zone Delta
12. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly

13. Open Job-> Monitoring and check that corret log entries are present
14. Open Navigator and check that changes are applied correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19273038","Common Delta  (CREATE)","","","","Delta auto-apply configuration:
- Delta= Common Delta
- Active = ON
- Delta auto-apply condition:
	AND Action = CREATE
	AND Source system = e.g. TEST_SK1

Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_COMMON_DATA = Y
SYNCHRONIZE_DATA =Y


Test Data preparation:
1. Download xls import file(s) from Entity Manager: Business Gateway Entity

Nms Entities:
NmsCustomer
NmsPerson

2 Populate xls file(s) with necessary values.
3 Import xls file(s) in Administration module to populate NMS Cache table with data
Menu Import/Export: Import Configuration data","Medium",""," Ready for review","1. To check CREATE operation data should present in NMS Cache (Tables) but absent in Command.

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly
Expected Result:
Changes (CREATE/UPDATE/DELETE) are applied correctly","1. Changes (CREATE/UPDATE/DELETE) are applied correctly","1. To check CREATE operation data should present in NMS Cache (Tables) but absent in Command.

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19273039","Common Delta  (UPDATE)","","","","Delta auto-apply configuration:
- Delta= Common Delta
- Active = ON
- Delta auto-apply condition:
	AND Action = UPDATE
	AND Source system = e.g. TEST_SK1

Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_COMMON_DATA = Y
SYNCHRONIZE_DATA =Y

Test Data preparation:
1. Download xls import file(s) from Entity Manager: Business Gateway Entity

Nms Entities:
NmsCustomer
NmsPerson

2 Populate xls file(s) with necessary values.
3 Import xls file(s) in Administration module to populate NMS Cache table with data
Menu Import/Export: Import Configuration data","Medium",""," Ready for review","1. To check UPDATE operation data in Command (e.g. Description, Remark) should differ from data in NMS Cache (Tables).

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly
Expected Result:
Changes (CREATE/UPDATE/DELETE) are applied correctly","1. Changes (CREATE/UPDATE/DELETE) are applied correctly","1. To check UPDATE operation data in Command (e.g. Description, Remark) should differ from data in NMS Cache (Tables).

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19273040","Common Delta (DELETE)","","","","Delta auto-apply configuration:
- Delta= Common Delta
- Active = ON
- Delta auto-apply condition:
	AND Action = DELETE
	AND Source system = e.g. TEST_SK1

Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_COMMON_DATA = Y
SYNCHRONIZE_DATA =Y


Test Data preparation:
1. Download xls import file(s) from Entity Manager: Business Gateway Entity

Nms Entities:
NmsCustomer
NmsPerson

2 Populate xls file(s) with necessary values.
3 Import xls file(s) in Administration module to populate NMS Cache table with data
Menu Import/Export: Import Configuration data","Medium",""," Ready for review","1. To check DELETE operation data should present in Command but absent in NMS Cache (Tables).

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly
Expected Result:
Changes (CREATE/UPDATE/DELETE) are applied correctly","1. Changes (CREATE/UPDATE/DELETE) are applied correctly","1. To check DELETE operation data should present in Command but absent in NMS Cache (Tables).

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19273041","Common Link Delta  (CREATE)","","","","Delta auto-apply configuration:
- Delta= Common Link Delta
- Active = ON
- Delta auto-apply condition:
	AND Action = CREATE
	AND Source system = e.g. TEST_SK1


Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_COMMON_DATA = Y
SYNCHRONIZE_DATA =Y

-----------------------
------------------------------------------
Test Data preparation:
1. Download xls import file(s) from Entity Manager: Business Gateway Entity

Nms Entities:
NmsCustomerPersonLink

2 Populate xls file(s) with necessary values.
3 Import xls file(s) in Administration module to populate NMS Cache table with data
Menu Import/Export: Import Configuration data
","Medium",""," Ready for review","1. To check CREATE operation data should present in NMS Cache (Tables) but absent in Command.

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly
Expected Result:
Changes (CREATE/UPDATE/DELETE) are applied correctly","1. Changes (CREATE/UPDATE/DELETE) are applied correctly","1. To check CREATE operation data should present in NMS Cache (Tables) but absent in Command.

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19273042","Common Link Delta  (UPDATE)","","","","Delta auto-apply configuration:
- Delta= Common Link Delta
- Active = ON
- Delta auto-apply condition:
	AND Action = UPDATE
	AND Source system = e.g. TEST_SK1


Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_COMMON_DATA = Y
SYNCHRONIZE_DATA =Y

------------------------------------------
Test Data preparation:
1. Download xls import file(s) from Entity Manager: Business Gateway Entity

Nms Entities:
NmsCustomerPersonLink

2 Populate xls file(s) with necessary values.
3 Import xls file(s) in Administration module to populate NMS Cache table with data
Menu Import/Export: Import Configuration data","Medium",""," Ready for review","1. To check UPDATE operation data in Command (e.g. Description, Remark) should differ from data in NMS Cache (Tables).

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly
Expected Result:
Changes (CREATE/UPDATE/DELETE) are applied correctly","1. Changes (CREATE/UPDATE/DELETE) are applied correctly","1. To check UPDATE operation data in Command (e.g. Description, Remark) should differ from data in NMS Cache (Tables).

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19273043","Common Link Delta  (DELETE)","","","","Delta auto-apply configuration:
- Delta= Common Link Delta
- Active = ON
- Delta auto-apply condition:
	AND Action = DELETE
	AND Source system = e.g. TEST_SK1


Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_COMMON_DATA = Y
SYNCHRONIZE_DATA =Y

------------------------------------------
Test Data preparation:
1. Download xls import file(s) from Entity Manager: Business Gateway Entity

Nms Entities:
NmsCustomerPersonLink

2 Populate xls file(s) with necessary values.
3 Import xls file(s) in Administration module to populate NMS Cache table with data
Menu Import/Export: Import Configuration data
","Medium",""," Ready for review","1. To check DELETE operation data should present in Command but absent in NMS Cache (Tables).


1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly
Expected Result:
Changes (CREATE/UPDATE/DELETE) are applied correctly","1. Changes (CREATE/UPDATE/DELETE) are applied correctly","1. To check DELETE operation data should present in Command but absent in NMS Cache (Tables).


1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19273045","Dynamic Delta  (CREATE)","","","","Delta auto-apply configuration:
- Delta= Dynamic Delta
- Active = ON
- Delta auto-apply condition:
	  AND Action = CREATE
	  AND Source system = e.g. TEST_SK1

Dynamic Entity
Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_DYNAMIC_DATA= Y
SYNCHRONIZE_DATA =Y

--------------
Test Data preparation:
1. Download xls import file(s) from Entity Manager: Business Gateway Entity

Nms Entities:
e.g. NmsNameOfDynamicEntity

2 Populate xls file(s) with necessary values.
3 Import xls file(s) in Administration module to populate NMS Cache table with data
Menu Import/Export: Import Configuration data","Medium",""," Ready for review","1. To check CREATE operation data should present in NMS Cache (Tables) but absent in Command.

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly
Expected Result:
Changes (CREATE/UPDATE/DELETE) are applied correctly","1. Changes (CREATE/UPDATE/DELETE) are applied correctly","1. To check CREATE operation data should present in NMS Cache (Tables) but absent in Command.

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19273046","Dynamic Delta  (UPDATE)","","","","Delta auto-apply configuration:
- Delta= Dynamic Delta
- Active = ON
- Delta auto-apply condition:
	  AND Action = UPDATE
	  AND Source system = e.g. TEST_SK1

Dynamic Entity
Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_DYNAMIC_DATA= Y
SYNCHRONIZE_DATA =Y

--------------
Test Data preparation:
1. Download xls import file(s) from Entity Manager: Business Gateway Entity

Nms Entities:
e.g. NmsNameOfDynamicEntity

2 Populate xls file(s) with necessary values.
3 Import xls file(s) in Administration module to populate NMS Cache table with data
Menu Import/Export: Import Configuration data","Medium",""," Ready for review","1. To check UPDATE operation data in Command (e.g. Description, Remark) should differ from data in NMS Cache (Tables).

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly
Expected Result:
Changes (CREATE/UPDATE/DELETE) are applied correctly","1. Changes (CREATE/UPDATE/DELETE) are applied correctly","1. To check UPDATE operation data in Command (e.g. Description, Remark) should differ from data in NMS Cache (Tables).

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19273047","Dynamic Delta  (DELETE)","","","","Delta auto-apply configuration:
- Delta= Dynamic Delta
- Active = ON
- Delta auto-apply condition:
	  AND Action = DELETE
	  AND Source system = e.g. TEST_SK1

Dynamic Entity
Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_DYNAMIC_DATA= Y
SYNCHRONIZE_DATA =Y

--------------
Test Data preparation:
1. Download xls import file(s) from Entity Manager: Business Gateway Entity

Nms Entities:
e.g. NmsNameOfDynamicEntity

2 Populate xls file(s) with necessary values.
3 Import xls file(s) in Administration module to populate NMS Cache table with data
Menu Import/Export: Import Configuration data","Medium",""," Ready for review","1. To check DELETE operation data should present in Command but absent in NMS Cache (Tables).

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly
Expected Result:
Changes (CREATE/UPDATE/DELETE) are applied correctly","1. Changes (CREATE/UPDATE/DELETE) are applied correctly","1. To check DELETE operation data should present in Command but absent in NMS Cache (Tables).

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19273048","Dynamic Link Delta  (CREATE)","","","","Delta auto-apply configuration:
- Delta= Dynamic Delta
- Active = ON
- Delta auto-apply condition:
	  AND Action = CREATE
	  AND Source system = e.g. TEST_SK1

Dynamic Entity
Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_DYNAMIC_DATA= Y
SYNCHRONIZE_DATA =Y

Test Data preparation:
1. Download xls import file(s) from Entity Manager: Business Gateway Entity

Nms Entities:
e.g. NmsNameOf-Dynamic-LINK-Entity

2 Populate xls file(s) with necessary values.
3 Import xls file(s) in Administration module to populate NMS Cache table with data
Menu Import/Export: Import Configuration data","Medium",""," Ready for review","1. To check CREATE operation data should present in NMS Cache (Tables) but absent in Command.

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly
Expected Result:
Changes (CREATE/UPDATE/DELETE) are applied correctly","1. Changes (CREATE/UPDATE/DELETE) are applied correctly","1. To check CREATE operation data should present in NMS Cache (Tables) but absent in Command.

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19273049","Dynamic Link Delta  (UPDATE)","","","","Delta auto-apply configuration:
- Delta= Dynamic Delta
- Active = ON
- Delta auto-apply condition:
	  AND Action = UPDATE
	  AND Source system = e.g. TEST_SK1

Dynamic Entity
Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_DYNAMIC_DATA= Y
SYNCHRONIZE_DATA =Y

--------------
Test Data preparation:
1. Download xls import file(s) from Entity Manager: Business Gateway Entity

Nms Entities:
e.g. NmsNameOf-Dynamic-LINK-Entity

2 Populate xls file(s) with necessary values.
3 Import xls file(s) in Administration module to populate NMS Cache table with data
Menu Import/Export: Import Configuration data","Medium",""," Ready for review","1. To check UPDATE operation data in Command (e.g. Description, Remark) should differ from data in NMS Cache (Tables).


1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly
Expected Result:
Changes (CREATE/UPDATE/DELETE) are applied correctly","1. Changes (CREATE/UPDATE/DELETE) are applied correctly","1. To check UPDATE operation data in Command (e.g. Description, Remark) should differ from data in NMS Cache (Tables).


1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19273050","Dynamic Link Delta  (DELETE)","","","","Delta auto-apply configuration:
- Delta= Dynamic Delta
- Active = ON
- Delta auto-apply condition:
	  AND Action = DELETE
	  AND Source system = e.g. TEST_SK1

Dynamic Entity
Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_DYNAMIC_DATA= Y
SYNCHRONIZE_DATA =Y

----------------
--------------
Test Data preparation:
1. Download xls import file(s) from Entity Manager: Business Gateway Entity

Nms Entities:
e.g. NmsNameOf-Dynamic-LINK-Entity

2 Populate xls file(s) with necessary values.
3 Import xls file(s) in Administration module to populate NMS Cache table with data
Menu Import/Export: Import Configuration data","Medium",""," Ready for review","1. To check DELETE operation data should present in Command but absent in NMS Cache (Tables).


1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly
Expected Result:
Changes (CREATE/UPDATE/DELETE) are applied correctly","1. Changes (CREATE/UPDATE/DELETE) are applied correctly","1. To check DELETE operation data should present in Command but absent in NMS Cache (Tables).


1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19273052","Planning: DELETE: NOP","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19273053","Planning: DELETE: Apply Planing (Delete)","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19273055","Planning: CREATE: NOP","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19273056","Planning: CREATE: Apply Planing (Create)","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19273054","Planning: REPATCH","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19273058","Real: Delete","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19273059","Real: Create","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19273060","Real: Update attributes","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19273061","Real: Updayte type and attributes","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19273057","Real: REPATCH","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C18980119","Synchronize delta CREATE data"," API","","","- delta CREATE data should be created in [C18937601]","Medium",""," Draft","1. 1. Set data as approved via BGE
2. Apply data via BGE
Expected Result:
Data should be added to command table stcdev_chassis","1. Data should be added to command table stcdev_chassis","1. 1. Set data as approved via BGE
2. Apply data via BGE","CIF (Command Integration Framework) (Automated testing)","Approved data should be synchronized to command"," Smoke test","Automated"
"C18990798","Synchronize delta UPDATE data"," API","","","- delta UPDATE data should be created in [C18937602]			
	","Medium",""," Draft","1. 1. Set data as approved via BGE
2. Apply data via BGE
Expected Result:
Data attributes should be changed in command table stcdev_chassis","1. Data attributes should be changed in command table stcdev_chassis","1. 1. Set data as approved via BGE
2. Apply data via BGE","CIF (Command Integration Framework) (Automated testing)","Approved data should be synchronized to command","","Automated"
"C18990799","Synchronize delta DELETE data"," API","","","- delta DELETE data should be created in [C18937603]","Medium",""," Draft","1. 1. Set data as approved via BGE
2. Apply data via BGE
Expected Result:
Data should be deleted from command table stcdev_chassis","1. Data should be deleted from command table stcdev_chassis","1. 1. Set data as approved via BGE
2. Apply data via BGE","CIF (Command Integration Framework) (Automated testing)","Approved data should be synchronized to command","","Automated"
"C19983884","Zone Delta  (CREATE)","","","","Delta auto-apply configuration:
- Delta=  Zone Delta
- Active = ON
- Delta auto-apply condition:
	AND Action = CREATE
	AND Source system = e.g. TEST_SK1


Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_ZONE_DATA = Y
SYNCHRONIZE_DATA =Y","Medium",""," Ready for review","1. 1. Open Entity Manager -> Business Gateway Entity
2. Find Entities: 
- NmsBuilding
- NmsCampus
- NmsFloor
- NmsRoom
3. Download xls importe templates for them
4. Prepare import data
5. Import it via Administration->Menu Import/Export: Import Configuration data
6. Open in Administration -> CIF Entity configuration
7. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration""
for Entities: 
- Campus
- Building
- Floor
- Room

8. Open in Administration -> Delta auto-apply configuration
9. Create Active auto apply configuration with Delta= Zone Delta
10. Open Tools -> Jobs
11. Create Job for Zone Delta
12. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
13. Open Monitoring results and check records here,e.g.

Start synchronizer	Start zone synchronizer
Campus created	Campus: 'Camp_SK6' created.
Campus created	Campus: 'Camp_SK4' created.
Campus created	Campus: 'Camp_SK5' created.
Building created	Building: 'Camp_SK4|Building_1' created.
Building created	Building: 'Camp_SK6|Building_1' created.
Building created	Building: 'Camp_SK5|Building_1' created.
Floor created	Floor: 'Camp_SK4|Building_1|Floor_1' created.
Floor created	Floor: 'Camp_SK6|Building_1|Floor_1' created.
Floor created	Floor: 'Camp_SK5|Building_1|Floor_1' created.
Room created	Room: 'Camp_SK3|Building_1|Floor_1|Room1' created.
Room created	Room: 'Camp_SK4|Building_1|Floor_1|Room1' created.
Room created	Room: 'Camp_SK5|Building_1|Floor_1|Room1' created.
Room created	Room: 'Camp_SK6|Building_1|Floor_1|Room1' created.
End synchronizer	End zone synchronizer

14. Open Navigator and check that new data is present here
Expected Result:
![](index.php?/attachments/get/11793)","1. ![](index.php?/attachments/get/11793)","1. 1. Open Entity Manager -> Business Gateway Entity
2. Find Entities: 
- NmsBuilding
- NmsCampus
- NmsFloor
- NmsRoom
3. Download xls importe templates for them
4. Prepare import data
5. Import it via Administration->Menu Import/Export: Import Configuration data
6. Open in Administration -> CIF Entity configuration
7. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration""
for Entities: 
- Campus
- Building
- Floor
- Room

8. Open in Administration -> Delta auto-apply configuration
9. Create Active auto apply configuration with Delta= Zone Delta
10. Open Tools -> Jobs
11. Create Job for Zone Delta
12. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
13. Open Monitoring results and check records here,e.g.

Start synchronizer	Start zone synchronizer
Campus created	Campus: 'Camp_SK6' created.
Campus created	Campus: 'Camp_SK4' created.
Campus created	Campus: 'Camp_SK5' created.
Building created	Building: 'Camp_SK4|Building_1' created.
Building created	Building: 'Camp_SK6|Building_1' created.
Building created	Building: 'Camp_SK5|Building_1' created.
Floor created	Floor: 'Camp_SK4|Building_1|Floor_1' created.
Floor created	Floor: 'Camp_SK6|Building_1|Floor_1' created.
Floor created	Floor: 'Camp_SK5|Building_1|Floor_1' created.
Room created	Room: 'Camp_SK3|Building_1|Floor_1|Room1' created.
Room created	Room: 'Camp_SK4|Building_1|Floor_1|Room1' created.
Room created	Room: 'Camp_SK5|Building_1|Floor_1|Room1' created.
Room created	Room: 'Camp_SK6|Building_1|Floor_1|Room1' created.
End synchronizer	End zone synchronizer

14. Open Navigator and check that new data is present here","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19983885","Zone Delta  (UPDATE)","","","","Delta auto-apply configuration:
- Delta=  Zone Delta
- Active = ON
- Delta auto-apply condition:
	AND Action = UPDATE
	AND Source system = e.g. TEST_SK1


Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_ZONE_DATA = Y
SYNCHRONIZE_DATA =Y

-------------------------------
Test Data preparation:
1. Download xls import file(s) from Entity Manager: Business Gateway Entity

Nms Entities:
NmsSwitchCabinet
NmsNetworkElement
NmsChassis
NmsModule
NmsSFP

2 Populate xls file(s) with necessary values.
3 Import xls file(s) in Administration module to populate NMS Cache table with data
Menu Import/Export: Import Configuration data","Medium",""," Ready for review","1. 1. Open Entity Manager -> Business Gateway Entity
2. Find Entities: 
- NmsBuilding
- NmsCampus
- NmsFloor
- NmsRoom
3. Download xls importe templates for them
4. Prepare import data
5. Import it via Administration->Menu Import/Export: Import Configuration data
6. Open in Administration -> CIF Entity configuration
7. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration""
for Entities: 
- Campus
- Building
- Floor
- Room

8. Open in Administration -> Delta auto-apply configuration
9. Create Active auto apply configuration with Delta= Zone Delta
10. Open Tools -> Jobs
11. Create Job for Zone Delta
12. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
Expected Result:
Data is UPDATED correctly","1. Data is UPDATED correctly","1. 1. Open Entity Manager -> Business Gateway Entity
2. Find Entities: 
- NmsBuilding
- NmsCampus
- NmsFloor
- NmsRoom
3. Download xls importe templates for them
4. Prepare import data
5. Import it via Administration->Menu Import/Export: Import Configuration data
6. Open in Administration -> CIF Entity configuration
7. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration""
for Entities: 
- Campus
- Building
- Floor
- Room

8. Open in Administration -> Delta auto-apply configuration
9. Create Active auto apply configuration with Delta= Zone Delta
10. Open Tools -> Jobs
11. Create Job for Zone Delta
12. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19983886","Zone Delta  (DELETE)","","","","Delta auto-apply configuration:
- Delta=  Zone Delta
- Active = ON
- Delta auto-apply condition:
	AND Action = DELETE
	AND Source system = e.g. TEST_SK1


Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_ZONE_DATA = Y
SYNCHRONIZE_DATA =Y","Medium",""," Ready for review","1. 1. Open Entity Manager -> Business Gateway Entity
2. Find Entities: 
- NmsBuilding
- NmsCampus
- NmsFloor
- NmsRoom
3. Download xls importe templates for them
4. Prepare import data
5. Import it via Administration->Menu Import/Export: Import Configuration data

To check DELETE operation data should present in Command but absent in NMS Tables.

6. Open in Administration -> CIF Entity configuration
7. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration""
for Entities: 
- Campus
- Building
- Floor
- Room

8. Open in Administration -> Delta auto-apply configuration
9. Create Active auto apply configuration with Delta= Zone Delta
10. Open Tools -> Jobs
11. Create Job for Zone Delta
12. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly

13. Open Job-> Monitoring and check that corret log entries are present
14. Open Navigator and check that changes are applied correctly
Expected Result:
Data is DELETED correctly from Command.","1. Data is DELETED correctly from Command.","1. 1. Open Entity Manager -> Business Gateway Entity
2. Find Entities: 
- NmsBuilding
- NmsCampus
- NmsFloor
- NmsRoom
3. Download xls importe templates for them
4. Prepare import data
5. Import it via Administration->Menu Import/Export: Import Configuration data

To check DELETE operation data should present in Command but absent in NMS Tables.

6. Open in Administration -> CIF Entity configuration
7. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration""
for Entities: 
- Campus
- Building
- Floor
- Room

8. Open in Administration -> Delta auto-apply configuration
9. Create Active auto apply configuration with Delta= Zone Delta
10. Open Tools -> Jobs
11. Create Job for Zone Delta
12. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly

13. Open Job-> Monitoring and check that corret log entries are present
14. Open Navigator and check that changes are applied correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19983887","Common Delta  (CREATE)","","","","Delta auto-apply configuration:
- Delta= Common Delta
- Active = ON
- Delta auto-apply condition:
	AND Action = CREATE
	AND Source system = e.g. TEST_SK1

Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_COMMON_DATA = Y
SYNCHRONIZE_DATA =Y


Test Data preparation:
1. Download xls import file(s) from Entity Manager: Business Gateway Entity

Nms Entities:
NmsCustomer
NmsPerson

2 Populate xls file(s) with necessary values.
3 Import xls file(s) in Administration module to populate NMS Cache table with data
Menu Import/Export: Import Configuration data","Medium",""," Ready for review","1. To check CREATE operation data should present in NMS Cache (Tables) but absent in Command.

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly
Expected Result:
Changes (CREATE/UPDATE/DELETE) are applied correctly","1. Changes (CREATE/UPDATE/DELETE) are applied correctly","1. To check CREATE operation data should present in NMS Cache (Tables) but absent in Command.

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19983888","Common Delta  (UPDATE)","","","","Delta auto-apply configuration:
- Delta= Common Delta
- Active = ON
- Delta auto-apply condition:
	AND Action = UPDATE
	AND Source system = e.g. TEST_SK1

Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_COMMON_DATA = Y
SYNCHRONIZE_DATA =Y

Test Data preparation:
1. Download xls import file(s) from Entity Manager: Business Gateway Entity

Nms Entities:
NmsCustomer
NmsPerson

2 Populate xls file(s) with necessary values.
3 Import xls file(s) in Administration module to populate NMS Cache table with data
Menu Import/Export: Import Configuration data","Medium",""," Ready for review","1. To check UPDATE operation data in Command (e.g. Description, Remark) should differ from data in NMS Cache (Tables).

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly
Expected Result:
Changes (CREATE/UPDATE/DELETE) are applied correctly","1. Changes (CREATE/UPDATE/DELETE) are applied correctly","1. To check UPDATE operation data in Command (e.g. Description, Remark) should differ from data in NMS Cache (Tables).

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19983889","Common Delta (DELETE)","","","","Delta auto-apply configuration:
- Delta= Common Delta
- Active = ON
- Delta auto-apply condition:
	AND Action = DELETE
	AND Source system = e.g. TEST_SK1

Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_COMMON_DATA = Y
SYNCHRONIZE_DATA =Y


Test Data preparation:
1. Download xls import file(s) from Entity Manager: Business Gateway Entity

Nms Entities:
NmsCustomer
NmsPerson

2 Populate xls file(s) with necessary values.
3 Import xls file(s) in Administration module to populate NMS Cache table with data
Menu Import/Export: Import Configuration data","Medium",""," Ready for review","1. To check DELETE operation data should present in Command but absent in NMS Cache (Tables).

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly
Expected Result:
Changes (CREATE/UPDATE/DELETE) are applied correctly","1. Changes (CREATE/UPDATE/DELETE) are applied correctly","1. To check DELETE operation data should present in Command but absent in NMS Cache (Tables).

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19983890","Common Link Delta  (CREATE)","","","","Delta auto-apply configuration:
- Delta= Common Link Delta
- Active = ON
- Delta auto-apply condition:
	AND Action = CREATE
	AND Source system = e.g. TEST_SK1


Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_COMMON_DATA = Y
SYNCHRONIZE_DATA =Y

-----------------------
------------------------------------------
Test Data preparation:
1. Download xls import file(s) from Entity Manager: Business Gateway Entity

Nms Entities:
NmsCustomerPersonLink

2 Populate xls file(s) with necessary values.
3 Import xls file(s) in Administration module to populate NMS Cache table with data
Menu Import/Export: Import Configuration data
","Medium",""," Ready for review","1. To check CREATE operation data should present in NMS Cache (Tables) but absent in Command.

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly
Expected Result:
Changes (CREATE/UPDATE/DELETE) are applied correctly","1. Changes (CREATE/UPDATE/DELETE) are applied correctly","1. To check CREATE operation data should present in NMS Cache (Tables) but absent in Command.

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19983891","Common Link Delta  (UPDATE)","","","","Delta auto-apply configuration:
- Delta= Common Link Delta
- Active = ON
- Delta auto-apply condition:
	AND Action = UPDATE
	AND Source system = e.g. TEST_SK1


Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_COMMON_DATA = Y
SYNCHRONIZE_DATA =Y

------------------------------------------
Test Data preparation:
1. Download xls import file(s) from Entity Manager: Business Gateway Entity

Nms Entities:
NmsCustomerPersonLink

2 Populate xls file(s) with necessary values.
3 Import xls file(s) in Administration module to populate NMS Cache table with data
Menu Import/Export: Import Configuration data","Medium",""," Ready for review","1. To check UPDATE operation data in Command (e.g. Description, Remark) should differ from data in NMS Cache (Tables).

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly
Expected Result:
Changes (CREATE/UPDATE/DELETE) are applied correctly","1. Changes (CREATE/UPDATE/DELETE) are applied correctly","1. To check UPDATE operation data in Command (e.g. Description, Remark) should differ from data in NMS Cache (Tables).

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19983892","Common Link Delta  (DELETE)","","","","Delta auto-apply configuration:
- Delta= Common Link Delta
- Active = ON
- Delta auto-apply condition:
	AND Action = DELETE
	AND Source system = e.g. TEST_SK1


Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_COMMON_DATA = Y
SYNCHRONIZE_DATA =Y

------------------------------------------
Test Data preparation:
1. Download xls import file(s) from Entity Manager: Business Gateway Entity

Nms Entities:
NmsCustomerPersonLink

2 Populate xls file(s) with necessary values.
3 Import xls file(s) in Administration module to populate NMS Cache table with data
Menu Import/Export: Import Configuration data
","Medium",""," Ready for review","1. To check DELETE operation data should present in Command but absent in NMS Cache (Tables).


1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly
Expected Result:
Changes (CREATE/UPDATE/DELETE) are applied correctly","1. Changes (CREATE/UPDATE/DELETE) are applied correctly","1. To check DELETE operation data should present in Command but absent in NMS Cache (Tables).


1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19983894","Dynamic Delta  (CREATE)","","","","Delta auto-apply configuration:
- Delta= Dynamic Delta
- Active = ON
- Delta auto-apply condition:
	  AND Action = CREATE
	  AND Source system = e.g. TEST_SK1

Dynamic Entity
Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_DYNAMIC_DATA= Y
SYNCHRONIZE_DATA =Y

--------------
Test Data preparation:
1. Download xls import file(s) from Entity Manager: Business Gateway Entity

Nms Entities:
e.g. NmsNameOfDynamicEntity

2 Populate xls file(s) with necessary values.
3 Import xls file(s) in Administration module to populate NMS Cache table with data
Menu Import/Export: Import Configuration data","Medium",""," Ready for review","1. To check CREATE operation data should present in NMS Cache (Tables) but absent in Command.

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly
Expected Result:
Changes (CREATE/UPDATE/DELETE) are applied correctly","1. Changes (CREATE/UPDATE/DELETE) are applied correctly","1. To check CREATE operation data should present in NMS Cache (Tables) but absent in Command.

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19983895","Dynamic Delta  (UPDATE)","","","","Delta auto-apply configuration:
- Delta= Dynamic Delta
- Active = ON
- Delta auto-apply condition:
	  AND Action = UPDATE
	  AND Source system = e.g. TEST_SK1

Dynamic Entity
Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_DYNAMIC_DATA= Y
SYNCHRONIZE_DATA =Y

--------------
Test Data preparation:
1. Download xls import file(s) from Entity Manager: Business Gateway Entity

Nms Entities:
e.g. NmsNameOfDynamicEntity

2 Populate xls file(s) with necessary values.
3 Import xls file(s) in Administration module to populate NMS Cache table with data
Menu Import/Export: Import Configuration data","Medium",""," Ready for review","1. To check UPDATE operation data in Command (e.g. Description, Remark) should differ from data in NMS Cache (Tables).

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly
Expected Result:
Changes (CREATE/UPDATE/DELETE) are applied correctly","1. Changes (CREATE/UPDATE/DELETE) are applied correctly","1. To check UPDATE operation data in Command (e.g. Description, Remark) should differ from data in NMS Cache (Tables).

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19983896","Dynamic Delta  (DELETE)","","","","Delta auto-apply configuration:
- Delta= Dynamic Delta
- Active = ON
- Delta auto-apply condition:
	  AND Action = DELETE
	  AND Source system = e.g. TEST_SK1

Dynamic Entity
Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_DYNAMIC_DATA= Y
SYNCHRONIZE_DATA =Y

--------------
Test Data preparation:
1. Download xls import file(s) from Entity Manager: Business Gateway Entity

Nms Entities:
e.g. NmsNameOfDynamicEntity

2 Populate xls file(s) with necessary values.
3 Import xls file(s) in Administration module to populate NMS Cache table with data
Menu Import/Export: Import Configuration data","Medium",""," Ready for review","1. To check DELETE operation data should present in Command but absent in NMS Cache (Tables).

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly
Expected Result:
Changes (CREATE/UPDATE/DELETE) are applied correctly","1. Changes (CREATE/UPDATE/DELETE) are applied correctly","1. To check DELETE operation data should present in Command but absent in NMS Cache (Tables).

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19983897","Dynamic Link Delta  (CREATE)","","","","Delta auto-apply configuration:
- Delta= Dynamic Delta
- Active = ON
- Delta auto-apply condition:
	  AND Action = CREATE
	  AND Source system = e.g. TEST_SK1

Dynamic Entity
Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_DYNAMIC_DATA= Y
SYNCHRONIZE_DATA =Y

Test Data preparation:
1. Download xls import file(s) from Entity Manager: Business Gateway Entity

Nms Entities:
e.g. NmsNameOf-Dynamic-LINK-Entity

2 Populate xls file(s) with necessary values.
3 Import xls file(s) in Administration module to populate NMS Cache table with data
Menu Import/Export: Import Configuration data","Medium",""," Ready for review","1. To check CREATE operation data should present in NMS Cache (Tables) but absent in Command.

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly
Expected Result:
Changes (CREATE/UPDATE/DELETE) are applied correctly","1. Changes (CREATE/UPDATE/DELETE) are applied correctly","1. To check CREATE operation data should present in NMS Cache (Tables) but absent in Command.

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19983898","Dynamic Link Delta  (UPDATE)","","","","Delta auto-apply configuration:
- Delta= Dynamic Delta
- Active = ON
- Delta auto-apply condition:
	  AND Action = UPDATE
	  AND Source system = e.g. TEST_SK1

Dynamic Entity
Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_DYNAMIC_DATA= Y
SYNCHRONIZE_DATA =Y

--------------
Test Data preparation:
1. Download xls import file(s) from Entity Manager: Business Gateway Entity

Nms Entities:
e.g. NmsNameOf-Dynamic-LINK-Entity

2 Populate xls file(s) with necessary values.
3 Import xls file(s) in Administration module to populate NMS Cache table with data
Menu Import/Export: Import Configuration data","Medium",""," Ready for review","1. To check UPDATE operation data in Command (e.g. Description, Remark) should differ from data in NMS Cache (Tables).


1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly
Expected Result:
Changes (CREATE/UPDATE/DELETE) are applied correctly","1. Changes (CREATE/UPDATE/DELETE) are applied correctly","1. To check UPDATE operation data in Command (e.g. Description, Remark) should differ from data in NMS Cache (Tables).


1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19983899","Dynamic Link Delta  (DELETE)","","","","Delta auto-apply configuration:
- Delta= Dynamic Delta
- Active = ON
- Delta auto-apply condition:
	  AND Action = DELETE
	  AND Source system = e.g. TEST_SK1

Dynamic Entity
Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_DYNAMIC_DATA= Y
SYNCHRONIZE_DATA =Y

----------------
--------------
Test Data preparation:
1. Download xls import file(s) from Entity Manager: Business Gateway Entity

Nms Entities:
e.g. NmsNameOf-Dynamic-LINK-Entity

2 Populate xls file(s) with necessary values.
3 Import xls file(s) in Administration module to populate NMS Cache table with data
Menu Import/Export: Import Configuration data","Medium",""," Ready for review","1. To check DELETE operation data should present in Command but absent in NMS Cache (Tables).


1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly
Expected Result:
Changes (CREATE/UPDATE/DELETE) are applied correctly","1. Changes (CREATE/UPDATE/DELETE) are applied correctly","1. To check DELETE operation data should present in Command but absent in NMS Cache (Tables).


1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19983901","Planning: DELETE: NOP","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19983902","Planning: DELETE: Apply Planing (Delete)","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19983904","Planning: CREATE: NOP","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19983905","Planning: CREATE: Apply Planing (Create)","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19983903","Planning: REPATCH","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19983907","Real: Delete","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19983908","Real: Create","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19983909","Real: Update attributes","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19983910","Real: Updayte type and attributes","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19983906","Real: REPATCH","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19983916","Planning: DELETE: NOP","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19983917","Planning: DELETE: PLANNED_DELETE: Apply Planing (Delete)","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19983918","Planning: DELETE: DELETE_WITH_CREATE: Create new with Type b","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19983919","Planning: CREATE: NOP","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19983920","Planning: CREATE: PLANNED_CREATE: Apply Planing (Create)","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19983921","Planning: CREATE: PLANED_CREATE_ BUT_WITH_DIFFERENT_TYPE
: Update Type + Apply Planning (Create)","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19983922","Planning: REPLACE+OTHER: NOP","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19983923","Planning: REPLACE+OTHER: PLANNED_DELETE_ WITH_PLANNED_CREATE
: Apply Planing (Delete) and Apply Planing (Create)","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19983924","Planning: REPLACE+OTHER: PLANNED_DELETE_WITH_PLANNED_CREATE_ BUT_WITH_DEFFERENT_TYPE: Apply Planing (Delete) and Update Type + Apply Planning (CREATE)","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19983925","Planning: REPLACE+OTHER: PLANNED_DELETE: Apply Planing (Delete) but not create planned","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19983926","Real: Delete","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19983927","Real: Create","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19983928","Real: Update attributes","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19983929","Real: Updayte type and attributes","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19983931","Real: DELETE: (TM= , SM= , RM= , AA= ): Delete","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19983932","Real: CREATE: (TM= , SM= , RM= , AA= ): Create","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19983933","Real: UPDATE: (TM=Y, SM=Y, RM=Y, AA= ): Update attributes","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19983934","Real: RECREATE: (TM=Y, SM=Y, RM=N, AA= ): Recreate Service","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19983935","Real: RECREATE: (TM=Y, SM=N, RM=N, AA= ):Recreate Service","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19983936","Real: RECREATE: (TM=N, SM=Y, RM=N, AA= ):Recreate Service","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19983937","Real: RECREATE: (TM=N, SM=N, RM=N, AA= ): Recreate Service","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19983938","Real: DELETE: (TM= , SM= , RM= , AA= ): Delete","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19983939","Real: CREATE: (TM= , SM= , RM= , AA= ): Create","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19983940","Real: UPDATE: (TM=Y, SM=Y, RM=Y, AA= ): Update attributes","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19132181","Verify that hardware data is loaded when Job run started with load data and load hardware data"," API","","","","Medium",""," Rework","1. 1. Open Administration module
2. Open Tools -> Jobs
3. Click Search
4. Select some Job in the grid (or create a new one)
5. Execute in Context menu:  Start/Simulate
6. Click Search button again to see how changed the Status of Job:

In column Runtime:
- green square: Finished
- black square: Failed or never Run

In column 'Functional log level':
- blue: no errors in functional log
- red: Error(s) in functional log

Expected Result:
![](index.php?/attachments/get/12054)","1. ![](index.php?/attachments/get/12054)","1. 1. Open Administration module
2. Open Tools -> Jobs
3. Click Search
4. Select some Job in the grid (or create a new one)
5. Execute in Context menu:  Start/Simulate
6. Click Search button again to see how changed the Status of Job:

In column Runtime:
- green square: Finished
- black square: Failed or never Run

In column 'Functional log level':
- blue: no errors in functional log
- red: Error(s) in functional log","CIF (Command Integration Framework) (Automated testing)",""," Smoke test","Automated"
"C19146876","Verify that hardware data is loaded when Job run started with load data and load zone data","","","","1. Open Administration module
2. Open Tools -> Jobs
3. Click New button
4. Specify required Basic data and click Save
5. Open Additional Settings
6. Specify required settings and Save them
7. Execute Job and check if works correctly 
(e.g. Delta Report is calculated, Auto Apply configuration is executed)","Medium",""," Draft","1.","1.","1.","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19146877","Verify that hardware data is loaded when Job run started with load data and load telco links","","","","1. Open Administration module
2. Open Tools -> Jobs
3. Click New button
4. Specify required Basic data and click Save
5. Open Additional Settings
6. Specify required settings and Save them
7. Execute Job and check if works correctly 
(e.g. Delta Report is calculated, Auto Apply configuration is executed)","Medium",""," Draft","1.","1.","1.","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19146878","Verify that hardware data is loaded when Job run started with load data and load telco service data","","","","1. Open Administration module
2. Open Tools -> Jobs
3. Click New button
4. Specify required Basic data and click Save
5. Open Additional Settings
6. Specify required settings and Save them
7. Execute Job and check if works correctly 
(e.g. Delta Report is calculated, Auto Apply configuration is executed)","Medium",""," Draft","1.","1.","1.","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19146879","Verify that hardware data is loaded when Job run started with load data and load dynamic data","","","","1. Open Administration module
2. Open Tools -> Jobs
3. Click New button
4. Specify required Basic data and click Save
5. Open Additional Settings
6. Specify required settings and Save them
7. Execute Job and check if works correctly 
(e.g. Delta Report is calculated, Auto Apply configuration is executed)","Medium",""," Draft","1.","1.","1.","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19146880","Verify that hardware data is loaded when Job run started with load data and load common data","","","","1. Open Administration module
2. Open Tools -> Jobs
3. Click New button
4. Specify required Basic data and click Save
5. Open Additional Settings
6. Specify required settings and Save them
7. Execute Job and check if works correctly 
(e.g. Delta Report is calculated, Auto Apply configuration is executed)","Medium",""," Draft","1.","1.","1.","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19423963","Verify that hardware data is loaded when Job run started with load data and load common data","","","","1. Open Administration module
2. Open Tools -> Jobs
3. Click New button
4. Specify required Basic data and click Save
5. Open Additional Settings
6. Specify required settings and Save them
7. Execute Job and check if works correctly 
(e.g. Delta Report is calculated, Auto Apply configuration is executed)","Medium",""," Draft","1.","1.","1.","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19423962","Verify that hardware data is loaded when Job run started with load data and load cable data","","","","1. Open Administration module
2. Open Tools -> Jobs
3. Click New button
4. Specify required Basic data and click Save
5. Open Additional Settings
6. Specify required settings and Save them
7. Execute Job and check if works correctly 
(e.g. Delta Report is calculated, Auto Apply configuration is executed)","Medium",""," Draft","1.","1.","1.","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19132179","Start Job run with only synchronization flag"," API","","","","Medium",""," Ready for review","1. 1. Open Administration module
2. Open Tools -> Jobs
3. Click Search
4. Select some Job in the grid (or create a new one)
5. Execute in Context menu:  Start/Simulate
6. Click Search button again to see how changed the Status of Job:

In column Runtime:
- green square: Finished
- black square: Failed or never Run

In column 'Functional log level':
- blue: no errors in functional log
- red: Error(s) in functional log

Expected Result:
![](index.php?/attachments/get/12054)","1. ![](index.php?/attachments/get/12054)","1. 1. Open Administration module
2. Open Tools -> Jobs
3. Click Search
4. Select some Job in the grid (or create a new one)
5. Execute in Context menu:  Start/Simulate
6. Click Search button again to see how changed the Status of Job:

In column Runtime:
- green square: Finished
- black square: Failed or never Run

In column 'Functional log level':
- blue: no errors in functional log
- red: Error(s) in functional log","CIF (Command Integration Framework) (Automated testing)","","","Automated"
"C19132180","Start Job run with only delta calculation"," API","","","","Medium",""," Ready for review","1. 1. Open Administration module
2. Open Tools -> Jobs
3. Click Search
4. Select some Job in the grid (or create a new one)
5. Execute in Context menu:  Start/Simulate
6. Click Search button again to see how changed the Status of Job:

In column Runtime:
- green square: Finished
- black square: Failed or never Run

In column 'Functional log level':
- blue: no errors in functional log
- red: Error(s) in functional log

Expected Result:
![](index.php?/attachments/get/12054)","1. ![](index.php?/attachments/get/12054)","1. 1. Open Administration module
2. Open Tools -> Jobs
3. Click Search
4. Select some Job in the grid (or create a new one)
5. Execute in Context menu:  Start/Simulate
6. Click Search button again to see how changed the Status of Job:

In column Runtime:
- green square: Finished
- black square: Failed or never Run

In column 'Functional log level':
- blue: no errors in functional log
- red: Error(s) in functional log","CIF (Command Integration Framework) (Automated testing)","","","Automated"
"C19132177","Start Job with Test Run check box","","","","","Medium",""," Ready for review","1. 1. Open Administration module
2. Open Tools -> Jobs
3. Click Search
4. Select some Job in the grid (or create a new one)
5. Execute in Context menu:  Start/Simulate
6. Execute Job with Test Run check box ON
Verify that NMS Delta tables are populated in DB

7. Execute Job with Test Run check box OFF
Verify that NMS Delta tables are NOT populated in DB



Expected Result:
![](index.php?/attachments/get/12085)","1. ![](index.php?/attachments/get/12085)","1. 1. Open Administration module
2. Open Tools -> Jobs
3. Click Search
4. Select some Job in the grid (or create a new one)
5. Execute in Context menu:  Start/Simulate
6. Execute Job with Test Run check box ON
Verify that NMS Delta tables are populated in DB

7. Execute Job with Test Run check box OFF
Verify that NMS Delta tables are NOT populated in DB","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C18943122","Verify Job is created successfully"," API","/axis/api/rest/entity/toolFrameworkJob/create?sessionId=","","- BGE is running, which is proved by [C19276350]
- Data Dictionary CIF_AUTOMATED_TESTING exists as proved by [C19146924]



		","Medium",""," Final","1. Create Adapter with all required data via BGE:
    - jobAction 
    - active 
    - userName
    - jobName = CIF_AUTOMATED_TEST_JOB
    - groupName 
    - type
    - factory 
    - manId 
    - sourceSystem 

Expected Result:
Job is created and error code 0 is returned and elid of created job
![](index.php?/attachments/get/12046)","1. Job is created and error code 0 is returned and elid of created job
![](index.php?/attachments/get/12046)","1. Create Adapter with all required data via BGE:
    - jobAction 
    - active 
    - userName
    - jobName = CIF_AUTOMATED_TEST_JOB
    - groupName 
    - type
    - factory 
    - manId 
    - sourceSystem","CIF (Command Integration Framework) (Automated testing)","Job will be created with all mandatory fields filled out"," Smoke test","Automated"
"C19420491","Verify Job is not created when not all mandatory fields are filled"," API","/axis/api/rest/entity/toolFrameworkJob/create?sessionId=","","- BGE is running, which is proved by [C19276350]
- Data Dictionary CIF_AUTOMATED_TESTING exists as proved by [C19146924]



		","Medium",""," Final","1. Create Job with all required data via BGE but one is missing
Expected Result:
Job won't be created. HTTP code 405 will be returned because POST is not allowed without those values","1. Job won't be created. HTTP code 405 will be returned because POST is not allowed without those values","1. Create Job with all required data via BGE but one is missing","CIF (Command Integration Framework) (Automated testing)","Job will be created with not all mandatory fields filled out"," Smoke test","ToBeAutomated"
"C19356883","Verify that job additional settings are added to job"," API","/axis/api/rest/entity/toolFrameworkJob/ JOBELID /update?sessionId=","","- BGE is running, which is proved by [C19276350]","Medium",""," Final","1. Following additional settings with default values are saved for job via BGE POST request:
- SOURCE_SYSTEM = CIF_AUTOMATED_TEST
- LOAD_TELCO_LINKS = N
- LOAD_DATA = Y
- LOAD_HARDWARE_DATA = Y
- LOAD_ZONE_DATA = N
- CALCULATE_DELTA = Y
- LOAD_CABLE_DATA = N
- ADAPTER_CLASS_NAME = de.fnt.command.custom.integration.adapt.adapter.cifAutomatedTest.AutomatedTestAdapter
- LOAD_COMMON_DATA = N
- LOAD_TELCO_SERVICE_DATA = N
- SYNCHRONIZE_DATA = N
- LOAD_DYNAMIC_DATA = N
Expected Result:
Response has error code 0 and additional settings are created","1. Response has error code 0 and additional settings are created","1. Following additional settings with default values are saved for job via BGE POST request:
- SOURCE_SYSTEM = CIF_AUTOMATED_TEST
- LOAD_TELCO_LINKS = N
- LOAD_DATA = Y
- LOAD_HARDWARE_DATA = Y
- LOAD_ZONE_DATA = N
- CALCULATE_DELTA = Y
- LOAD_CABLE_DATA = N
- ADAPTER_CLASS_NAME = de.fnt.command.custom.integration.adapt.adapter.cifAutomatedTest.AutomatedTestAdapter
- LOAD_COMMON_DATA = N
- LOAD_TELCO_SERVICE_DATA = N
- SYNCHRONIZE_DATA = N
- LOAD_DYNAMIC_DATA = N","CIF (Command Integration Framework) (Automated testing)",""," Smoke test","Automated"
"C19420492","Verify Job is not created when it already exists"," API","/axis/api/rest/entity/toolFrameworkJob/create?sessionId=","","- BGE is running, which is proved by [C19276350]
- Data Dictionary CIF_AUTOMATED_TESTING exists as proved by [C19146924]



		","Medium",""," Final","1. Create Adapter with all required data via BGE
Expected Result:
Job is not created, ErrorCode will be 100
![](index.php?/attachments/get/12404)","1. Job is not created, ErrorCode will be 100
![](index.php?/attachments/get/12404)","1. Create Adapter with all required data via BGE","CIF (Command Integration Framework) (Automated testing)","Job will be created but it already exists with same data"," Smoke test","ToBeAutomated"
"C19132175","Verify that job mandatory settings can be modified"," API","","","- BGE is running, which is proved by [C19276350]
- job existst and job elid is known","Medium",""," Rework","1. Update all job setting via BGE request
--> assert.all
Expected Result:
job will be saved with new setting, error code 0 will be returned","1. job will be saved with new setting, error code 0 will be returned","1. Update all job setting via BGE request
--> assert.all","CIF (Command Integration Framework) (Automated testing)","","","Automated"
"C19423964","Verify that job not mandatory settings can be modified"," API","","","- BGE is running, which is proved by [C19276350]
- job existst and job elid is known","Medium",""," Rework","1. Update all job setting via BGE request
--> assert.all
Expected Result:
job will be saved with new setting, error code 0 will be returned","1. job will be saved with new setting, error code 0 will be returned","1. Update all job setting via BGE request
--> assert.all","CIF (Command Integration Framework) (Automated testing)","","","Automated"
"C19574480","Verify that job is deleted successfully"," API","/axis/api/rest/entity/toolFrameworkJob/ jobElid /delete?sessionId=","","- BGE is running, which is proved by [C19276350]
- Job needs to exist and job elid must be known","Medium",""," Final","1. 1. delete job via BGE REST request
2. Check that Job is Deleted correctly
Expected Result:
Response will have error code 0","1. Response will have error code 0","1. 1. delete job via BGE REST request
2. Check that Job is Deleted correctly","CIF (Command Integration Framework) (Automated testing)",""," Integration test","Automated"
"C19420493","Verify that job additional settings can be modified"," API","","","- BGE is running, which is proved by [C19276350]
- job existst and job elid is known","Medium",""," Rework","1. Update a job setting via BGE request
Expected Result:
job will be saved with new setting, error code 0 will be returned","1. job will be saved with new setting, error code 0 will be returned","1. Update a job setting via BGE request","CIF (Command Integration Framework) (Automated testing)","","","Automated"
"C19423965","Verify that job additional settings can be deleted"," API","","","- BGE is running, which is proved by [C19276350]
- job existst and job elid is known","Medium",""," Rework","1. Update a job setting via BGE request
Expected Result:
job will be saved with new setting, error code 0 will be returned","1. job will be saved with new setting, error code 0 will be returned","1. Update a job setting via BGE request","CIF (Command Integration Framework) (Automated testing)","","","Automated"
"C19146881","Jobs: Monitoring: Functional Log: Errors","","","","1. Open Administration module
2. Open Tools -> Jobs
3. Click Search
4. Select some Job in the grid (or create a new one)
5. Execute Job via Context menu: Start/Simulate
6. Open Job
7. Open Monitoring section
8. Select some item in the grid
9. Execute in Context menu: Show functional log","Medium",""," Ready for review","1. Check that for Errors  a meaningful description is present
Expected Result:
![](index.php?/attachments/get/12102)","1. ![](index.php?/attachments/get/12102)","1. Check that for Errors  a meaningful description is present","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19146882","Jobs: Monitoring: Functional Log: Warnings","","","","1. Open Administration module
2. Open Tools -> Jobs
3. Click Search
4. Select some Job in the grid (or create a new one)
5. Execute Job via Context menu: Start/Simulate
6. Open Job
7. Open Monitoring section
8. Select some item in the grid
9. Execute in Context menu: Show functional log","Medium",""," Ready for review","1. Check that for Warnings a meaningful description is present
Expected Result:

![](index.php?/attachments/get/12103)","1. 
![](index.php?/attachments/get/12103)","1. Check that for Warnings a meaningful description is present","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19423968","Verify that Infos will be logged in functional log","","","","1. Open Administration module
2. Open Tools -> Jobs
3. Click Search
4. Select some Job in the grid (or create a new one)
5. Execute Job via Context menu: Start/Simulate
6. Open Job
7. Open Monitoring section
8. Select some item in the grid
9. Execute in Context menu: Show functional log","Medium",""," Ready for review","1. Check that for Errors  a meaningful description is present
Expected Result:
![](index.php?/attachments/get/12102)","1. ![](index.php?/attachments/get/12102)","1. Check that for Errors  a meaningful description is present","CIF (Command Integration Framework) (Automated testing)",""," Smoke test","Manual"
"C18943134","Job is shown in monitoring"," API","","","","Medium",""," Draft","","","","CIF (Command Integration Framework) (Automated testing)","get technical log file of job via BGE","","Automated"
"C19640312","Verify that NetworkElement in NMS cache will be created in Command"," API","/axis/api/rest/entity/networkElement/query?sessionId","NE is found in Command","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists

- Test data:
    - NE in NMS cache with zoneId concatenated of campus|building|floor|room: NmsNE.json
    - no such NE in Command: CommandNE.json","Medium",""," Ready for review","1. Fill NE data from NmsNE.json into NMS cache CTFIFC_NMS_NE via BGE endpoint: ""/axis/api/rest/entity/custom/networkElement/bulkCreate?sessionId="" and attached data as RecordNmsNe.java mapped from NmsNE.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

2. Query if NE is created via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
NE is there
![](index.php?/attachments/get/12363)
Can be mapped to BgeCommandNetworkElement.java
3. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
4. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be an entry in delta table with action = CREATE
5. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
6. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Chassis will be stored in Command STCTCO_NE which should be checked via endpoint "" ""/axis/api/rest/entity/networkElement/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to BgeCommandNetworkElement.java","1. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

2. NE is there
![](index.php?/attachments/get/12363)
Can be mapped to BgeCommandNetworkElement.java
3. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
4. There will be an entry in delta table with action = CREATE
5. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
6. Chassis will be stored in Command STCTCO_NE which should be checked via endpoint "" ""/axis/api/rest/entity/networkElement/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to BgeCommandNetworkElement.java","1. Fill NE data from NmsNE.json into NMS cache CTFIFC_NMS_NE via BGE endpoint: ""/axis/api/rest/entity/custom/networkElement/bulkCreate?sessionId="" and attached data as RecordNmsNe.java mapped from NmsNE.json
2. Query if NE is created via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
4. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
5. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
6. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y","CIF (Command Integration Framework) (Automated testing)","NetworkElement (NE) should be created in Command when it is in NMS chache"," End-to-end test","Automated"
"C19640313","Verify that NetworkElement from NMS cache will be updated in Command"," API","/axis/api/rest/entity/networkElement /query?sessionId","NE is found with updated remark=""Updated NE for testing"" in Command","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists

- Test data:
    - NE in NMS cache with zoneId concatenated of campus|building|floor|room: NmsNe.json
    - NE in Command with same createLinkZone=""zoneElid"" and id = nmdId of NmsChassis and cSourceId = nmsInternalId but remark=""Updated NE for testing"" instead of ""NE for testing"": CommandChassis.json","Medium",""," Ready for review","1. Fill NE into Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement/placeInZone?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)
Expected Result:
NE is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. Query if NE is created via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

Expected Result:
NE is there
![](index.php?/attachments/get/12363)
Can be mapped to BgeCommandNetworkElement.java
3. Fill NE data from NmsNE.json into NMS cache CTFIFC_NMS_NE via BGE endpoint: ""/axis/api/rest/entity/custom/networkElement/bulkCreate?sessionId=""
and attached data as BgeCommandNetworkElement.java mapped from NmsNE.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

4. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/custom/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)

Expected Result:
NE is there
![](index.php?/attachments/get/12365)
Can be mapped to BgeRestrictionsModel.java
5. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
6. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be an entry in delta table with action = UPDATE
7. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
8. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
NE will be stored in Command STCTCO_NE which should be checked via endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to BgeCommandNetworkElement.java","1. NE is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. NE is there
![](index.php?/attachments/get/12363)
Can be mapped to BgeCommandNetworkElement.java
3. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

4. NE is there
![](index.php?/attachments/get/12365)
Can be mapped to BgeRestrictionsModel.java
5. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
6. There will be an entry in delta table with action = UPDATE
7. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
8. NE will be stored in Command STCTCO_NE which should be checked via endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to BgeCommandNetworkElement.java","1. Fill NE into Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement/placeInZone?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)
2. Query if NE is created via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

3. Fill NE data from NmsNE.json into NMS cache CTFIFC_NMS_NE via BGE endpoint: ""/axis/api/rest/entity/custom/networkElement/bulkCreate?sessionId=""
and attached data as BgeCommandNetworkElement.java mapped from NmsNE.json
4. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/custom/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)

5. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
6. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
7. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
8. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y","CIF (Command Integration Framework) (Automated testing)","NetworkElement (NE) should be updated in Command when it is in NMS chache"," End-to-end test","Automated"
"C19640314","Verify that NetworkElement Type from NMS cache will be updated in Command"," API","/axis/api/rest/entity/networkElement/query?sessionId","NE is found with updated type=""???"" in Command","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists

????
- Test data:
    - NE in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA"" (type of device master): NmsNE.json
    - NE in Command with same createLinkDeviceMaster=""EKJAG5VN1YBKEH"" and createLinkZone=""zoneElid"" and id = nmdId of NmsNe and cSourceId = nmsInternalId: CommandNE.json","Medium",""," Rework","1. Fill NE into Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement/placeInZone?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)

Expected Result:
NE is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. Query if NE is created via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

Expected Result:
NE is there
![](index.php?/attachments/get/12363)
Can be mapped to BgeCommandNetworkElement.java
3. Fill NE data from NmsNE.json into NMS cache CTFIFC_NMS_NE via BGE endpoint: ""/axis/api/rest/entity/custom/networkElement/bulkCreate?sessionId=""
and attached data as RecordNmsNe.java mapped from NmsNE.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

4. Query if campus is created via BGE endpoint ""/axis/api/rest/entity/custom/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)

Expected Result:
NE is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsNe.java
5. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
6. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be an entry in delta table with action = UPDATE
7. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
8. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
NE will be stored in Command STCTCO_NE which should be checked via endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to BgeCommandNetworkElement.java","1. NE is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. NE is there
![](index.php?/attachments/get/12363)
Can be mapped to BgeCommandNetworkElement.java
3. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

4. NE is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsNe.java
5. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
6. There will be an entry in delta table with action = UPDATE
7. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
8. NE will be stored in Command STCTCO_NE which should be checked via endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to BgeCommandNetworkElement.java","1. Fill NE into Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement/placeInZone?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)

2. Query if NE is created via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

3. Fill NE data from NmsNE.json into NMS cache CTFIFC_NMS_NE via BGE endpoint: ""/axis/api/rest/entity/custom/networkElement/bulkCreate?sessionId=""
and attached data as RecordNmsNe.java mapped from NmsNE.json
4. Query if campus is created via BGE endpoint ""/axis/api/rest/entity/custom/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)

5. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
6. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
7. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
8. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y","CIF (Command Integration Framework) (Automated testing)","NetworkElement (NE) Type should be updated in Command when it is in NMS chache"," End-to-end test","Automated"
"C19640315","Verify that NetworkElement will be deleted from Command"," API","/axis/api/rest/entity/networkElement/query?sessionId","NE is deleted from Command","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists

- Test data:
    - No such NE in NMS cache: NmsNE.json
    - NE in Command: CommandNE.json","Medium",""," Ready for review","1. Fill NE into Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement/placeInZone?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)

Expected Result:
NE is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. Query if NE is created via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

Expected Result:
NE is there
![](index.php?/attachments/get/12363)
Can be mapped to BgeCommandNetworkElement.java
3. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
4. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be an entry in delta table with action = DELETE
5. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
6. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
NE will be deleted from Command STCTCO_NE which should be checked via endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to BgeCommandNetworkElement.java","1. NE is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. NE is there
![](index.php?/attachments/get/12363)
Can be mapped to BgeCommandNetworkElement.java
3. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
4. There will be an entry in delta table with action = DELETE
5. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
6. NE will be deleted from Command STCTCO_NE which should be checked via endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to BgeCommandNetworkElement.java","1. Fill NE into Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement/placeInZone?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)

2. Query if NE is created via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

3. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
4. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
5. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
6. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y","CIF (Command Integration Framework) (Automated testing)","NetworkElement (NE) should be deleted from Command because it's not in NMS cache"," End-to-end test","Automated"
"C19640316","Verify that there is no operation for NetworkElement when planned but no data in NMS cache"," API","/axis/api/rest/entity/networkElement/query?sessionId","NE is still in planning position, nothing changed","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Planning Protocol exists

- Test data:
    - No such NE in NMS cache: NmsNE.json
    - NE in Command: CommandNE.json","Medium",""," Rework","1. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
2. Fill NE into Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement/placeInZone?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)
Expected Result:
NE is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
3. Query if NE is created via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
NE is there with planStatus=""PLANNED_CREATED""
![](index.php?/attachments/get/12363)
Can be mapped to BgeCommandNetworkElement.java
4. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
5. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
6. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be no entry in delta table
7. Check if NE is still there and in planned position via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to BgeCommandNetworkElement.java
Expected Result:
NE is there","1. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
2. NE is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
3. NE is there with planStatus=""PLANNED_CREATED""
![](index.php?/attachments/get/12363)
Can be mapped to BgeCommandNetworkElement.java
4. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
5. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
6. There will be no entry in delta table
7. NE is there","1. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
2. Fill NE into Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement/placeInZone?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)
3. Query if NE is created via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
4. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
5. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
6. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
7. Check if NE is still there and in planned position via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to BgeCommandNetworkElement.java","CIF (Command Integration Framework) (Automated testing)","NetworkElement (NE) is planned to be created but there is no data coming from NMS cache so there will be no action"," End-to-end test","Automated"
"C19640317","Verify that NetworkElement will be created when planned and NetworkElement with same type and id in NMS cache"," API","/axis/api/rest/entity/networkElement/query?sessionId","NE is not in planning position anymore, is created in planned position","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Planning Protocol exists

- Test data:
    - NE in NMS cache with zoneId concatenated of campus|building|floor|room: NmsNE.json
    - NE in Command with same createLinkDeviceMaster=""EKJAG5VN1YBKEH"" and createLinkZone=""zoneElid"" and id = nmdId of NmsNE and cSourceId = nmsInternalId: CommandNE.json","Medium",""," Rework","1. Fill NE data from NmsNE.json into NMS cache CTFIFC_NMS_NE via BGE endpoint: ""/axis/api/rest/entity/custom/networkElement/bulkCreate?sessionId=""
and attached data as RecordNmsChassis.java mapped from NmsNE.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
2. Query if NE is created via BGE endpoint ""/axis/api/rest/entity/custom/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)

Expected Result:
NE is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsNe.java
3. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
4. Fill NE into Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement/placeInZone?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)
Expected Result:
NE is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
5. Query if NE is created via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
NE is there with planStatus=""PLANNED_CREATED""
![](index.php?/attachments/get/12363)
Can be mapped to BgeCommandNetworkElement.java
6. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
7. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
8. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be entry in delta table with delta_case = PLANNED_CREATE and action = Apply Planning (Create)
9. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java

10. Check if NE is created where position was planned via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to BgeCommandNetworkElement.java
Expected Result:
NE is there and out of planning state","1. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
2. NE is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsNe.java
3. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
4. NE is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
5. NE is there with planStatus=""PLANNED_CREATED""
![](index.php?/attachments/get/12363)
Can be mapped to BgeCommandNetworkElement.java
6. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
7. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
8. There will be entry in delta table with delta_case = PLANNED_CREATE and action = Apply Planning (Create)
9. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java

10. NE is there and out of planning state","1. Fill NE data from NmsNE.json into NMS cache CTFIFC_NMS_NE via BGE endpoint: ""/axis/api/rest/entity/custom/networkElement/bulkCreate?sessionId=""
and attached data as RecordNmsChassis.java mapped from NmsNE.json
2. Query if NE is created via BGE endpoint ""/axis/api/rest/entity/custom/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)

3. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
4. Fill NE into Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement/placeInZone?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)
5. Query if NE is created via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
6. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
7. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
8. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
9. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
10. Check if NE is created where position was planned via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to BgeCommandNetworkElement.java","CIF (Command Integration Framework) (Automated testing)","NetworkElement (NE) is planned to be created and NE with same id and type is in NMs cache so it will be created where planned"," End-to-end test","Automated"
"C19640318","Verify that NetworkElement will be created with updated type when planned and NetworkElement with same id but different type in NMS cache"," API","/axis/api/rest/entity/networkElement/query?sessionId","NE is not in planning position anymore, is created in planned position with updated type","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Planning Protocol exists

- Test data:
    - Other Type here : NE in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA"" (type of device master): NmsNE.json
    - NE in Command with same createLinkDeviceMaster=""EKJAG5VN1YBKEH"" and createLinkZone=""zoneElid"" and id = nmdId of NmsNE and cSourceId = nmsInternalId: CommandNE.json","Medium",""," Rework","1. Fill NE into Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement/placeInZone?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)
Expected Result:
NE is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Query if NE is created via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

Expected Result:
NE is there
![](index.php?/attachments/get/12363)
Can be mapped to BgeCommandNetworkElement.java
3. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
4. Fill NE into Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement/create?sessionId="" and data from CommandNE.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
NE is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
5. Query if NE is created via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
NE is there with planStatus=""PLANNED_CREATED""
![](index.php?/attachments/get/12363)
Can be mapped to BgeCommandNetworkElement.java
6. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
7. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
8. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be entry in delta table with delta_case = PLANNED_CREATE_BUT_WITH_DIFFERENT_TYPE and action = Update Type + Apply Planning (Create)
9. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
10. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java

11. Check if NE is created where position was planned via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to BgeCommandNetworkElement.java
Expected Result:
NE is there and out of planning state","1. NE is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. NE is there
![](index.php?/attachments/get/12363)
Can be mapped to BgeCommandNetworkElement.java
3. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
4. NE is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
5. NE is there with planStatus=""PLANNED_CREATED""
![](index.php?/attachments/get/12363)
Can be mapped to BgeCommandNetworkElement.java
6. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
7. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
8. There will be entry in delta table with delta_case = PLANNED_CREATE_BUT_WITH_DIFFERENT_TYPE and action = Update Type + Apply Planning (Create)
9. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
10. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java

11. NE is there and out of planning state","1. Fill NE into Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement/placeInZone?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)
2. Query if NE is created via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

3. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
4. Fill NE into Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement/create?sessionId="" and data from CommandNE.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
5. Query if NE is created via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
6. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
7. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
8. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
9. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
10. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
11. Check if NE is created where position was planned via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to BgeCommandNetworkElement.java","CIF (Command Integration Framework) (Automated testing)","NetworkElement (NE) is planned to be created and NE with same id but different type is in NMs cache so it will be created but with different type"," End-to-end test","Automated"
"C19640319","Verify that there is no operation for NetworkElement when planned delete but NetworkElement is still in NMS cache"," API","/axis/api/rest/entity/networkElement/query?sessionId","NE is still in planning position with planStatus=""PLANNED_DELETED"", nothing changed","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Planning Protocol exists

- Test data:
    - NE in NMS cache with zoneId concatenated of campus|building|floor|room: NmsNE.json
    - NE in Command with same createLinkDeviceMaster=""EKJAG5VN1YBKEH"" and createLinkZone=""zoneElid"" and id = nmdId of NmsNE and cSourceId = nmsInternalId: CommandNE.json","Medium",""," Rework","1. Fill NE into Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement/placeInZone?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)
Expected Result:
NE is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Query if NE is created via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
NE is there
![](index.php?/attachments/get/12363)
Can be mapped to BgeCommandNetworkElement.java
3. Fill NE data from NmsNE.json into NMS cache CTFIFC_NMS_NE via BGE endpoint: ""/axis/api/rest/entity/custom/networkElement/bulkCreate?sessionId=""
and attached data as RecordNmsNe.java mapped from NmsNE.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. Query if NE is created via BGE endpoint ""/axis/api/rest/entity/custom/networkElement/query?sessionId=""
And NE mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
Expected Result:
NE is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsNE.java
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. Delete NE from Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement/delete?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)
Expected Result:
NE is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
7. Query if NE is deleted via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
NE is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to BgeCommandNetworkElement.java
8. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
9. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
10. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be no entry in delta table
11. Check if NE is still there and in planned position via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to BgeCommandNetworkElement.java
Expected Result:
NE is there with planStatus=""PLANNED_DELETED""","1. NE is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. NE is there
![](index.php?/attachments/get/12363)
Can be mapped to BgeCommandNetworkElement.java
3. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. NE is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsNE.java
5. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. NE is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
7. NE is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to BgeCommandNetworkElement.java
8. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
9. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
10. There will be no entry in delta table
11. NE is there with planStatus=""PLANNED_DELETED""","1. Fill NE into Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement/placeInZone?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)
2. Query if NE is created via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Fill NE data from NmsNE.json into NMS cache CTFIFC_NMS_NE via BGE endpoint: ""/axis/api/rest/entity/custom/networkElement/bulkCreate?sessionId=""
and attached data as RecordNmsNe.java mapped from NmsNE.json
4. Query if NE is created via BGE endpoint ""/axis/api/rest/entity/custom/networkElement/query?sessionId=""
And NE mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
6. Delete NE from Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement/delete?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)
7. Query if NE is deleted via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
8. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
9. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
10. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
11. Check if NE is still there and in planned position via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to BgeCommandNetworkElement.java","CIF (Command Integration Framework) (Automated testing)","NetworkElement (NE) is planned to be deleted but there is the NE coming from NMS cache so there will be no action"," End-to-end test","Automated"
"C19640320","Verify that NetworkElement is deleted when planned delete and no NetworkElement in NMS cache"," API","/axis/api/rest/entity/networkElement /query?sessionId","NE is deleted from Command","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - No such NE in NMS cache: NmsNE.json
    - NE in Command: CommandNE.json","Medium",""," Rework","1. Fill NE into Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement /placeInZone?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)
Expected Result:
NE is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Query if NE is created via BGE endpoint ""/axis/api/rest/entity/networkElement /query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
NE is there
![](index.php?/attachments/get/12363)
Can be mapped to BgeCommandNetworkElement.java
3. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
4. Delete NE from Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement /delete?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)
Expected Result:
NE is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
5. Query if NE is deleted via BGE endpoint ""/axis/api/rest/entity/networkElement /query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
NE is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to BgeCommandNetworkElement.java
6. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
7. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
8. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be entry in delta table with delta_case = PLANNED_DELETE and action = Apply Planning (Delete)
9. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
10. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
NE will be stored in Command STCTCO_NE which should be checked via endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to BgeCommandNetworkElement.java
11. Check if NE is deleted from Command via BGE endpoint ""/axis/api/rest/entity/networkElement /query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
Expected Result:
The NE won't be in the returnData","1. NE is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. NE is there
![](index.php?/attachments/get/12363)
Can be mapped to BgeCommandNetworkElement.java
3. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
4. NE is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
5. NE is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to BgeCommandNetworkElement.java
6. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
7. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
8. There will be entry in delta table with delta_case = PLANNED_DELETE and action = Apply Planning (Delete)
9. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
10. NE will be stored in Command STCTCO_NE which should be checked via endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to BgeCommandNetworkElement.java
11. The NE won't be in the returnData","1. Fill NE into Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement /placeInZone?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)
2. Query if NE is created via BGE endpoint ""/axis/api/rest/entity/networkElement /query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
4. Delete NE from Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement /delete?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)
5. Query if NE is deleted via BGE endpoint ""/axis/api/rest/entity/networkElement /query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
6. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
7. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
8. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
9. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
10. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
11. Check if NE is deleted from Command via BGE endpoint ""/axis/api/rest/entity/networkElement /query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java","CIF (Command Integration Framework) (Automated testing)","NetworkElement (NE) is planned to be deleted and there is no NE in NMS chache so it will be deleted"," End-to-end test","Automated"
"C19640321","Verify that NetworkElement will be deleted and new NetworkElement will be created when another NetworkElement is in NMS cache"," API","/axis/api/rest/entity/networkElement/query?sessionId","NE is deleted and other one created","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Planning Protocol exists

- Test data:
    - NE in NMS cache with zoneId concatenated of campus|building|floor|room: NmsNE.json
    - NE in Command not with same createLinkDeviceMaster=""EKJAG5VN1YBKEH"" and not createLinkZone=""zoneElid"" and not id = nmdId of NmsNE and not cSourceId = nmsInternalId: CommandNE.json","Medium",""," Rework","1. Fill NE into Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement/placeInZone?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)
Expected Result:
NE is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Query if NE is created via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
NE is there
![](index.php?/attachments/get/12363)
Can be mapped to BgeCommandNetworkElement.java
3. Fill NE data from NmsNE.json into NMS cache CTFIFC_NMS_NE via BGE endpoint: ""/axis/api/rest/entity/custom/networkElement/bulkCreate?sessionId=""
and attached data as RecordNmsNe.java mapped from NmsNE.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. Query if NE is created via BGE endpoint ""/axis/api/rest/entity/custom/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
Expected Result:
NE is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsNE.java
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. Delete NE from Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement/delete?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)
Expected Result:
NE is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
7. Query if NE is deleted via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
NE is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to BgeCommandNetworkElement.java
8. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
9. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
10. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will two entries in delta Table:
- action=""Apply Planning (Delete)"" and delta=""PLANNED_DELETE_WITH_CREATE""
- action=""Create new with Type b"" and delta=""PLANNED_DELETE_WITH_CREATE""
11. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
12. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST
CALCULATE_DELTA= N
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
NE will be stored in Command STCTCO_NE which should be checked via endpoint ""/axis/api/rest/entity/networkElement/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to BgeCommandNetworkElement.java
13. Check if first NE is deleted and second one created via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to BgeCommandNetworkElement.java
Expected Result:
NE is created and other one deleted","1. NE is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. NE is there
![](index.php?/attachments/get/12363)
Can be mapped to BgeCommandNetworkElement.java
3. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. NE is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsNE.java
5. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. NE is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
7. NE is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to BgeCommandNetworkElement.java
8. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
9. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
10. There will two entries in delta Table:
- action=""Apply Planning (Delete)"" and delta=""PLANNED_DELETE_WITH_CREATE""
- action=""Create new with Type b"" and delta=""PLANNED_DELETE_WITH_CREATE""
11. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
12. NE will be stored in Command STCTCO_NE which should be checked via endpoint ""/axis/api/rest/entity/networkElement/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to BgeCommandNetworkElement.java
13. NE is created and other one deleted","1. Fill NE into Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement/placeInZone?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)
2. Query if NE is created via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Fill NE data from NmsNE.json into NMS cache CTFIFC_NMS_NE via BGE endpoint: ""/axis/api/rest/entity/custom/networkElement/bulkCreate?sessionId=""
and attached data as RecordNmsNe.java mapped from NmsNE.json
4. Query if NE is created via BGE endpoint ""/axis/api/rest/entity/custom/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
6. Delete NE from Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement/delete?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)
7. Query if NE is deleted via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
8. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
9. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
10. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
11. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
12. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST
CALCULATE_DELTA= N
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
13. Check if first NE is deleted and second one created via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to BgeCommandNetworkElement.java","CIF (Command Integration Framework) (Automated testing)","NetworkElement (NE) is planned to be deleted and there is another NE coming from NMS cache so the first NE will be deleted and the second will be created"," End-to-end test","Automated"
"C19640322","Verify that there is no operation for NetworkElement when planned delete but NetworkElement is still in NMS cache and planned create without NetworkElement in NMS cache"," API","/axis/api/rest/entity/networkElement/query?sessionId","NE is are in planning position, one with planStatus=""PLANNED_DELETED"", one with planStatus=""PLANNED_CREATED""","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - NE in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA""(type of device master) and id A: NmsNE.json
    - NE in Command 
        - One with same createLinkDeviceMaster=""EKJAG5VN1YBKEH"" and createLinkZone=""zoneElid"" and id = nmdId of NmsNE and cSourceId = nmsInternalId like NE with id A: CommandNE.json
        - One not with same values as id A: CommandNE.json","Medium",""," Rework","1. Fill NE A into Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement/placeInZone?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)
Expected Result:
NE A is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Query if NE is created via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
NE A is there
![](index.php?/attachments/get/12363)
Can be mapped to BgeCommandNetworkElement.java
3. Fill NE A data from NmsNE.json into NMS cache CTFIFC_NMS_NE via BGE endpoint: ""/axis/api/rest/entity/custom/networkElement/bulkCreate?sessionId=""
and attached data as RecordNmsNe.java mapped from NmsNE.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. Query if NE is created via BGE endpoint ""/axis/api/rest/entity/custom/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
Expected Result:
NE A is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsNE.java
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. Delete NE A from Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement/delete?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)
Expected Result:
NE is deleted, answer can be mapped to BgeCreateObjectResponse.java
7. Query if NE is deleted via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
NE is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to BgeCommandNetworkElement.java
8. Create NE B in Command table STCTCO_NE via BGE endpoint ""/axis/api/rest/entity/networkElement/placeInZone?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)
Expected Result:
NE is created, answer can be mapped to BgeCreateObjectResponse.java
9. Query if NE is created via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
Expected Result:
NE is there with planStatus=""PLANNED_CREATED""
10. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
11. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
12. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be no entry in delta table
13. Check if NE are still there and in planned position via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to BgeCommandNetworkElement.java
Expected Result:
NE are there","1. NE A is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. NE A is there
![](index.php?/attachments/get/12363)
Can be mapped to BgeCommandNetworkElement.java
3. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. NE A is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsNE.java
5. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. NE is deleted, answer can be mapped to BgeCreateObjectResponse.java
7. NE is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to BgeCommandNetworkElement.java
8. NE is created, answer can be mapped to BgeCreateObjectResponse.java
9. NE is there with planStatus=""PLANNED_CREATED""
10. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
11. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
12. There will be no entry in delta table
13. NE are there","1. Fill NE A into Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement/placeInZone?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)
2. Query if NE is created via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Fill NE A data from NmsNE.json into NMS cache CTFIFC_NMS_NE via BGE endpoint: ""/axis/api/rest/entity/custom/networkElement/bulkCreate?sessionId=""
and attached data as RecordNmsNe.java mapped from NmsNE.json
4. Query if NE is created via BGE endpoint ""/axis/api/rest/entity/custom/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
6. Delete NE A from Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement/delete?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)
7. Query if NE is deleted via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
8. Create NE B in Command table STCTCO_NE via BGE endpoint ""/axis/api/rest/entity/networkElement/placeInZone?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)
9. Query if NE is created via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
10. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
11. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
12. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
13. Check if NE are still there and in planned position via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to BgeCommandNetworkElement.java","CIF (Command Integration Framework) (Automated testing)","NetworkElement (NE) is planned to be deleted but there is the NE coming from NMS cache so there will be no action and another NE is planned to be created but there will also be no action because it is not in NMS cache."," End-to-end test","Automated"
"C19640323","Verify that NetworkElement is deleted when planned delete and NetworkElement not in NMS cache and other NetworkElement is created when planned create and NetworkElement in NMS cache"," API","/axis/api/rest/entity/networkElement/query?sessionId","NE A is created, NE B is deleted","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Planning Protocol exists

- Test data:
    - NE in NMS cache with zoneId concatenated of campus|building|floor|room and id A: NmsNE.json
    - NE in Command 
        - One with same createLinkDeviceMaster=""EKJAG5VN1YBKEH"" and createLinkZone=""zoneElid"" and id = nmdId of NmsNE and cSourceId = nmsInternalId like NE with id A: CommandNE.json
        - One not with same values as id A: CommandNE.json","Medium",""," Rework","1. Fill NE B into Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement/placeInZone?sessionId="" and data from CommandNE.json mapped to STCTCO_NE .java like:
![](index.php?/attachments/get/12360)
Expected Result:
NE B is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Query if NE B is created via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
NE B is there
![](index.php?/attachments/get/12363)
Can be mapped to STCTCO_NE .java
3. Fill NE A data from NmsNE.json into NMS cache CTFIFC_NMS_NE via BGE endpoint: ""/axis/api/rest/entity/custom/networkElement/bulkCreate?sessionId=""
and attached data as RecordNmsNe.java mapped from NmsNE.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. Query if NE is created via BGE endpoint ""/axis/api/rest/entity/custom/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
Expected Result:
NE A is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsNe.java
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. Delete NE B from Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement/delete?sessionId="" and data from CommandNE.json mapped to STCTCO_NE .java like:
![](index.php?/attachments/get/12360)
Expected Result:
NE is deleted, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
7. Query if NE B is deleted via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
NE is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to STCTCO_NE .java
8. Create NE A in Command table STCTCO_NE via BGE endpoint ""/axis/api/rest/entity/networkElement/placeInZone?sessionId="" and data from CommandNE.json mapped to STCTCO_NE .java like:
![](index.php?/attachments/get/12360)
Expected Result:
NE A is created, answer can be mapped to BgeCreateObjectResponse.java
9. Query if NE A is created via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
Expected Result:
NE A is there with planStatus=""PLANNED_CREATED""
10. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
11. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
12. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be two entries in delta table:
- action=""Apply Planning (Delete)"" and delta_case=""PLANNED_DELETE_ WITH_PLANNED_CREATE""
- action=""Apply Planning (Create)"" and delta_case=""PLANNED_DELETE_ WITH_PLANNED_CREATE"" 
13. Set delta table entries approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entries will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
14. 	
Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST
CALCULATE_DELTA= N
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
15. Check if NE A is in Command and if NE B is not in Command anymore via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to STCTCO_NE .java
Expected Result:
NE A is there, NE B is gone","1. NE B is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. NE B is there
![](index.php?/attachments/get/12363)
Can be mapped to STCTCO_NE .java
3. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. NE A is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsNe.java
5. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. NE is deleted, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
7. NE is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to STCTCO_NE .java
8. NE A is created, answer can be mapped to BgeCreateObjectResponse.java
9. NE A is there with planStatus=""PLANNED_CREATED""
10. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
11. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
12. There will be two entries in delta table:
- action=""Apply Planning (Delete)"" and delta_case=""PLANNED_DELETE_ WITH_PLANNED_CREATE""
- action=""Apply Planning (Create)"" and delta_case=""PLANNED_DELETE_ WITH_PLANNED_CREATE"" 
13. The entries will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
14. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
15. NE A is there, NE B is gone","1. Fill NE B into Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement/placeInZone?sessionId="" and data from CommandNE.json mapped to STCTCO_NE .java like:
![](index.php?/attachments/get/12360)
2. Query if NE B is created via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Fill NE A data from NmsNE.json into NMS cache CTFIFC_NMS_NE via BGE endpoint: ""/axis/api/rest/entity/custom/networkElement/bulkCreate?sessionId=""
and attached data as RecordNmsNe.java mapped from NmsNE.json
4. Query if NE is created via BGE endpoint ""/axis/api/rest/entity/custom/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
6. Delete NE B from Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement/delete?sessionId="" and data from CommandNE.json mapped to STCTCO_NE .java like:
![](index.php?/attachments/get/12360)
7. Query if NE B is deleted via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
8. Create NE A in Command table STCTCO_NE via BGE endpoint ""/axis/api/rest/entity/networkElement/placeInZone?sessionId="" and data from CommandNE.json mapped to STCTCO_NE .java like:
![](index.php?/attachments/get/12360)
9. Query if NE A is created via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
10. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
11. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
12. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
13. Set delta table entries approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
14. 	
Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST
CALCULATE_DELTA= N
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
15. Check if NE A is in Command and if NE B is not in Command anymore via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to STCTCO_NE .java","CIF (Command Integration Framework) (Automated testing)","NetworkElement(NE) is planned to be deleted and there is no NE in NMS cache so it will be deleted and another NE is planned to be created and the corresponding NE in in NMS cache so it can be created."," End-to-end test","Automated"
"C19640324","Verify that NetworkElement is deleted when planned delete and NetworkElement not in NMS cache and other NetworkElement is created with updated type when planned create and NetworkElement with same id in NMS cache"," API","/axis/api/rest/entity/networkElement/query?sessionId","NE A is created with another type, NE B is deleted","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - NE in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA""(type of device master) and id A: NmsNE.json
    - NE in Command 
        - One not with same createLinkDeviceMaster but with same createLinkZone=""zoneElid"" and id = nmdId of NmsNE and cSourceId = nmsInternalId like NE with id A: CommandNE.json
        - One not with same values as id A: CommandNE.json","Medium",""," Rework","1. Fill NE B into Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement/placeInZone?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)
Expected Result:
NE B is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Query if NE B is created via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
NE B is there
![](index.php?/attachments/get/12363)
Can be mapped to BgeCommandNetworkElement.java
3. Fill NE A data from NmsNE.json into NMS cache CTFIFC_NMS_NE via BGE endpoint: ""/axis/api/rest/entity/custom/networkElement/bulkCreate?sessionId=""
and attached data as RecordNmsNe.java mapped from NmsNE.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. Query if NE is created via BGE endpoint ""/axis/api/rest/entity/custom/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
Expected Result:
NE A is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsNE.java
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. Delete NE B from Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement/delete?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)
Expected Result:
NE is deleted, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
7. Query if NE B is deleted via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
NE is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to BgeCommandNetworkElement.java
8. Create NE A in Command table STCTCO_NE via BGE endpoint ""/axis/api/rest/entity/networkElement/placeInZone?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)
Expected Result:
NE A is created, answer can be mapped to BgeCreateObjectResponse.java
9. Query if NE A is created via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
Expected Result:
NE A is there with planStatus=""PLANNED_CREATED""
10. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
11. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
12. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be two entries in delta table:
- action=""Apply Planning (Delete)"" and delta_case=""PLANNED_DELETE_WITH_PLANNED_CREATE_BUT_WITH_DIFFERENT_TYPE""
- action=""Update Type + Apply Planning (Create)"" and delta_case=""PLANNED_DELETE_WITH_PLANNED_CREATE_BUT_WITH_DIFFERENT_TYPE"" 
13. Set delta table entries approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entries will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
14. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST
CALCULATE_DELTA= N
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
15. Check if NE A is in Command but with different type and if NE B is not in Command anymore via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to BgeCommandNetworkElement.java
Expected Result:
NE A is there with another type, NE B is gone","1. NE B is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. NE B is there
![](index.php?/attachments/get/12363)
Can be mapped to BgeCommandNetworkElement.java
3. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. NE A is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsNE.java
5. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. NE is deleted, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
7. NE is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to BgeCommandNetworkElement.java
8. NE A is created, answer can be mapped to BgeCreateObjectResponse.java
9. NE A is there with planStatus=""PLANNED_CREATED""
10. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
11. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
12. There will be two entries in delta table:
- action=""Apply Planning (Delete)"" and delta_case=""PLANNED_DELETE_WITH_PLANNED_CREATE_BUT_WITH_DIFFERENT_TYPE""
- action=""Update Type + Apply Planning (Create)"" and delta_case=""PLANNED_DELETE_WITH_PLANNED_CREATE_BUT_WITH_DIFFERENT_TYPE"" 
13. The entries will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
14. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
15. NE A is there with another type, NE B is gone","1. Fill NE B into Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement/placeInZone?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)
2. Query if NE B is created via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Fill NE A data from NmsNE.json into NMS cache CTFIFC_NMS_NE via BGE endpoint: ""/axis/api/rest/entity/custom/networkElement/bulkCreate?sessionId=""
and attached data as RecordNmsNe.java mapped from NmsNE.json
4. Query if NE is created via BGE endpoint ""/axis/api/rest/entity/custom/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
6. Delete NE B from Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement/delete?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)
7. Query if NE B is deleted via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
8. Create NE A in Command table STCTCO_NE via BGE endpoint ""/axis/api/rest/entity/networkElement/placeInZone?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)
9. Query if NE A is created via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
10. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
11. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
12. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
13. Set delta table entries approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
14. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST
CALCULATE_DELTA= N
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
15. Check if NE A is in Command but with different type and if NE B is not in Command anymore via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to BgeCommandNetworkElement.java","CIF (Command Integration Framework) (Automated testing)","NetworkElement (NE) is planned to be deleted and there is no NE in NMS cache so it will be deleted and another NE is planned to be created and the corresponding NE with same id but different type is in NMS cache so it can be created."," End-to-end test","Automated"
"C19640325","Verify that NetworkElement is deleted when planned delete and NetworkElement not in NMS cache and no operation when NetworkElement is planned create but no NetworkElement NMS cache"," API","/axis/api/rest/entity/networkElement/query?sessionId","NE A is deleted, NE B is not created with planStatus=""PLANNED_CREATED""","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Planning Protocol exists

- Test data:
    - No such NE in NMS cache: NmsNE.json
    - Two NE in Command: CommandNE.json","Medium",""," Rework","1. Fill NE A into Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement/placeInZone?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)
Expected Result:
NE A is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Query if NE A is created via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
NE A is there
![](index.php?/attachments/get/12363)
Can be mapped to BgeCommandNetworkElement.java
3. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
4. Delete NE A from Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement/delete?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)
Expected Result:
NE A is deleted, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
5. Query if NE A is deleted via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
NE A is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to BgeCommandNetworkElement.java
6. Create NE B in Command table STCTCO_NE via BGE endpoint ""/axis/api/rest/entity/networkElement/placeInZone?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)
Expected Result:
NE B is created, answer can be mapped to BgeCreateObjectResponse.java
7. Query if NE B is created via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
Expected Result:
NE B is there with planStatus=""PLANNED_CREATED""
8. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
9. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
10. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be this entries in delta table: 
action=""Apply Planning (Delete)"" and delta_case=""PLANNED_DELETE""
11. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
12. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST
CALCULATE_DELTA= N
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
13. Check if NE A is deleted from Command and if NE B is in Command in planned create state via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to BgeCommandNetworkElement.java
Expected Result:
NE A is gone, NE B is in planned create state","1. NE A is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. NE A is there
![](index.php?/attachments/get/12363)
Can be mapped to BgeCommandNetworkElement.java
3. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
4. NE A is deleted, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
5. NE A is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to BgeCommandNetworkElement.java
6. NE B is created, answer can be mapped to BgeCreateObjectResponse.java
7. NE B is there with planStatus=""PLANNED_CREATED""
8. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
9. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
10. There will be this entries in delta table: 
action=""Apply Planning (Delete)"" and delta_case=""PLANNED_DELETE""
11. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
12. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
13. NE A is gone, NE B is in planned create state","1. Fill NE A into Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement/placeInZone?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)
2. Query if NE A is created via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
4. Delete NE A from Command table STCTCO_NE via BGE endpoint ""/api/rest/entity/networkElement/delete?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)
5. Query if NE A is deleted via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
6. Create NE B in Command table STCTCO_NE via BGE endpoint ""/axis/api/rest/entity/networkElement/placeInZone?sessionId="" and data from CommandNE.json mapped to BgeCommandNetworkElement.java like:
![](index.php?/attachments/get/12360)
7. Query if NE B is created via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
8. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
9. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
10. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
11. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
12. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST
CALCULATE_DELTA= N
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
13. Check if NE A is deleted from Command and if NE B is in Command in planned create state via BGE endpoint ""/axis/api/rest/entity/networkElement/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to BgeCommandNetworkElement.java","CIF (Command Integration Framework) (Automated testing)","NetworkElement (NE) is planned to be deleted and there is no NE in NMS cache so it will be deleted and another NE is planned to be created but there is no NE in NMS cache so there will be no action."," End-to-end test","Automated"
"C19735966","Verify that SwitchCabinet in NMS cache will be created in Command"," API","/axis/api/rest/entity/SwitchCabinet/query?sessionId","SwitchCabinet is found in Command","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists

- Test data:
    - SwitchCabinet in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA"" (type of device master): NmsSwitchCabinet.json
    - no such SwitchCabinet in Command: CommandSwitchCabinet.json","Medium",""," Final","1. Fill SwitchCabinet data from NmsSwitchCabinet.json into NMS cache CTFIFC_NMS_SWITCHCABINET via BGE endpoint: ""/axis/api/rest/entity/custom/SwitchCabinet/bulkCreate?sessionId="" and attached data as RecordNmsSwitchCabinet.java mapped from NmsSwitchCabinet.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

2. Query if SwitchCabinet is created via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
SwitchCabinet is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
3. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
4. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be an entry in delta table with action = CREATE
5. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
6. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
SwitchCabinet will be stored in Command STCDEV_SWITCHCABINET which should be checked via endpoint "" ""/axis/api/rest/entity/SwitchCabinet/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSwitchCabinetModel.java","1. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

2. SwitchCabinet is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
3. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
4. There will be an entry in delta table with action = CREATE
5. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
6. SwitchCabinet will be stored in Command STCDEV_SWITCHCABINET which should be checked via endpoint "" ""/axis/api/rest/entity/SwitchCabinet/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSwitchCabinetModel.java","1. Fill SwitchCabinet data from NmsSwitchCabinet.json into NMS cache CTFIFC_NMS_SWITCHCABINET via BGE endpoint: ""/axis/api/rest/entity/custom/SwitchCabinet/bulkCreate?sessionId="" and attached data as RecordNmsSwitchCabinet.java mapped from NmsSwitchCabinet.json
2. Query if SwitchCabinet is created via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
4. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
5. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
6. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y","CIF (Command Integration Framework) (Automated testing)","SwitchCabinet should be created in Command when it is in NMS chache"," End-to-end test","Automated"
"C19735967","Verify that SwitchCabinet from NMS cache will be updated in Command"," API","/axis/api/rest/entity/SwitchCabinet/query?sessionId","SwitchCabinet is found with updated ip-adress""10.122.77.05"" in Command","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists

- Test data:
    - SwitchCabinet in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA"" (type of device master): NmsSwitchCabinet.json
    - SwitchCabinet in Command with same createLinkDeviceMaster=""EKJAG5VN1YBKEH"" and createLinkZone=""zoneElid"" and id = nmdId of NmsSwitchCabinet and cSourceId = nmsInternalId but ip-adress=""10.122.77.05"" instead of ""10.122.77.02"": CommandSwitchCabinet.json","Medium",""," Final","1. Fill SwitchCabinet into Command table STCDEV_SWITCHCABINET via BGE endpoint ""/api/rest/entity/SwitchCabinet/placeInZone?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SwitchCabinet is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. Query if SwitchCabinet is created via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

Expected Result:
SwitchCabinet is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
3. Fill SwitchCabinet data from NmsSwitchCabinet.json into NMS cache CTFIFC_NMS_SWITCHCABINET via BGE endpoint: ""/axis/api/rest/entity/custom/SwitchCabinet/bulkCreate?sessionId=""
and attached data as RecordNmsSwitchCabinet.java mapped from NmsSwitchCabinet.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

4. Query if SwitchCabinet is created via BGE endpoint ""/axis/api/rest/entity/custom/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)

Expected Result:
SwitchCabinet is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsSwitchCabinet.java
5. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
6. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be an entry in delta table with action = UPDATE
7. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
8. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
SwitchCabinet will be stored in Command STCDEV_SWITCHCABINET which should be checked via endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSwitchCabinetModel.java","1. SwitchCabinet is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. SwitchCabinet is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
3. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

4. SwitchCabinet is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsSwitchCabinet.java
5. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
6. There will be an entry in delta table with action = UPDATE
7. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
8. SwitchCabinet will be stored in Command STCDEV_SWITCHCABINET which should be checked via endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSwitchCabinetModel.java","1. Fill SwitchCabinet into Command table STCDEV_SWITCHCABINET via BGE endpoint ""/api/rest/entity/SwitchCabinet/placeInZone?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
2. Query if SwitchCabinet is created via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

3. Fill SwitchCabinet data from NmsSwitchCabinet.json into NMS cache CTFIFC_NMS_SWITCHCABINET via BGE endpoint: ""/axis/api/rest/entity/custom/SwitchCabinet/bulkCreate?sessionId=""
and attached data as RecordNmsSwitchCabinet.java mapped from NmsSwitchCabinet.json
4. Query if SwitchCabinet is created via BGE endpoint ""/axis/api/rest/entity/custom/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)

5. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
6. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
7. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
8. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y","CIF (Command Integration Framework) (Automated testing)","SwitchCabinet should be updated in Command when it is in NMS chache"," End-to-end test","Automated"
"C19735968","Verify that SwitchCabinet Type from NMS cache will be updated in Command"," API","/axis/api/rest/entity/SwitchCabinet/query?sessionId","SwitchCabinet is found with updated type=""???"" in Command","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists

????
- Test data:
    - SwitchCabinet in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA"" (type of device master): NmsSwitchCabinet.json
    - SwitchCabinet in Command with same createLinkDeviceMaster=""EKJAG5VN1YBKEH"" and createLinkZone=""zoneElid"" and id = nmdId of NmsSwitchCabinet and cSourceId = nmsInternalId but ip-adress=""10.122.77.05"" instead of ""10.122.77.02"": CommandSwitchCabinet.json","Medium",""," Rework","1. Fill SwitchCabinet into Command table STCDEV_SwitchCabinet via BGE endpoint ""/api/rest/entity/SwitchCabinet/placeInZone?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)

Expected Result:
SwitchCabinet is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. Query if SwitchCabinet is created via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

Expected Result:
SwitchCabinet is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
3. Fill SwitchCabinet data from NmsSwitchCabinet.json into NMS cache CTFIFC_NMS_SwitchCabinet via BGE endpoint: ""/axis/api/rest/entity/custom/SwitchCabinet/bulkCreate?sessionId=""
and attached data as RecordNmsSwitchCabinet.java mapped from NmsSwitchCabinet.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

4. Query if campus is created via BGE endpoint ""/axis/api/rest/entity/custom/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)

Expected Result:
SwitchCabinet is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsSwitchCabinet.java
5. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
6. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be an entry in delta table with action = UPDATE
7. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
8. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
SwitchCabinet will be stored in Command STCDEV_SwitchCabinet which should be checked via endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSwitchCabinetModel.java","1. SwitchCabinet is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. SwitchCabinet is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
3. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

4. SwitchCabinet is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsSwitchCabinet.java
5. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
6. There will be an entry in delta table with action = UPDATE
7. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
8. SwitchCabinet will be stored in Command STCDEV_SwitchCabinet which should be checked via endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSwitchCabinetModel.java","1. Fill SwitchCabinet into Command table STCDEV_SwitchCabinet via BGE endpoint ""/api/rest/entity/SwitchCabinet/placeInZone?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)

2. Query if SwitchCabinet is created via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

3. Fill SwitchCabinet data from NmsSwitchCabinet.json into NMS cache CTFIFC_NMS_SwitchCabinet via BGE endpoint: ""/axis/api/rest/entity/custom/SwitchCabinet/bulkCreate?sessionId=""
and attached data as RecordNmsSwitchCabinet.java mapped from NmsSwitchCabinet.json
4. Query if campus is created via BGE endpoint ""/axis/api/rest/entity/custom/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)

5. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
6. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
7. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
8. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y","CIF (Command Integration Framework) (Automated testing)","SwitchCabinet Type should be updated in Command when it is in NMS chache"," End-to-end test","Automated"
"C19735969","Verify that SwitchCabinet will be deleted from Command"," API","/axis/api/rest/entity/SwitchCabinet/query?sessionId","SwitchCabinet is deleted from Command","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists

- Test data:
    - No such SwitchCabinet in NMS cache: NmsSwitchCabinet.json
    - SwitchCabinet in Command: CommandSwitchCabinet.json","Medium",""," Final","1. Fill SwitchCabinet into Command table STCDEV_SwitchCabinet via BGE endpoint ""/api/rest/entity/SwitchCabinet/placeInZone?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)

Expected Result:
SwitchCabinet is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. Query if SwitchCabinet is created via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

Expected Result:
SwitchCabinet is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
3. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
4. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be an entry in delta table with action = DELETE
5. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
6. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
SwitchCabinet will be deleted from Command STCDEV_SwitchCabinet which should be checked via endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSwitchCabinetModel.java","1. SwitchCabinet is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. SwitchCabinet is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
3. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
4. There will be an entry in delta table with action = DELETE
5. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
6. SwitchCabinet will be deleted from Command STCDEV_SwitchCabinet which should be checked via endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSwitchCabinetModel.java","1. Fill SwitchCabinet into Command table STCDEV_SwitchCabinet via BGE endpoint ""/api/rest/entity/SwitchCabinet/placeInZone?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)

2. Query if SwitchCabinet is created via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

3. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
4. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
5. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
6. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y","CIF (Command Integration Framework) (Automated testing)","SwitchCabinet should be delted from Command because it's not in NMS cache"," End-to-end test","Automated"
"C19735970","Verify that there is no operation for SwitchCabinet when planned but no data in NMS cache"," API","/axis/api/rest/entity/SwitchCabinet/query?sessionId","SwitchCabinet is still in planning position, nothing changed","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - No such SwitchCabinet in NMS cache: NmsSwitchCabinet.json
    - SwitchCabinet in Command: CommandSwitchCabinet.json","Medium",""," Final","1. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
2. Fill SwitchCabinet into Command table STCDEV_SwitchCabinet via BGE endpoint ""/api/rest/entity/SwitchCabinet/placeInZone?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SwitchCabinet is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
3. Query if SwitchCabinet is created via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
SwitchCabinet is there with planStatus=""PLANNED_CREATED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
4. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
5. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
6. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be no entry in delta table
7. Check if SwitchCabinetis still there and in planned position via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSwitchCabinetModel.java
Expected Result:
SwitchCabinet is there","1. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
2. SwitchCabinet is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
3. SwitchCabinet is there with planStatus=""PLANNED_CREATED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
4. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
5. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
6. There will be no entry in delta table
7. SwitchCabinet is there","1. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
2. Fill SwitchCabinet into Command table STCDEV_SwitchCabinet via BGE endpoint ""/api/rest/entity/SwitchCabinet/placeInZone?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
3. Query if SwitchCabinet is created via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
4. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
5. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
6. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
7. Check if SwitchCabinetis still there and in planned position via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSwitchCabinetModel.java","CIF (Command Integration Framework) (Automated testing)","SwitchCabinet is planned to be created but there is no data coming from NMS cache so there will be no action"," End-to-end test","Automated"
"C19735971","Verify that SwitchCabinetwill be created when planned and SwitchCabinet with same type and id in NMS cache"," API","/axis/api/rest/entity/SwitchCabinet/query?sessionId","SwitchCabinet is not in planning position anymore, is created in planned position","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - SwitchCabinet in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA"" (type of device master): NmsSwitchCabinet.json
    - SwitchCabinet in Command with same createLinkDeviceMaster=""EKJAG5VN1YBKEH"" and createLinkZone=""zoneElid"" and id = nmdId of NmsSwitchCabinet and cSourceId = nmsInternalId: CommandSwitchCabinet.json","Medium",""," Final","1. Fill SwitchCabinet data from NmsSwitchCabinet.json into NMS cache CTFIFC_NMS_SwitchCabinet via BGE endpoint: ""/axis/api/rest/entity/custom/SwitchCabinet/bulkCreate?sessionId=""
and attached data as RecordNmsSwitchCabinet.java mapped from NmsSwitchCabinet.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
2. Query if SwitchCabinet is created via BGE endpoint ""/axis/api/rest/entity/custom/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)

Expected Result:
SwitchCabinet is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsSwitchCabinet.java
3. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
4. Fill SwitchCabinet into Command table STCDEV_SwitchCabinet via BGE endpoint ""/api/rest/entity/SwitchCabinet/placeInZone?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SwitchCabinet is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
5. Query if SwitchCabinet is created via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
SwitchCabinet is there with planStatus=""PLANNED_CREATED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
6. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
7. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
8. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be entry in delta table with delta_case = PLANNED_CREATE and action = Apply Planning (Create)
9. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java

10. Check if SwitchCabinet is created where position was planned via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSwitchCabinetModel.java
Expected Result:
SwitchCabinet is there and out of planning state","1. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
2. SwitchCabinet is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsSwitchCabinet.java
3. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
4. SwitchCabinet is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
5. SwitchCabinet is there with planStatus=""PLANNED_CREATED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
6. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
7. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
8. There will be entry in delta table with delta_case = PLANNED_CREATE and action = Apply Planning (Create)
9. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java

10. SwitchCabinet is there and out of planning state","1. Fill SwitchCabinet data from NmsSwitchCabinet.json into NMS cache CTFIFC_NMS_SwitchCabinet via BGE endpoint: ""/axis/api/rest/entity/custom/SwitchCabinet/bulkCreate?sessionId=""
and attached data as RecordNmsSwitchCabinet.java mapped from NmsSwitchCabinet.json
2. Query if SwitchCabinet is created via BGE endpoint ""/axis/api/rest/entity/custom/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)

3. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
4. Fill SwitchCabinet into Command table STCDEV_SwitchCabinet via BGE endpoint ""/api/rest/entity/SwitchCabinet/placeInZone?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
5. Query if SwitchCabinet is created via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
6. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
7. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
8. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
9. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
10. Check if SwitchCabinet is created where position was planned via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSwitchCabinetModel.java","CIF (Command Integration Framework) (Automated testing)","SwitchCabinet is planned to be created and SwitchCabinet with same id and type is in NMs cache so it will be created where planned"," End-to-end test","Automated"
"C19735972","Verify that SwitchCabinet will be created with updated type when planned and SwitchCabinet with same id but different type in NMS cache"," API","/axis/api/rest/entity/SwitchCabinet/query?sessionId","SwitchCabinet is not in planning position anymore, is created in planned position with updated type","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - Other Type here : SwitchCabinet in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA"" (type of device master): NmsSwitchCabinet.json
    - SwitchCabinet in Command not with same createLinkDeviceMaster=""EKJAG5VN1YBKEH"" but with same createLinkZone=""zoneElid"" and id = nmdId of NmsSwitchCabinet and cSourceId = nmsInternalId: CommandSwitchCabinet.json","Medium",""," Rework","1. Fill SwitchCabinet into Command table STCDEV_SwitchCabinet via BGE endpoint ""/api/rest/entity/SwitchCabinet/placeInZone?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SwitchCabinet is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Query if SwitchCabinet is created via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

Expected Result:
SwitchCabinet is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
3. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
4. Fill SwitchCabinet into Command table STCDEV_SwitchCabinet via BGE endpoint ""/api/rest/entity/SwitchCabinet/create?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SwitchCabinet is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
5. Query if SwitchCabinet is created via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
SwitchCabinet is there with planStatus=""PLANNED_CREATED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
6. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
7. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
8. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be entry in delta table with delta_case = PLANNED_CREATE_BUT_WITH_DIFFERENT_TYPE and action = Update Type + Apply Planning (Create)
9. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
10. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java

11. Check if SwitchCabinet is created where position was planned via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSwitchCabinetModel.java
Expected Result:
SwitchCabinet is there and out of planning state","1. SwitchCabinet is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. SwitchCabinet is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
3. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
4. SwitchCabinet is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
5. SwitchCabinet is there with planStatus=""PLANNED_CREATED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
6. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
7. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
8. There will be entry in delta table with delta_case = PLANNED_CREATE_BUT_WITH_DIFFERENT_TYPE and action = Update Type + Apply Planning (Create)
9. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
10. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java

11. SwitchCabinet is there and out of planning state","1. Fill SwitchCabinet into Command table STCDEV_SwitchCabinet via BGE endpoint ""/api/rest/entity/SwitchCabinet/placeInZone?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
2. Query if SwitchCabinet is created via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

3. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
4. Fill SwitchCabinet into Command table STCDEV_SwitchCabinet via BGE endpoint ""/api/rest/entity/SwitchCabinet/create?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
5. Query if SwitchCabinet is created via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
6. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
7. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
8. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
9. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
10. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
11. Check if SwitchCabinet is created where position was planned via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSwitchCabinetModel.java","CIF (Command Integration Framework) (Automated testing)","SwitchCabinet is planned to be created and SwitchCabinet with same id but different type is in NMs cache so it will be created but with different type"," End-to-end test","Automated"
"C19735973","Verify that there is no operation for SwitchCabinet when planned delete but SwitchCabinet is still in NMS cache"," API","/axis/api/rest/entity/SwitchCabinet/query?sessionId","SwitchCabinet is still in planning position with planStatus=""PLANNED_DELETED"", nothing changed","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - SwitchCabinet in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA"" (type of device master): NmsSwitchCabinet.json
    - SwitchCabinet in Command with same createLinkDeviceMaster=""EKJAG5VN1YBKEH"" and createLinkZone=""zoneElid"" and id = nmdId of NmsSwitchCabinet and cSourceId = nmsInternalId: CommandSwitchCabinet.json","Medium",""," Final","1. Fill SwitchCabinet into Command table STCDEV_SwitchCabinet via BGE endpoint ""/api/rest/entity/SwitchCabinet/placeInZone?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SwitchCabinet is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Query if SwitchCabinet is created via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
SwitchCabinet is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
3. Fill SwitchCabinet data from NmsSwitchCabinet.json into NMS cache CTFIFC_NMS_SwitchCabinet via BGE endpoint: ""/axis/api/rest/entity/custom/SwitchCabinet/bulkCreate?sessionId=""
and attached data as RecordNmsSwitchCabinet.java mapped from NmsSwitchCabinet.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. Query if SwitchCabinet is created via BGE endpoint ""/axis/api/rest/entity/custom/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
Expected Result:
SwitchCabinet is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsSwitchCabinet.java
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. Delete SwitchCabinet from Command table STCDEV_SwitchCabinet via BGE endpoint ""/api/rest/entity/SwitchCabinet/delete?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SwitchCabinet is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
7. Query if SwitchCabinet is deleted via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
SwitchCabinet is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
8. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
9. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
10. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be no entry in delta table
11. Check if SwitchCabinet is still there and in planned position via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSwitchCabinetModel.java
Expected Result:
SwitchCabinet is there with planStatus=""PLANNED_DELETED""","1. SwitchCabinet is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. SwitchCabinet is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
3. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. SwitchCabinet is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsSwitchCabinet.java
5. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. SwitchCabinet is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
7. SwitchCabinet is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
8. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
9. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
10. There will be no entry in delta table
11. SwitchCabinet is there with planStatus=""PLANNED_DELETED""","1. Fill SwitchCabinet into Command table STCDEV_SwitchCabinet via BGE endpoint ""/api/rest/entity/SwitchCabinet/placeInZone?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
2. Query if SwitchCabinet is created via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Fill SwitchCabinet data from NmsSwitchCabinet.json into NMS cache CTFIFC_NMS_SwitchCabinet via BGE endpoint: ""/axis/api/rest/entity/custom/SwitchCabinet/bulkCreate?sessionId=""
and attached data as RecordNmsSwitchCabinet.java mapped from NmsSwitchCabinet.json
4. Query if SwitchCabinet is created via BGE endpoint ""/axis/api/rest/entity/custom/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
6. Delete SwitchCabinet from Command table STCDEV_SwitchCabinet via BGE endpoint ""/api/rest/entity/SwitchCabinet/delete?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
7. Query if SwitchCabinet is deleted via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
8. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
9. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
10. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
11. Check if SwitchCabinet is still there and in planned position via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSwitchCabinetModel.java","CIF (Command Integration Framework) (Automated testing)","SwitchCabinet is planned to be deleted but there is the SwitchCabinet coming from NMS cache so there will be no action"," End-to-end test","Automated"
"C19735974","Verify that SwitchCabinet is deleted when planned delete and no SwitchCabinet in NMS cache"," API","/axis/api/rest/entity/SwitchCabinet/query?sessionId","SwitchCabinet is deleted from Command","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - No such SwitchCabinet in NMS cache: NmsSwitchCabinet.json
    - SwitchCabinet in Command: CommandSwitchCabinet.json","Medium",""," Final","1. Fill SwitchCabinet into Command table STCDEV_SwitchCabinet via BGE endpoint ""/api/rest/entity/SwitchCabinet/placeInZone?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SwitchCabinet is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Query if SwitchCabinet is created via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
SwitchCabinet is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
3. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
4. Delete SwitchCabinet from Command table STCDEV_SwitchCabinet via BGE endpoint ""/api/rest/entity/SwitchCabinet/delete?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SwitchCabinet is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
5. Query if SwitchCabinet is deleted via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
SwitchCabinet is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
6. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
7. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
8. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be entry in delta table with delta_case = PLANNED_DELETE and action = Apply Planning (Delete)
9. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
10. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
SwitchCabinet will be stored in Command STCDEV_SwitchCabinet which should be checked via endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSwitchCabinetModel.java
11. Check if SwitchCabinet is deleted from Command via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
Expected Result:
The SwitchCabinet won't be in the returnData","1. SwitchCabinet is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. SwitchCabinet is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
3. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
4. SwitchCabinet is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
5. SwitchCabinet is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
6. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
7. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
8. There will be entry in delta table with delta_case = PLANNED_DELETE and action = Apply Planning (Delete)
9. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
10. SwitchCabinet will be stored in Command STCDEV_SwitchCabinet which should be checked via endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSwitchCabinetModel.java
11. The SwitchCabinet won't be in the returnData","1. Fill SwitchCabinet into Command table STCDEV_SwitchCabinet via BGE endpoint ""/api/rest/entity/SwitchCabinet/placeInZone?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
2. Query if SwitchCabinet is created via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
4. Delete SwitchCabinet from Command table STCDEV_SwitchCabinet via BGE endpoint ""/api/rest/entity/SwitchCabinet/delete?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
5. Query if SwitchCabinet is deleted via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
6. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
7. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
8. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
9. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
10. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
11. Check if SwitchCabinet is deleted from Command via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java","CIF (Command Integration Framework) (Automated testing)","SwitchCabinet is planned to be deleted and there is no SwitchCabinet in NMS chache so it will be deleted"," End-to-end test","Automated"
"C19735975","Verify that SwitchCabinet will be deleted and new SwitchCabinet will be created when another SwitchCabinet is in NMS cache"," API","/axis/api/rest/entity/SwitchCabinet/query?sessionId","SwitchCabinet is deleted and other one created","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - SwitchCabinet in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA"" (type of device master): NmsSwitchCabinet.json
    -SwitchCabinet in Command not with same createLinkDeviceMaster=""EKJAG5VN1YBKEH"" and not createLinkZone=""zoneElid"" and not id = nmdId of NmsSwitchCabinet and not cSourceId = nmsInternalId: CommandSwitchCabinet.json","Medium",""," Rework","1. Fill SwitchCabinet into Command table STCDEV_SwitchCabinet via BGE endpoint ""/api/rest/entity/SwitchCabinet/placeInZone?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SwitchCabinet is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Query if SwitchCabinet is created via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
SwitchCabinet is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
3. Fill SwitchCabinet data from NmsSwitchCabinet.json into NMS cache CTFIFC_NMS_SwitchCabinet via BGE endpoint: ""/axis/api/rest/entity/custom/SwitchCabinet/bulkCreate?sessionId=""
and attached data as RecordNmsSwitchCabinet.java mapped from NmsSwitchCabinet.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. Query if SwitchCabinet is created via BGE endpoint ""/axis/api/rest/entity/custom/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
Expected Result:
SwitchCabinet is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsSwitchCabinet.java
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. Delete SwitchCabinet from Command table STCDEV_SwitchCabinet via BGE endpoint ""/api/rest/entity/SwitchCabinet/delete?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SwitchCabinet is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
7. Query if SwitchCabinetis deleted via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
SwitchCabinet is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
8. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
9. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
10. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will two entries in delta Table:
- action=""Apply Planning (Delete)"" and delta=""PLANNED_DELETE_WITH_CREATE""
- action=""Create new with Type b"" and delta=""PLANNED_DELETE_WITH_CREATE""
11. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
12. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST
CALCULATE_DELTA= N
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
SwitchCabinet will be stored in Command STCDEV_SwitchCabinet which should be checked via endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSwitchCabinetModel.java
13. Check if first SwitchCabinet is deleted and second one created via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSwitchCabinetModel.java
Expected Result:
SwitchCabinetis created and other one deleted","1. SwitchCabinet is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. SwitchCabinet is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
3. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. SwitchCabinet is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsSwitchCabinet.java
5. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. SwitchCabinet is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
7. SwitchCabinet is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
8. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
9. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
10. There will two entries in delta Table:
- action=""Apply Planning (Delete)"" and delta=""PLANNED_DELETE_WITH_CREATE""
- action=""Create new with Type b"" and delta=""PLANNED_DELETE_WITH_CREATE""
11. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
12. SwitchCabinet will be stored in Command STCDEV_SwitchCabinet which should be checked via endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSwitchCabinetModel.java
13. SwitchCabinetis created and other one deleted","1. Fill SwitchCabinet into Command table STCDEV_SwitchCabinet via BGE endpoint ""/api/rest/entity/SwitchCabinet/placeInZone?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
2. Query if SwitchCabinet is created via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Fill SwitchCabinet data from NmsSwitchCabinet.json into NMS cache CTFIFC_NMS_SwitchCabinet via BGE endpoint: ""/axis/api/rest/entity/custom/SwitchCabinet/bulkCreate?sessionId=""
and attached data as RecordNmsSwitchCabinet.java mapped from NmsSwitchCabinet.json
4. Query if SwitchCabinet is created via BGE endpoint ""/axis/api/rest/entity/custom/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
6. Delete SwitchCabinet from Command table STCDEV_SwitchCabinet via BGE endpoint ""/api/rest/entity/SwitchCabinet/delete?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
7. Query if SwitchCabinetis deleted via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
8. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
9. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
10. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
11. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
12. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST
CALCULATE_DELTA= N
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
13. Check if first SwitchCabinet is deleted and second one created via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSwitchCabinetModel.java","CIF (Command Integration Framework) (Automated testing)","SwitchCabinet is planned to be deleted and there is another SwitchCabinet coming from NMS cache so the first SwitchCabinet will be deleted and the second will be created"," End-to-end test","Automated"
"C19735976","Verify that there is no operation for SwitchCabinet when planned delete but SwitchCabinet is still in NMS cache and planned create without SwitchCabinet in NMS cache"," API","/axis/api/rest/entity/SwitchCabinet/query?sessionId","SwitchCabinet is are in planning position, one with planStatus=""PLANNED_DELETED"", one with planStatus=""PLANNED_CREATED""","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - SwitchCabinet in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA""(type of device master) and id A: NmsSwitchCabinet.json
    - SwitchCabinet in Command 
        - One with same createLinkDeviceMaster=""EKJAG5VN1YBKEH"" and createLinkZone=""zoneElid"" and id = nmdId of NmsSwitchCabinet and cSourceId = nmsInternalId like SwitchCabinets with id A: CommandSwitchCabinet.json
        - One not with same values as id A: CommandSwitchCabinet.json","Medium",""," Rework","1. Fill SwitchCabinet A into Command table STCDEV_SwitchCabinet via BGE endpoint ""/api/rest/entity/SwitchCabinet/placeInZone?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SwitchCabinet A is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Query if SwitchCabinet is created via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
SwitchCabinet A is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
3. Fill SwitchCabinet A data from NmsSwitchCabinet.json into NMS cache CTFIFC_NMS_SwitchCabinet via BGE endpoint: ""/axis/api/rest/entity/custom/SwitchCabinet/bulkCreate?sessionId=""
and attached data as RecordNmsSwitchCabinet.java mapped from NmsSwitchCabinet.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. Query if SwitchCabinet is created via BGE endpoint ""/axis/api/rest/entity/custom/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
Expected Result:
SwitchCabinet A is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsSwitchCabinet.java
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. Delete SwitchCabinet A from Command table STCDEV_CSwitchCabinet via BGE endpoint ""/api/rest/entity/SwitchCabinet/delete?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SwitchCabinet is deleted, answer can be mapped to BgeCreateObjectResponse.java
7. Query if SwitchCabinetis deleted via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
SwitchCabinet is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
8. Create SwitchCabinet B in Command table STCDEV_SwitchCabinet via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/placeInZone?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SwitchCabinet is created, answer can be mapped to BgeCreateObjectResponse.java
9. Query if SwitchCabinet is created via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
Expected Result:
SwitchCabinet is there with planStatus=""PLANNED_CREATED""
10. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
11. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
12. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be no entry in delta table
13. Check if SwitchCabinet are still there and in planned position via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSwitchCabinetModel.java
Expected Result:
SwitchCabinet are there","1. SwitchCabinet A is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. SwitchCabinet A is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
3. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. SwitchCabinet A is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsSwitchCabinet.java
5. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. SwitchCabinet is deleted, answer can be mapped to BgeCreateObjectResponse.java
7. SwitchCabinet is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
8. SwitchCabinet is created, answer can be mapped to BgeCreateObjectResponse.java
9. SwitchCabinet is there with planStatus=""PLANNED_CREATED""
10. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
11. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
12. There will be no entry in delta table
13. SwitchCabinet are there","1. Fill SwitchCabinet A into Command table STCDEV_SwitchCabinet via BGE endpoint ""/api/rest/entity/SwitchCabinet/placeInZone?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
2. Query if SwitchCabinet is created via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Fill SwitchCabinet A data from NmsSwitchCabinet.json into NMS cache CTFIFC_NMS_SwitchCabinet via BGE endpoint: ""/axis/api/rest/entity/custom/SwitchCabinet/bulkCreate?sessionId=""
and attached data as RecordNmsSwitchCabinet.java mapped from NmsSwitchCabinet.json
4. Query if SwitchCabinet is created via BGE endpoint ""/axis/api/rest/entity/custom/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
6. Delete SwitchCabinet A from Command table STCDEV_CSwitchCabinet via BGE endpoint ""/api/rest/entity/SwitchCabinet/delete?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
7. Query if SwitchCabinetis deleted via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
8. Create SwitchCabinet B in Command table STCDEV_SwitchCabinet via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/placeInZone?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
9. Query if SwitchCabinet is created via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
10. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
11. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
12. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
13. Check if SwitchCabinet are still there and in planned position via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSwitchCabinetModel.java","CIF (Command Integration Framework) (Automated testing)","SwitchCabinet is planned to be deleted but there is the SwitchCabinet coming from NMS cache so there will be no action and another SwitchCabinet is planned to be created but there will also be no action because it is not in NMS cache."," End-to-end test","Automated"
"C19735977","Verify that SwitchCabinet is deleted when planned delete and SwitchCabinet not in NMS cache and other SwitchCabinet is created when planned create and SwitchCabinet in NMS cache"," API","/axis/api/rest/entity/SwitchCabinetquery?sessionId","SwitchCabinet A is created, SwitchCabinet B is deleted","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - SwitchCabinet in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA""(type of device master) and id A: NmsSwitchCabinet.json
    - SwitchCabinet in Command 
        - One with same createLinkDeviceMaster=""EKJAG5VN1YBKEH"" and createLinkZone=""zoneElid"" and id = nmdId of NmsSwitchCabinetand cSourceId = nmsInternalId like SwitchCabinet with id A: CommandSwitchCabinet.json
        - One not with same values as id A: CommandSwitchCabinet.json","Medium",""," Rework","1. Fill SwitchCabinet B into Command table STCDEV_SwitchCabinet via BGE endpoint ""/api/rest/entity/SwitchCabinet/placeInZone?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SwitchCabinet B is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Query if SwitchCabinet B is created via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
SwitchCabinet B is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
3. Fill SwitchCabinet A data from NmsSwitchCabinet.json into NMS cache CTFIFC_NMS_SwitchCabinet via BGE endpoint: ""/axis/api/rest/entity/custom/SwitchCabinet/bulkCreate?sessionId=""
and attached data as RecordNmsSwitchCabinet.java mapped from NmsSwitchCabinet.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. Query if SwitchCabinet is created via BGE endpoint ""/axis/api/rest/entity/custom/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
Expected Result:
SwitchCabinet A is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsSwitchCabinet.java
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. Delete SwitchCabinet B from Command table STCDEV_SwitchCabinet via BGE endpoint ""/api/rest/entity/SwitchCabinet/delete?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SwitchCabinet is deleted, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
7. Query if SwitchCabinet B is deleted via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
SwitchCabinet is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
8. Create SwitchCabinet A in Command table STCDEV_SwitchCabinet via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/placeInZone?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SwitchCabinet A is created, answer can be mapped to BgeCreateObjectResponse.java
9. Query if SwitchCabinet A is created via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
Expected Result:
SwitchCabinet A is there with planStatus=""PLANNED_CREATED""
10. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
11. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
12. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be two entries in delta table:
- action=""Apply Planning (Delete)"" and delta_case=""PLANNED_DELETE_ WITH_PLANNED_CREATE""
- action=""Apply Planning (Create)"" and delta_case=""PLANNED_DELETE_ WITH_PLANNED_CREATE"" 
13. Set delta table entries approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entries will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
14. 	
Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST
CALCULATE_DELTA= N
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
15. Check if SwitchCabinet A is in Command and if SwitchCabinet B is not in Command anymore via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSwitchCabinetModel.java
Expected Result:
SwitchCabinet A is there, SwitchCabinet B is gone","1. SwitchCabinet B is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. SwitchCabinet B is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
3. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. SwitchCabinet A is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsSwitchCabinet.java
5. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. SwitchCabinet is deleted, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
7. SwitchCabinet is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
8. SwitchCabinet A is created, answer can be mapped to BgeCreateObjectResponse.java
9. SwitchCabinet A is there with planStatus=""PLANNED_CREATED""
10. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
11. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
12. There will be two entries in delta table:
- action=""Apply Planning (Delete)"" and delta_case=""PLANNED_DELETE_ WITH_PLANNED_CREATE""
- action=""Apply Planning (Create)"" and delta_case=""PLANNED_DELETE_ WITH_PLANNED_CREATE"" 
13. The entries will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
14. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
15. SwitchCabinet A is there, SwitchCabinet B is gone","1. Fill SwitchCabinet B into Command table STCDEV_SwitchCabinet via BGE endpoint ""/api/rest/entity/SwitchCabinet/placeInZone?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
2. Query if SwitchCabinet B is created via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Fill SwitchCabinet A data from NmsSwitchCabinet.json into NMS cache CTFIFC_NMS_SwitchCabinet via BGE endpoint: ""/axis/api/rest/entity/custom/SwitchCabinet/bulkCreate?sessionId=""
and attached data as RecordNmsSwitchCabinet.java mapped from NmsSwitchCabinet.json
4. Query if SwitchCabinet is created via BGE endpoint ""/axis/api/rest/entity/custom/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
6. Delete SwitchCabinet B from Command table STCDEV_SwitchCabinet via BGE endpoint ""/api/rest/entity/SwitchCabinet/delete?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
7. Query if SwitchCabinet B is deleted via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
8. Create SwitchCabinet A in Command table STCDEV_SwitchCabinet via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/placeInZone?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
9. Query if SwitchCabinet A is created via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
10. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
11. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
12. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
13. Set delta table entries approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
14. 	
Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST
CALCULATE_DELTA= N
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
15. Check if SwitchCabinet A is in Command and if SwitchCabinet B is not in Command anymore via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSwitchCabinetModel.java","CIF (Command Integration Framework) (Automated testing)","SwitchCabinet is planned to be deleted and there is no SwitchCabinet in NMS cache so it will be deleted and another SwitchCabinet is planned to be created and the corresponding SwitchCabinet in in NMS cache so it can be created."," End-to-end test","Automated"
"C19735978","Verify that SwitchCabinet is deleted when planned delete and SwitchCabinet not in NMS cache and other SwitchCabinet is created with updated type when planned create and SwitchCabinet with same id in NMS cache"," API","/axis/api/rest/entity/SwitchCabinet/query?sessionId","SwitchCabinet A is created with another type, SwitchCabinet B is deleted","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - SwitchCabinet in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA""(type of device master) and id A: NmsSwitchCabinet.json
    - SwitchCabinet in Command 
        - One not with same createLinkDeviceMaster but with same createLinkZone=""zoneElid"" and id = nmdId of NmsSwitchCabinet and cSourceId = nmsInternalId like SwitchCabinet with id A: CommandSwitchCabinet.json
        - One not with same values as id A: CommandSwitchCabinet.json","Medium",""," Rework","1. Fill SwitchCabinet B into Command table STCDEV_SwitchCabinet via BGE endpoint ""/api/rest/entity/SwitchCabinet/placeInZone?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SwitchCabinet B is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Query if SwitchCabinet B is created via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
SwitchCabinet B is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
3. Fill SwitchCabinet A data from NmsSwitchCabinet.json into NMS cache CTFIFC_NMS_SwitchCabinet via BGE endpoint: ""/axis/api/rest/entity/custom/SwitchCabinet/bulkCreate?sessionId=""
and attached data as RecordNmsSwitchCabinet.java mapped from NmsSwitchCabinet.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. Query if SwitchCabinet is created via BGE endpoint ""/axis/api/rest/entity/custom/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
Expected Result:
SwitchCabinet A is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsSwitchCabinet.java
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. Delete SwitchCabinet B from Command table STCDEV_SwitchCabinet via BGE endpoint ""/api/rest/entity/SwitchCabinet/delete?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SwitchCabinet is deleted, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
7. Query if SwitchCabinet B is deleted via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
SwitchCabinet is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
8. Create SwitchCabinet A in Command table STCDEV_SwitchCabinet via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/placeInZone?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SwitchCabinet A is created, answer can be mapped to BgeCreateObjectResponse.java
9. Query if SwitchCabinet A is created via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
Expected Result:
SwitchCabinet A is there with planStatus=""PLANNED_CREATED""
10. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
11. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
12. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be two entries in delta table:
- action=""Apply Planning (Delete)"" and delta_case=""PLANNED_DELETE_WITH_PLANNED_CREATE_BUT_WITH_DIFFERENT_TYPE""
- action=""Update Type + Apply Planning (Create)"" and delta_case=""PLANNED_DELETE_WITH_PLANNED_CREATE_BUT_WITH_DIFFERENT_TYPE"" 
13. Set delta table entries approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entries will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
14. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST
CALCULATE_DELTA= N
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
15. Check if SwitchCabinet A is in Command but with different type and if SwitchCabinet B is not in Command anymore via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSwitchCabinetModel.java
Expected Result:
SwitchCabinet A is there with another type, SwitchCabinet B is gone","1. SwitchCabinet B is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. SwitchCabinet B is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
3. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. SwitchCabinet A is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsSwitchCabinet.java
5. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. SwitchCabinet is deleted, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
7. SwitchCabinet is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
8. SwitchCabinet A is created, answer can be mapped to BgeCreateObjectResponse.java
9. SwitchCabinet A is there with planStatus=""PLANNED_CREATED""
10. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
11. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
12. There will be two entries in delta table:
- action=""Apply Planning (Delete)"" and delta_case=""PLANNED_DELETE_WITH_PLANNED_CREATE_BUT_WITH_DIFFERENT_TYPE""
- action=""Update Type + Apply Planning (Create)"" and delta_case=""PLANNED_DELETE_WITH_PLANNED_CREATE_BUT_WITH_DIFFERENT_TYPE"" 
13. The entries will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
14. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
15. SwitchCabinet A is there with another type, SwitchCabinet B is gone","1. Fill SwitchCabinet B into Command table STCDEV_SwitchCabinet via BGE endpoint ""/api/rest/entity/SwitchCabinet/placeInZone?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
2. Query if SwitchCabinet B is created via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Fill SwitchCabinet A data from NmsSwitchCabinet.json into NMS cache CTFIFC_NMS_SwitchCabinet via BGE endpoint: ""/axis/api/rest/entity/custom/SwitchCabinet/bulkCreate?sessionId=""
and attached data as RecordNmsSwitchCabinet.java mapped from NmsSwitchCabinet.json
4. Query if SwitchCabinet is created via BGE endpoint ""/axis/api/rest/entity/custom/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
6. Delete SwitchCabinet B from Command table STCDEV_SwitchCabinet via BGE endpoint ""/api/rest/entity/SwitchCabinet/delete?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
7. Query if SwitchCabinet B is deleted via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
8. Create SwitchCabinet A in Command table STCDEV_SwitchCabinet via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/placeInZone?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
9. Query if SwitchCabinet A is created via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
10. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
11. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
12. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
13. Set delta table entries approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
14. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST
CALCULATE_DELTA= N
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
15. Check if SwitchCabinet A is in Command but with different type and if SwitchCabinet B is not in Command anymore via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSwitchCabinetModel.java","CIF (Command Integration Framework) (Automated testing)","SwitchCabinet is planned to be deleted and there is no SwitchCabinet in NMS cache so it will be deleted and another SwitchCabinet is planned to be created and the corresponding SwitchCabinet with same id but different type is in NMS cache so it can be created."," End-to-end test","Automated"
"C19735979","Verify that SwitchCabinet is deleted when planned delete and SwitchCabinet not in NMS cache and no operation when SwitchCabinet is planned create but no SwitchCabinet NMS cache"," API","/axis/api/rest/entity/SwitchCabinet/query?sessionId","SwitchCabinet A is deleted, SwitchCabinet B is not created with planStatus=""PLANNED_CREATED""","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - No such SwitchCabinetin NMS cache: NmsSwitchCabinet.json
    - Two SwitchCabinet in Command: CommandSwitchCabinet.json","Medium",""," Rework","1. Fill SwitchCabinet A into Command table STCDEV_SwitchCabinet via BGE endpoint ""/api/rest/entity/SwitchCabinet/placeInZone?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SwitchCabinet A is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Query if SwitchCabinet A is created via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
SwitchCabinet A is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
3. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
4. Delete SwitchCabinet A from Command table STCDEV_SwitchCabinet via BGE endpoint ""/api/rest/entity/SwitchCabinet/delete?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SwitchCabinet A is deleted, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
5. Query if SwitchCabinet A is deleted via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
SwitchCabinet A is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
6. Create SwitchCabinet B in Command table STCDEV_SwitchCabinet via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/placeInZone?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SwitchCabinet B is created, answer can be mapped to BgeCreateObjectResponse.java
7. Query if SwitchCabinet B is created via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
Expected Result:
SwitchCabinet B is there with planStatus=""PLANNED_CREATED""
8. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
9. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
10. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be this entries in delta table: 
action=""Apply Planning (Delete)"" and delta_case=""PLANNED_DELETE""
11. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
12. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST
CALCULATE_DELTA= N
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
13. Check if SwitchCabinet A is deleted from Command and if SwitchCabinet B is in Command in planned create state via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSwitchCabinetModel.java
Expected Result:
SwitchCabinet A is gone, SwitchCabinet B is in planned create state","1. SwitchCabinet A is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. SwitchCabinet A is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
3. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
4. SwitchCabinet A is deleted, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
5. SwitchCabinet A is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandSwitchCabinetModel.java
6. SwitchCabinet B is created, answer can be mapped to BgeCreateObjectResponse.java
7. SwitchCabinet B is there with planStatus=""PLANNED_CREATED""
8. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
9. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
10. There will be this entries in delta table: 
action=""Apply Planning (Delete)"" and delta_case=""PLANNED_DELETE""
11. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
12. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
13. SwitchCabinet A is gone, SwitchCabinet B is in planned create state","1. Fill SwitchCabinet A into Command table STCDEV_SwitchCabinet via BGE endpoint ""/api/rest/entity/SwitchCabinet/placeInZone?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
2. Query if SwitchCabinet A is created via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
4. Delete SwitchCabinet A from Command table STCDEV_SwitchCabinet via BGE endpoint ""/api/rest/entity/SwitchCabinet/delete?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
5. Query if SwitchCabinet A is deleted via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
6. Create SwitchCabinet B in Command table STCDEV_SwitchCabinet via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/placeInZone?sessionId="" and data from CommandSwitchCabinet.json mapped to CommandSwitchCabinetModel.java like:
![](index.php?/attachments/get/12360)
7. Query if SwitchCabinet B is created via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
8. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
9. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
10. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
11. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
12. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST
CALCULATE_DELTA= N
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
13. Check if SwitchCabinet A is deleted from Command and if SwitchCabinet B is in Command in planned create state via BGE endpoint ""/axis/api/rest/entity/SwitchCabinet/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSwitchCabinetModel.java","CIF (Command Integration Framework) (Automated testing)","SwitchCabinet is planned to be deleted and there is no SwitchCabinet in NMS cache so it will be deleted and another SwitchCabinet is planned to be created but there is no SwitchCabinet in NMS cache so there will be no action."," End-to-end test","Automated"
"C19640285","Verify that Chassis in NMS cache will be created in Command"," API","/axis/api/rest/entity/chassis/query?sessionId","Chassis is found in Command","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists

- Test data:
    - Chassis in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA"" (type of device master): NmsChassis.json
    - no such Chassis in Command: CommandChassis.json","Medium",""," Final","1. Fill Chassis data from NmsChassis.json into NMS cache CTFIFC_NMS_CHASSIS via BGE endpoint: ""/axis/api/rest/entity/custom/chassis/bulkCreate?sessionId="" and attached data as RecordNmsChassis.java mapped from NmsChassis.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

2. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
Chassis is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
3. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
4. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be an entry in delta table with action = CREATE
5. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
6. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Chassis will be stored in Command STCDEV_CHASSIS which should be checked via endpoint "" ""/axis/api/rest/entity/chassis/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandChassisModel.java","1. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

2. Chassis is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
3. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
4. There will be an entry in delta table with action = CREATE
5. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
6. Chassis will be stored in Command STCDEV_CHASSIS which should be checked via endpoint "" ""/axis/api/rest/entity/chassis/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandChassisModel.java","1. Fill Chassis data from NmsChassis.json into NMS cache CTFIFC_NMS_CHASSIS via BGE endpoint: ""/axis/api/rest/entity/custom/chassis/bulkCreate?sessionId="" and attached data as RecordNmsChassis.java mapped from NmsChassis.json
2. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
4. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
5. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
6. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y","CIF (Command Integration Framework) (Automated testing)","Chassis should be created in Command when it is in NMS chache"," End-to-end test","Automated"
"C19640286","Verify that Chassis from NMS cache will be updated in Command"," API","/axis/api/rest/entity/chassis/query?sessionId","Chassis is found with updated ip-adress""10.122.77.05"" in Command","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists

- Test data:
    - Chassis in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA"" (type of device master): NmsChassis.json
    - Chassis in Command with same createLinkDeviceMaster=""EKJAG5VN1YBKEH"" and createLinkZone=""zoneElid"" and id = nmdId of NmsChassis and cSourceId = nmsInternalId but ip-adress=""10.122.77.05"" instead of ""10.122.77.02"": CommandChassis.json","Medium",""," Final","1. Fill Chassis into Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/placeInZone?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Chassis is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

Expected Result:
Chassis is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
3. Fill Chassis data from NmsChassis.json into NMS cache CTFIFC_NMS_CHASSIS via BGE endpoint: ""/axis/api/rest/entity/custom/chassis/bulkCreate?sessionId=""
and attached data as RecordNmsChassis.java mapped from NmsChassis.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

4. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/custom/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)

Expected Result:
Chassis is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsChassis.java
5. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
6. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be an entry in delta table with action = UPDATE
7. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
8. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Chassis will be stored in Command STCDEV_CHASSIS which should be checked via endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandChassisModel.java","1. Chassis is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. Chassis is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
3. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

4. Chassis is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsChassis.java
5. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
6. There will be an entry in delta table with action = UPDATE
7. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
8. Chassis will be stored in Command STCDEV_CHASSIS which should be checked via endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandChassisModel.java","1. Fill Chassis into Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/placeInZone?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
2. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

3. Fill Chassis data from NmsChassis.json into NMS cache CTFIFC_NMS_CHASSIS via BGE endpoint: ""/axis/api/rest/entity/custom/chassis/bulkCreate?sessionId=""
and attached data as RecordNmsChassis.java mapped from NmsChassis.json
4. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/custom/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)

5. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
6. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
7. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
8. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y","CIF (Command Integration Framework) (Automated testing)","Chassis should be updated in Command when it is in NMS chache"," End-to-end test","Automated"
"C19640288","Verify that Chassis Type from NMS cache will be updated in Command"," API","/axis/api/rest/entity/chassis/query?sessionId","Chassis is found with updated type=""???"" in Command","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists

????
- Test data:
    - Chassis in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA"" (type of device master): NmsChassis.json
    - Chassis in Command with same createLinkDeviceMaster=""EKJAG5VN1YBKEH"" and createLinkZone=""zoneElid"" and id = nmdId of NmsChassis and cSourceId = nmsInternalId but ip-adress=""10.122.77.05"" instead of ""10.122.77.02"": CommandChassis.json","Medium",""," Rework","1. Fill Chassis into Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/placeInZone?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)

Expected Result:
Chassis is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

Expected Result:
Chassis is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
3. Fill Chassis data from NmsChassis.json into NMS cache CTFIFC_NMS_CHASSIS via BGE endpoint: ""/axis/api/rest/entity/custom/chassis/bulkCreate?sessionId=""
and attached data as RecordNmsChassis.java mapped from NmsChassis.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

4. Query if campus is created via BGE endpoint ""/axis/api/rest/entity/custom/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)

Expected Result:
Chassis is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsChassis.java
5. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
6. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be an entry in delta table with action = UPDATE
7. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
8. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Chassis will be stored in Command STCDEV_CHASSIS which should be checked via endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandChassisModel.java","1. Chassis is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. Chassis is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
3. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

4. Chassis is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsChassis.java
5. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
6. There will be an entry in delta table with action = UPDATE
7. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
8. Chassis will be stored in Command STCDEV_CHASSIS which should be checked via endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandChassisModel.java","1. Fill Chassis into Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/placeInZone?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)

2. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

3. Fill Chassis data from NmsChassis.json into NMS cache CTFIFC_NMS_CHASSIS via BGE endpoint: ""/axis/api/rest/entity/custom/chassis/bulkCreate?sessionId=""
and attached data as RecordNmsChassis.java mapped from NmsChassis.json
4. Query if campus is created via BGE endpoint ""/axis/api/rest/entity/custom/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)

5. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
6. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
7. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
8. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y","CIF (Command Integration Framework) (Automated testing)","Chassis Type should be updated in Command when it is in NMS chache"," End-to-end test","Automated"
"C19640287","Verify that Chassis will be deleted from Command"," API","/axis/api/rest/entity/chassis/query?sessionId","Chassis is deleted from Command","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists

- Test data:
    - No such Chassis in NMS cache: NmsChassis.json
    - Chassis in Command: CommandChassis.json","Medium",""," Final","1. Fill Chassis into Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/placeInZone?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)

Expected Result:
Chassis is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

Expected Result:
Chassis is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
3. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
4. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be an entry in delta table with action = DELETE
5. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
6. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Chassis will be deleted from Command STCDEV_CHASSIS which should be checked via endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandChassisModel.java","1. Chassis is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. Chassis is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
3. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
4. There will be an entry in delta table with action = DELETE
5. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
6. Chassis will be deleted from Command STCDEV_CHASSIS which should be checked via endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandChassisModel.java","1. Fill Chassis into Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/placeInZone?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)

2. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

3. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
4. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
5. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
6. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y","CIF (Command Integration Framework) (Automated testing)","Chassis should be delted from Command because it's not in NMS cache"," End-to-end test","Automated"
"C19155601","Verify that there is no operation for Chassis when planned but no data in NMS cache"," API","/axis/api/rest/entity/chassis/query?sessionId","Chassis is still in planning position, nothing changed","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - No such Chassis in NMS cache: NmsChassis.json
    - Chassis in Command: CommandChassis.json","Medium",""," Final","1. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
2. Fill Chassis into Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/placeInZone?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Chassis is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
3. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
Chassis is there with planStatus=""PLANNED_CREATED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
4. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
5. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
6. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be no entry in delta table
7. Check if Chassis is still there and in planned position via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandChassisModel.java
Expected Result:
Chassis is there","1. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
2. Chassis is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
3. Chassis is there with planStatus=""PLANNED_CREATED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
4. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
5. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
6. There will be no entry in delta table
7. Chassis is there","1. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
2. Fill Chassis into Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/placeInZone?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
3. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
4. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
5. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
6. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
7. Check if Chassis is still there and in planned position via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandChassisModel.java","CIF (Command Integration Framework) (Automated testing)","Chassis is planned to be created but there is no data coming from NMS cache so there will be no action"," End-to-end test","Automated"
"C19640289","Verify that Chassis will be created when planned and chassis with same type and id in NMS cache"," API","/axis/api/rest/entity/chassis/query?sessionId","Chassis is not in planning position anymore, is created in planned position","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - Chassis in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA"" (type of device master): NmsChassis.json
    - Chassis in Command with same createLinkDeviceMaster=""EKJAG5VN1YBKEH"" and createLinkZone=""zoneElid"" and id = nmdId of NmsChassis and cSourceId = nmsInternalId: CommandChassis.json","Medium",""," Final","1. Fill Chassis data from NmsChassis.json into NMS cache CTFIFC_NMS_CHASSIS via BGE endpoint: ""/axis/api/rest/entity/custom/chassis/bulkCreate?sessionId=""
and attached data as RecordNmsChassis.java mapped from NmsChassis.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
2. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/custom/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)

Expected Result:
Chassis is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsChassis.java
3. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
4. Fill Chassis into Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/placeInZone?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Chassis is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
5. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
Chassis is there with planStatus=""PLANNED_CREATED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
6. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
7. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
8. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be entry in delta table with delta_case = PLANNED_CREATE and action = Apply Planning (Create)
9. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java

10. Check if Chassis is created where position was planned via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandChassisModel.java
Expected Result:
Chassis is there and out of planning state","1. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
2. Chassis is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsChassis.java
3. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
4. Chassis is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
5. Chassis is there with planStatus=""PLANNED_CREATED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
6. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
7. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
8. There will be entry in delta table with delta_case = PLANNED_CREATE and action = Apply Planning (Create)
9. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java

10. Chassis is there and out of planning state","1. Fill Chassis data from NmsChassis.json into NMS cache CTFIFC_NMS_CHASSIS via BGE endpoint: ""/axis/api/rest/entity/custom/chassis/bulkCreate?sessionId=""
and attached data as RecordNmsChassis.java mapped from NmsChassis.json
2. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/custom/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)

3. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
4. Fill Chassis into Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/placeInZone?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
5. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
6. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
7. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
8. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
9. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
10. Check if Chassis is created where position was planned via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandChassisModel.java","CIF (Command Integration Framework) (Automated testing)","Chassis is planned to be created and chassis with same id and type is in NMs cache so it will be created where planned"," End-to-end test","Automated"
"C19640290","Verify that Chassis will be created with updated type when planned and chassis with same id but different type in NMS cache"," API","/axis/api/rest/entity/chassis/query?sessionId","Chassis is not in planning position anymore, is created in planned position with updated type","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - Other Type here : Chassis in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA"" (type of device master): NmsChassis.json
    - Chassis in Command not with same createLinkDeviceMaster=""EKJAG5VN1YBKEH"" but with same createLinkZone=""zoneElid"" and id = nmdId of NmsChassis and cSourceId = nmsInternalId: CommandChassis.json","Medium",""," Rework","1. Fill Chassis into Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/placeInZone?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Chassis is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

Expected Result:
Chassis is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
3. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
4. Fill Chassis into Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/create?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Chassis is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
5. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
Chassis is there with planStatus=""PLANNED_CREATED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
6. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
7. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
8. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be entry in delta table with delta_case = PLANNED_CREATE_BUT_WITH_DIFFERENT_TYPE and action = Update Type + Apply Planning (Create)
9. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
10. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java

11. Check if Chassis is created where position was planned via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandChassisModel.java
Expected Result:
Chassis is there and out of planning state","1. Chassis is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Chassis is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
3. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
4. Chassis is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
5. Chassis is there with planStatus=""PLANNED_CREATED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
6. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
7. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
8. There will be entry in delta table with delta_case = PLANNED_CREATE_BUT_WITH_DIFFERENT_TYPE and action = Update Type + Apply Planning (Create)
9. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
10. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java

11. Chassis is there and out of planning state","1. Fill Chassis into Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/placeInZone?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
2. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

3. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
4. Fill Chassis into Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/create?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
5. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
6. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
7. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
8. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
9. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
10. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
11. Check if Chassis is created where position was planned via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandChassisModel.java","CIF (Command Integration Framework) (Automated testing)","Chassis is planned to be created and chassis with same id but different type is in NMs cache so it will be created but with different type"," End-to-end test","Automated"
"C19640291","Verify that there is no operation for Chassis when planned delete but chassis is still in NMS cache"," API","/axis/api/rest/entity/chassis/query?sessionId","Chassis is still in planning position with planStatus=""PLANNED_DELETED"", nothing changed","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - Chassis in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA"" (type of device master): NmsChassis.json
    - Chassis in Command with same createLinkDeviceMaster=""EKJAG5VN1YBKEH"" and createLinkZone=""zoneElid"" and id = nmdId of NmsChassis and cSourceId = nmsInternalId: CommandChassis.json","Medium",""," Final","1. Fill Chassis into Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/placeInZone?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Chassis is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
Chassis is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
3. Fill Chassis data from NmsChassis.json into NMS cache CTFIFC_NMS_CHASSIS via BGE endpoint: ""/axis/api/rest/entity/custom/chassis/bulkCreate?sessionId=""
and attached data as RecordNmsChassis.java mapped from NmsChassis.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/custom/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
Expected Result:
Chassis is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsChassis.java
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. Delete Chassis from Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/delete?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Chassis is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
7. Query if Chassis is deleted via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
Chassis is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
8. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
9. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
10. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be no entry in delta table
11. Check if Chassis is still there and in planned position via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandChassisModel.java
Expected Result:
Chassis is there with planStatus=""PLANNED_DELETED""","1. Chassis is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Chassis is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
3. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. Chassis is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsChassis.java
5. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. Chassis is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
7. Chassis is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
8. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
9. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
10. There will be no entry in delta table
11. Chassis is there with planStatus=""PLANNED_DELETED""","1. Fill Chassis into Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/placeInZone?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
2. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Fill Chassis data from NmsChassis.json into NMS cache CTFIFC_NMS_CHASSIS via BGE endpoint: ""/axis/api/rest/entity/custom/chassis/bulkCreate?sessionId=""
and attached data as RecordNmsChassis.java mapped from NmsChassis.json
4. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/custom/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
6. Delete Chassis from Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/delete?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
7. Query if Chassis is deleted via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
8. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
9. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
10. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
11. Check if Chassis is still there and in planned position via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandChassisModel.java","CIF (Command Integration Framework) (Automated testing)","Chassis is planned to be deleted but there is the chassis coming from NMS cache so there will be no action"," End-to-end test","Automated"
"C19640292","Verify that Chassis is deleted when planned delete and no Chassis in NMS cache"," API","/axis/api/rest/entity/chassis/query?sessionId","Chassis is deleted from Command","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - No such Chassis in NMS cache: NmsChassis.json
    - Chassis in Command: CommandChassis.json","Medium",""," Final","1. Fill Chassis into Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/placeInZone?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Chassis is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
Chassis is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
3. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
4. Delete Chassis from Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/delete?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Chassis is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
5. Query if Chassis is deleted via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
Chassis is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
6. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
7. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
8. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be entry in delta table with delta_case = PLANNED_DELETE and action = Apply Planning (Delete)
9. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
10. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Chassis will be stored in Command STCDEV_CHASSIS which should be checked via endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandChassisModel.java
11. Check if Chassis is deleted from Command via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
Expected Result:
The chassis won't be in the returnData","1. Chassis is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Chassis is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
3. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
4. Chassis is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
5. Chassis is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
6. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
7. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
8. There will be entry in delta table with delta_case = PLANNED_DELETE and action = Apply Planning (Delete)
9. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
10. Chassis will be stored in Command STCDEV_CHASSIS which should be checked via endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandChassisModel.java
11. The chassis won't be in the returnData","1. Fill Chassis into Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/placeInZone?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
2. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
4. Delete Chassis from Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/delete?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
5. Query if Chassis is deleted via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
6. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
7. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
8. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
9. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
10. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
11. Check if Chassis is deleted from Command via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java","CIF (Command Integration Framework) (Automated testing)","Chassis is planned to be deleted and there is no Chassis in NMS chache so it will be deleted"," End-to-end test","Automated"
"C19640293","Verify that Chassis will be deleted and new Chassis will be created when another chassis is in NMS cache"," API","/axis/api/rest/entity/chassis/query?sessionId","Chassis is deleted and other one created","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - Chassis in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA"" (type of device master): NmsChassis.json
    - Chassis in Command not with same createLinkDeviceMaster=""EKJAG5VN1YBKEH"" and not createLinkZone=""zoneElid"" and not id = nmdId of NmsChassis and not cSourceId = nmsInternalId: CommandChassis.json","Medium",""," Rework","1. Fill Chassis into Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/placeInZone?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Chassis is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
Chassis is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
3. Fill Chassis data from NmsChassis.json into NMS cache CTFIFC_NMS_CHASSIS via BGE endpoint: ""/axis/api/rest/entity/custom/chassis/bulkCreate?sessionId=""
and attached data as RecordNmsChassis.java mapped from NmsChassis.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/custom/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
Expected Result:
Chassis is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsChassis.java
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. Delete Chassis from Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/delete?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Chassis is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
7. Query if Chassis is deleted via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
Chassis is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
8. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
9. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
10. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will two entries in delta Table:
- action=""Apply Planning (Delete)"" and delta=""PLANNED_DELETE_WITH_CREATE""
- action=""Create new with Type b"" and delta=""PLANNED_DELETE_WITH_CREATE""
11. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
12. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST
CALCULATE_DELTA= N
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Chassis will be stored in Command STCDEV_CHASSIS which should be checked via endpoint ""/axis/api/rest/entity/chassis/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandChassisModel.java
13. Check if first Chassis is deleted and second one created via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandChassisModel.java
Expected Result:
Chassis is created and other one deleted","1. Chassis is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Chassis is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
3. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. Chassis is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsChassis.java
5. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. Chassis is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
7. Chassis is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
8. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
9. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
10. There will two entries in delta Table:
- action=""Apply Planning (Delete)"" and delta=""PLANNED_DELETE_WITH_CREATE""
- action=""Create new with Type b"" and delta=""PLANNED_DELETE_WITH_CREATE""
11. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
12. Chassis will be stored in Command STCDEV_CHASSIS which should be checked via endpoint ""/axis/api/rest/entity/chassis/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandChassisModel.java
13. Chassis is created and other one deleted","1. Fill Chassis into Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/placeInZone?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
2. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Fill Chassis data from NmsChassis.json into NMS cache CTFIFC_NMS_CHASSIS via BGE endpoint: ""/axis/api/rest/entity/custom/chassis/bulkCreate?sessionId=""
and attached data as RecordNmsChassis.java mapped from NmsChassis.json
4. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/custom/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
6. Delete Chassis from Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/delete?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
7. Query if Chassis is deleted via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
8. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
9. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
10. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
11. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
12. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST
CALCULATE_DELTA= N
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
13. Check if first Chassis is deleted and second one created via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandChassisModel.java","CIF (Command Integration Framework) (Automated testing)","Chassis is planned to be deleted and there is another chassis coming from NMS cache so the first chassis will be deleted and the second will be created"," End-to-end test","Automated"
"C19640294","Verify that there is no operation for Chassis when planned delete but chassis is still in NMS cache and planned create without Chassis in NMS cache"," API","/axis/api/rest/entity/chassis/query?sessionId","Chassis is are in planning position, one with planStatus=""PLANNED_DELETED"", one with planStatus=""PLANNED_CREATED""","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - Chassis in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA""(type of device master) and id A: NmsChassis.json
    - Chassis in Command 
        - One with same createLinkDeviceMaster=""EKJAG5VN1YBKEH"" and createLinkZone=""zoneElid"" and id = nmdId of NmsChassis and cSourceId = nmsInternalId like Chassis with id A: CommandChassis.json
        - One not with same values as id A: CommandChassis.json","Medium",""," Rework","1. Fill Chassis A into Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/placeInZone?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Chassis A is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
Chassis A is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
3. Fill Chassis A data from NmsChassis.json into NMS cache CTFIFC_NMS_CHASSIS via BGE endpoint: ""/axis/api/rest/entity/custom/chassis/bulkCreate?sessionId=""
and attached data as RecordNmsChassis.java mapped from NmsChassis.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/custom/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
Expected Result:
Chassis A is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsChassis.java
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. Delete Chassis A from Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/delete?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Chassis is deleted, answer can be mapped to BgeCreateObjectResponse.java
7. Query if Chassis is deleted via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
Chassis is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
8. Create Chassis B in Command table STCDEV_CHASSIS via BGE endpoint ""/axis/api/rest/entity/chassis/placeInZone?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Chassis is created, answer can be mapped to BgeCreateObjectResponse.java
9. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
Expected Result:
Chassis is there with planStatus=""PLANNED_CREATED""
10. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
11. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
12. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be no entry in delta table
13. Check if Chassis are still there and in planned position via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandChassisModel.java
Expected Result:
Chassis are there","1. Chassis A is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Chassis A is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
3. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. Chassis A is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsChassis.java
5. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. Chassis is deleted, answer can be mapped to BgeCreateObjectResponse.java
7. Chassis is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
8. Chassis is created, answer can be mapped to BgeCreateObjectResponse.java
9. Chassis is there with planStatus=""PLANNED_CREATED""
10. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
11. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
12. There will be no entry in delta table
13. Chassis are there","1. Fill Chassis A into Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/placeInZone?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
2. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Fill Chassis A data from NmsChassis.json into NMS cache CTFIFC_NMS_CHASSIS via BGE endpoint: ""/axis/api/rest/entity/custom/chassis/bulkCreate?sessionId=""
and attached data as RecordNmsChassis.java mapped from NmsChassis.json
4. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/custom/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
6. Delete Chassis A from Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/delete?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
7. Query if Chassis is deleted via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
8. Create Chassis B in Command table STCDEV_CHASSIS via BGE endpoint ""/axis/api/rest/entity/chassis/placeInZone?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
9. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
10. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
11. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
12. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
13. Check if Chassis are still there and in planned position via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandChassisModel.java","CIF (Command Integration Framework) (Automated testing)","Chassis is planned to be deleted but there is the chassis coming from NMS cache so there will be no action and another Chassis is planned to be created but there will also be no action because it is not in NMS cache."," End-to-end test","Automated"
"C19640295","Verify that Chassis is deleted when planned delete and chassis not in NMS cache and other chassis is created when planned create and chassis in NMS cache"," API","/axis/api/rest/entity/chassis/query?sessionId","Chassis A is created, Chassis B is deleted","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - Chassis in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA""(type of device master) and id A: NmsChassis.json
    - Chassis in Command 
        - One with same createLinkDeviceMaster=""EKJAG5VN1YBKEH"" and createLinkZone=""zoneElid"" and id = nmdId of NmsChassis and cSourceId = nmsInternalId like Chassis with id A: CommandChassis.json
        - One not with same values as id A: CommandChassis.json","Medium",""," Rework","1. Fill Chassis B into Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/placeInZone?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Chassis B is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Query if Chassis B is created via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
Chassis B is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
3. Fill Chassis A data from NmsChassis.json into NMS cache CTFIFC_NMS_CHASSIS via BGE endpoint: ""/axis/api/rest/entity/custom/chassis/bulkCreate?sessionId=""
and attached data as RecordNmsChassis.java mapped from NmsChassis.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/custom/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
Expected Result:
Chassis A is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsChassis.java
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. Delete Chassis B from Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/delete?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Chassis is deleted, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
7. Query if Chassis B is deleted via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
Chassis is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
8. Create Chassis A in Command table STCDEV_CHASSIS via BGE endpoint ""/axis/api/rest/entity/chassis/placeInZone?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Chassis A is created, answer can be mapped to BgeCreateObjectResponse.java
9. Query if Chassis A is created via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
Expected Result:
Chassis A is there with planStatus=""PLANNED_CREATED""
10. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
11. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
12. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be two entries in delta table:
- action=""Apply Planning (Delete)"" and delta_case=""PLANNED_DELETE_ WITH_PLANNED_CREATE""
- action=""Apply Planning (Create)"" and delta_case=""PLANNED_DELETE_ WITH_PLANNED_CREATE"" 
13. Set delta table entries approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entries will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
14. 	
Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST
CALCULATE_DELTA= N
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
15. Check if Chassis A is in Command and if Chassis B is not in Command anymore via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandChassisModel.java
Expected Result:
Chassis A is there, Chassis B is gone","1. Chassis B is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Chassis B is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
3. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. Chassis A is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsChassis.java
5. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. Chassis is deleted, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
7. Chassis is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
8. Chassis A is created, answer can be mapped to BgeCreateObjectResponse.java
9. Chassis A is there with planStatus=""PLANNED_CREATED""
10. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
11. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
12. There will be two entries in delta table:
- action=""Apply Planning (Delete)"" and delta_case=""PLANNED_DELETE_ WITH_PLANNED_CREATE""
- action=""Apply Planning (Create)"" and delta_case=""PLANNED_DELETE_ WITH_PLANNED_CREATE"" 
13. The entries will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
14. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
15. Chassis A is there, Chassis B is gone","1. Fill Chassis B into Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/placeInZone?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
2. Query if Chassis B is created via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Fill Chassis A data from NmsChassis.json into NMS cache CTFIFC_NMS_CHASSIS via BGE endpoint: ""/axis/api/rest/entity/custom/chassis/bulkCreate?sessionId=""
and attached data as RecordNmsChassis.java mapped from NmsChassis.json
4. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/custom/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
6. Delete Chassis B from Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/delete?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
7. Query if Chassis B is deleted via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
8. Create Chassis A in Command table STCDEV_CHASSIS via BGE endpoint ""/axis/api/rest/entity/chassis/placeInZone?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
9. Query if Chassis A is created via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
10. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
11. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
12. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
13. Set delta table entries approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
14. 	
Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST
CALCULATE_DELTA= N
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
15. Check if Chassis A is in Command and if Chassis B is not in Command anymore via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandChassisModel.java","CIF (Command Integration Framework) (Automated testing)","Chassis is planned to be deleted and there is no chassis in NMS cache so it will be deleted and another Chassis is planned to be created and the corresponding chassis in in NMS cache so it can be created."," End-to-end test","Automated"
"C19640296","Verify that Chassis is deleted when planned delete and chassis not in NMS cache and other chassis is created with updated type when planned create and chassis with same id in NMS cache"," API","/axis/api/rest/entity/chassis/query?sessionId","Chassis A is created with another type, Chassis B is deleted","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - Chassis in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA""(type of device master) and id A: NmsChassis.json
    - Chassis in Command 
        - One not with same createLinkDeviceMaster but with same createLinkZone=""zoneElid"" and id = nmdId of NmsChassis and cSourceId = nmsInternalId like Chassis with id A: CommandChassis.json
        - One not with same values as id A: CommandChassis.json","Medium",""," Rework","1. Fill Chassis B into Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/placeInZone?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Chassis B is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Query if Chassis B is created via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
Chassis B is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
3. Fill Chassis A data from NmsChassis.json into NMS cache CTFIFC_NMS_CHASSIS via BGE endpoint: ""/axis/api/rest/entity/custom/chassis/bulkCreate?sessionId=""
and attached data as RecordNmsChassis.java mapped from NmsChassis.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/custom/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
Expected Result:
Chassis A is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsChassis.java
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. Delete Chassis B from Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/delete?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Chassis is deleted, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
7. Query if Chassis B is deleted via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
Chassis is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
8. Create Chassis A in Command table STCDEV_CHASSIS via BGE endpoint ""/axis/api/rest/entity/chassis/placeInZone?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Chassis A is created, answer can be mapped to BgeCreateObjectResponse.java
9. Query if Chassis A is created via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
Expected Result:
Chassis A is there with planStatus=""PLANNED_CREATED""
10. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
11. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
12. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be two entries in delta table:
- action=""Apply Planning (Delete)"" and delta_case=""PLANNED_DELETE_WITH_PLANNED_CREATE_BUT_WITH_DIFFERENT_TYPE""
- action=""Update Type + Apply Planning (Create)"" and delta_case=""PLANNED_DELETE_WITH_PLANNED_CREATE_BUT_WITH_DIFFERENT_TYPE"" 
13. Set delta table entries approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entries will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
14. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST
CALCULATE_DELTA= N
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
15. Check if Chassis A is in Command but with different type and if Chassis B is not in Command anymore via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandChassisModel.java
Expected Result:
Chassis A is there with another type, Chassis B is gone","1. Chassis B is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Chassis B is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
3. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. Chassis A is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsChassis.java
5. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. Chassis is deleted, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
7. Chassis is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
8. Chassis A is created, answer can be mapped to BgeCreateObjectResponse.java
9. Chassis A is there with planStatus=""PLANNED_CREATED""
10. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
11. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
12. There will be two entries in delta table:
- action=""Apply Planning (Delete)"" and delta_case=""PLANNED_DELETE_WITH_PLANNED_CREATE_BUT_WITH_DIFFERENT_TYPE""
- action=""Update Type + Apply Planning (Create)"" and delta_case=""PLANNED_DELETE_WITH_PLANNED_CREATE_BUT_WITH_DIFFERENT_TYPE"" 
13. The entries will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
14. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
15. Chassis A is there with another type, Chassis B is gone","1. Fill Chassis B into Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/placeInZone?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
2. Query if Chassis B is created via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Fill Chassis A data from NmsChassis.json into NMS cache CTFIFC_NMS_CHASSIS via BGE endpoint: ""/axis/api/rest/entity/custom/chassis/bulkCreate?sessionId=""
and attached data as RecordNmsChassis.java mapped from NmsChassis.json
4. Query if Chassis is created via BGE endpoint ""/axis/api/rest/entity/custom/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
6. Delete Chassis B from Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/delete?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
7. Query if Chassis B is deleted via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
8. Create Chassis A in Command table STCDEV_CHASSIS via BGE endpoint ""/axis/api/rest/entity/chassis/placeInZone?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
9. Query if Chassis A is created via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
10. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
11. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
12. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
13. Set delta table entries approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
14. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST
CALCULATE_DELTA= N
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
15. Check if Chassis A is in Command but with different type and if Chassis B is not in Command anymore via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandChassisModel.java","CIF (Command Integration Framework) (Automated testing)","Chassis is planned to be deleted and there is no chassis in NMS cache so it will be deleted and another Chassis is planned to be created and the corresponding chassis with same id but different type is in NMS cache so it can be created."," End-to-end test","Automated"
"C19640297","Verify that Chassis is deleted when planned delete and chassis not in NMS cache and no operation when chassis is planned create but no chassis NMS cache"," API","/axis/api/rest/entity/chassis/query?sessionId","Chassis A is deleted, Chassis B is not created with planStatus=""PLANNED_CREATED""","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - No such Chassis in NMS cache: NmsChassis.json
    - Two Chassis in Command: CommandChassis.json","Medium",""," Rework","1. Fill Chassis A into Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/placeInZone?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Chassis A is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Query if Chassis A is created via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
Chassis A is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
3. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
4. Delete Chassis A from Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/delete?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Chassis A is deleted, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
5. Query if Chassis A is deleted via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
Chassis A is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
6. Create Chassis B in Command table STCDEV_CHASSIS via BGE endpoint ""/axis/api/rest/entity/chassis/placeInZone?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Chassis B is created, answer can be mapped to BgeCreateObjectResponse.java
7. Query if Chassis B is created via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
Expected Result:
Chassis B is there with planStatus=""PLANNED_CREATED""
8. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
9. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
10. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be this entries in delta table: 
action=""Apply Planning (Delete)"" and delta_case=""PLANNED_DELETE""
11. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
12. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST
CALCULATE_DELTA= N
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
13. Check if Chassis A is deleted from Command and if Chassis B is in Command in planned create state via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandChassisModel.java
Expected Result:
Chassis A is gone, Chassis B is in planned create state","1. Chassis A is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Chassis A is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
3. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
4. Chassis A is deleted, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
5. Chassis A is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandChassisModel.java
6. Chassis B is created, answer can be mapped to BgeCreateObjectResponse.java
7. Chassis B is there with planStatus=""PLANNED_CREATED""
8. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
9. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
10. There will be this entries in delta table: 
action=""Apply Planning (Delete)"" and delta_case=""PLANNED_DELETE""
11. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
12. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
13. Chassis A is gone, Chassis B is in planned create state","1. Fill Chassis A into Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/placeInZone?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
2. Query if Chassis A is created via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
4. Delete Chassis A from Command table STCDEV_CHASSIS via BGE endpoint ""/api/rest/entity/chassis/delete?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
5. Query if Chassis A is deleted via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
6. Create Chassis B in Command table STCDEV_CHASSIS via BGE endpoint ""/axis/api/rest/entity/chassis/placeInZone?sessionId="" and data from CommandChassis.json mapped to CommandChassisModel.java like:
![](index.php?/attachments/get/12360)
7. Query if Chassis B is created via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
8. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
9. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
10. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
11. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
12. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST
CALCULATE_DELTA= N
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
13. Check if Chassis A is deleted from Command and if Chassis B is in Command in planned create state via BGE endpoint ""/axis/api/rest/entity/chassis/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandChassisModel.java","CIF (Command Integration Framework) (Automated testing)","Chassis is planned to be deleted and there is no chassis in NMS cache so it will be deleted and another Chassis is planned to be created but there is no chassis in NMS cache so there will be no action."," End-to-end test","Automated"
"C19735952","Verify that Module in NMS cache will be created in Command"," API","/axis/api/rest/entity/module/query?sessionId","Module is found in Command","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists

- Test data:
    - Module in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA"" (type of device master): NmsModule.json
    - no such Module in Command: CommandModule.json","Medium",""," Final","1. Fill Module data from NmsModule.json into NMS cache CTFIFC_NMS_Module via BGE endpoint: ""/axis/api/rest/entity/custom/Module/bulkCreate?sessionId="" and attached data as RecordNmsModule.java mapped from NmsModule.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

2. Query if Module is created via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
Module is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
3. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
4. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be an entry in delta table with action = CREATE
5. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
6. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Module will be stored in Command STCDEV_Module which should be checked via endpoint "" ""/axis/api/rest/entity/Module/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandModuleModel.java","1. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

2. Module is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
3. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
4. There will be an entry in delta table with action = CREATE
5. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
6. Module will be stored in Command STCDEV_Module which should be checked via endpoint "" ""/axis/api/rest/entity/Module/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandModuleModel.java","1. Fill Module data from NmsModule.json into NMS cache CTFIFC_NMS_Module via BGE endpoint: ""/axis/api/rest/entity/custom/Module/bulkCreate?sessionId="" and attached data as RecordNmsModule.java mapped from NmsModule.json
2. Query if Module is created via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
4. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
5. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
6. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y","CIF (Command Integration Framework) (Automated testing)","Module should be created in Command when it is in NMS chache"," End-to-end test","Automated"
"C19735953","Verify that Module from NMS cache will be updated in Command"," API","/axis/api/rest/entity/Module/query?sessionId","Module is found with updated ip-adress""10.122.77.05"" in Command","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists

- Test data:
    - Module in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA"" (type of device master): NmsModule.json
    - Module in Command with same createLinkDeviceMaster=""EKJAG5VN1YBKEH"" and createLinkZone=""zoneElid"" and id = nmdId of NmsModule and cSourceId = nmsInternalId but ip-adress=""10.122.77.05"" instead of ""10.122.77.02"": CommandModule.json","Medium",""," Final","1. Fill Module into Command table STCDEV_Module via BGE endpoint ""/api/rest/entity/Module/placeInZone?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Module is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. Query if Module is created via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

Expected Result:
Module is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
3. Fill Module data from NmsModule.json into NMS cache CTFIFC_NMS_Module via BGE endpoint: ""/axis/api/rest/entity/custom/Module/bulkCreate?sessionId=""
and attached data as RecordNmsModule.java mapped from NmsModule.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

4. Query if Module is created via BGE endpoint ""/axis/api/rest/entity/custom/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)

Expected Result:
Module is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsModule.java
5. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
6. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be an entry in delta table with action = UPDATE
7. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
8. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Module will be stored in Command STCDEV_MODULE which should be checked via endpoint ""/axis/api/rest/entity/Module/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandModuleModel.java","1. Module is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. Module is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
3. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

4. Module is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsModule.java
5. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
6. There will be an entry in delta table with action = UPDATE
7. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
8. Module will be stored in Command STCDEV_MODULE which should be checked via endpoint ""/axis/api/rest/entity/Module/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandModuleModel.java","1. Fill Module into Command table STCDEV_Module via BGE endpoint ""/api/rest/entity/Module/placeInZone?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
2. Query if Module is created via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

3. Fill Module data from NmsModule.json into NMS cache CTFIFC_NMS_Module via BGE endpoint: ""/axis/api/rest/entity/custom/Module/bulkCreate?sessionId=""
and attached data as RecordNmsModule.java mapped from NmsModule.json
4. Query if Module is created via BGE endpoint ""/axis/api/rest/entity/custom/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)

5. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
6. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
7. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
8. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y","CIF (Command Integration Framework) (Automated testing)","Module should be updated in Command when it is in NMS chache"," End-to-end test","Automated"
"C19735954","Verify that Module Type from NMS cache will be updated in Command"," API","/axis/api/rest/entity/module/query?sessionId","Module is found with updated type=""???"" in Command","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists

????
- Test data:
    - Module in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA"" (type of device master): NmsModule.json
    - Module in Command with same createLinkDeviceMaster=""EKJAG5VN1YBKEH"" and createLinkZone=""zoneElid"" and id = nmdId of NmsModule and cSourceId = nmsInternalId but ip-adress=""10.122.77.05"" instead of ""10.122.77.02"": CommandModule.json","Medium",""," Rework","1. Fill Module into Command table MODULE via BGE endpoint ""/api/rest/entity/Module/placeInZone?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)

Expected Result:
Module is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. Query if Module is created via BGE endpoint ""/axis/api/rest/entity/module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

Expected Result:
Module is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
3. Fill Module data from NmsModule.json into NMS cache CTFIFC_NMS_MODULE via BGE endpoint: ""/axis/api/rest/entity/custom/module/bulkCreate?sessionId=""
and attached data as RecordNmsModule.java mapped from NmsModule.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

4. Query if campus is created via BGE endpoint ""/axis/api/rest/entity/custom/module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)

Expected Result:
Module is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsModule.java
5. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
6. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be an entry in delta table with action = UPDATE
7. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
8. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Module will be stored in Command STCDEV_MODULE which should be checked via endpoint ""/axis/api/rest/entity/Module/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandModuleModel.java","1. Module is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. Module is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
3. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

4. Module is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsModule.java
5. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
6. There will be an entry in delta table with action = UPDATE
7. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
8. Module will be stored in Command STCDEV_MODULE which should be checked via endpoint ""/axis/api/rest/entity/Module/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandModuleModel.java","1. Fill Module into Command table MODULE via BGE endpoint ""/api/rest/entity/Module/placeInZone?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)

2. Query if Module is created via BGE endpoint ""/axis/api/rest/entity/module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

3. Fill Module data from NmsModule.json into NMS cache CTFIFC_NMS_MODULE via BGE endpoint: ""/axis/api/rest/entity/custom/module/bulkCreate?sessionId=""
and attached data as RecordNmsModule.java mapped from NmsModule.json
4. Query if campus is created via BGE endpoint ""/axis/api/rest/entity/custom/module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)

5. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
6. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
7. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
8. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y","CIF (Command Integration Framework) (Automated testing)","Module Type should be updated in Command when it is in NMS chache"," End-to-end test","Automated"
"C19735955","Verify that Module will be deleted from Command"," API","/axis/api/rest/entity/module/query?sessionId","Module is deleted from Command","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists

- Test data:
    - No such Module in NMS cache: NmsModule.json
    - Module in Command: CommandModule.json","Medium",""," Final","1. Fill Module into Command table STCDEV_MODULE via BGE endpoint ""/api/rest/entity/Module/placeInZone?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)

Expected Result:
Module is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. Query if Module is created via BGE endpoint ""/axis/api/rest/entity/module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

Expected Result:
Module is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
3. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
4. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be an entry in delta table with action = DELETE
5. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
6. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Module will be deleted from Command STCDEV_MODULE which should be checked via endpoint ""/axis/api/rest/entity/module/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandModuleModel.java","1. Module is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. Module is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
3. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
4. There will be an entry in delta table with action = DELETE
5. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
6. Module will be deleted from Command STCDEV_MODULE which should be checked via endpoint ""/axis/api/rest/entity/module/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandModuleModel.java","1. Fill Module into Command table STCDEV_MODULE via BGE endpoint ""/api/rest/entity/Module/placeInZone?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)

2. Query if Module is created via BGE endpoint ""/axis/api/rest/entity/module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

3. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
4. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
5. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
6. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y","CIF (Command Integration Framework) (Automated testing)","Module should be delted from Command because it's not in NMS cache"," End-to-end test","Automated"
"C19735956","Verify that there is no operation for Module when planned but no data in NMS cache"," API","/axis/api/rest/entity/module/query?sessionId","Module is still in planning position, nothing changed","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - No such Module in NMS cache: NmsModule.json
    - Module in Command: CommandModule.json","Medium",""," Final","1. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
2. Fill Module into Command table STCDEV_MODULE via BGE endpoint ""/api/rest/entity/Module/placeInZone?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Module is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
3. Query if Module is created via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
Module is there with planStatus=""PLANNED_CREATED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
4. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
5. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
6. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be no entry in delta table
7. Check if Module is still there and in planned position via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandModuleModel.java
Expected Result:
Module is there","1. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
2. Module is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
3. Module is there with planStatus=""PLANNED_CREATED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
4. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
5. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
6. There will be no entry in delta table
7. Module is there","1. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
2. Fill Module into Command table STCDEV_MODULE via BGE endpoint ""/api/rest/entity/Module/placeInZone?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
3. Query if Module is created via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
4. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
5. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
6. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
7. Check if Module is still there and in planned position via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandModuleModel.java","CIF (Command Integration Framework) (Automated testing)","Module is planned to be created but there is no data coming from NMS cache so there will be no action"," End-to-end test","Automated"
"C19735957","Verify that Module will be created when planned and Module with same type and id in NMS cache"," API","/axis/api/rest/entity/Module/query?sessionId","Module is not in planning position anymore, is created in planned position","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - Module in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA"" (type of device master): NmsModule.json
    - Module in Command with same createLinkDeviceMaster=""EKJAG5VN1YBKEH"" and createLinkZone=""zoneElid"" and id = nmdId of NmsModule and cSourceId = nmsInternalId: CommandModule.json","Medium",""," Final","1. Fill Module data from NmsModule.json into NMS cache CTFIFC_NMS_MODULE via BGE endpoint: ""/axis/api/rest/entity/custom/Module/bulkCreate?sessionId=""
and attached data as RecordNmsModule.java mapped from NmsModule.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
2. Query if Module is created via BGE endpoint ""/axis/api/rest/entity/custom/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)

Expected Result:
Moduleis there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsModule.java
3. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
4. Fill Module into Command table STCDEV_MODULE via BGE endpoint ""/api/rest/entity/Module/placeInZone?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Module is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
5. Query if Module is created via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
Module is there with planStatus=""PLANNED_CREATED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
6. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
7. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
8. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be entry in delta table with delta_case = PLANNED_CREATE and action = Apply Planning (Create)
9. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java

10. Check if Module is created where position was planned via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandModuleModel.java
Expected Result:
Module is there and out of planning state","1. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
2. Moduleis there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsModule.java
3. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
4. Module is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
5. Module is there with planStatus=""PLANNED_CREATED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
6. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
7. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
8. There will be entry in delta table with delta_case = PLANNED_CREATE and action = Apply Planning (Create)
9. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java

10. Module is there and out of planning state","1. Fill Module data from NmsModule.json into NMS cache CTFIFC_NMS_MODULE via BGE endpoint: ""/axis/api/rest/entity/custom/Module/bulkCreate?sessionId=""
and attached data as RecordNmsModule.java mapped from NmsModule.json
2. Query if Module is created via BGE endpoint ""/axis/api/rest/entity/custom/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)

3. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
4. Fill Module into Command table STCDEV_MODULE via BGE endpoint ""/api/rest/entity/Module/placeInZone?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
5. Query if Module is created via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
6. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
7. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
8. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
9. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
10. Check if Module is created where position was planned via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandModuleModel.java","CIF (Command Integration Framework) (Automated testing)","Module is planned to be created and Module with same id and type is in NMs cache so it will be created where planned"," End-to-end test","Automated"
"C19735958","Verify that Module will be created with updated type when planned and Module with same id but different type in NMS cache"," API","/axis/api/rest/entity/Module/query?sessionId","Module is not in planning position anymore, is created in planned position with updated type","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - Other Type here : Module in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA"" (type of device master): NmsModule.json
    - Module in Command not with same createLinkDeviceMaster=""EKJAG5VN1YBKEH"" but with same createLinkZone=""zoneElid"" and id = nmdId of NmsModule and cSourceId = nmsInternalId: CommandModule.json","Medium",""," Rework","1. Fill Module into Command table STCDEV_MODULE via BGE endpoint ""/api/rest/entity/Module/placeInZone?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Module is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Query if Module is created via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

Expected Result:
Module is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
3. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
4. Fill Module into Command table STCDEV_MODULE via BGE endpoint ""/api/rest/entity/Module/create?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Module is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
5. Query if Module is created via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
Module is there with planStatus=""PLANNED_CREATED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
6. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
7. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
8. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be entry in delta table with delta_case = PLANNED_CREATE_BUT_WITH_DIFFERENT_TYPE and action = Update Type + Apply Planning (Create)
9. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
10. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java

11. Check if Module is created where position was planned via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandModuleModel.java
Expected Result:
Module is there and out of planning state","1. Module is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Module is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
3. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
4. Module is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
5. Module is there with planStatus=""PLANNED_CREATED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
6. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
7. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
8. There will be entry in delta table with delta_case = PLANNED_CREATE_BUT_WITH_DIFFERENT_TYPE and action = Update Type + Apply Planning (Create)
9. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
10. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java

11. Module is there and out of planning state","1. Fill Module into Command table STCDEV_MODULE via BGE endpoint ""/api/rest/entity/Module/placeInZone?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
2. Query if Module is created via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

3. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
4. Fill Module into Command table STCDEV_MODULE via BGE endpoint ""/api/rest/entity/Module/create?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
5. Query if Module is created via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
6. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
7. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
8. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
9. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
10. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
11. Check if Module is created where position was planned via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandModuleModel.java","CIF (Command Integration Framework) (Automated testing)","Module is planned to be created and Module with same id but different type is in NMs cache so it will be created but with different type"," End-to-end test","Automated"
"C19735959","Verify that there is no operation for Module when planned delete but Module is still in NMS cache"," API","/axis/api/rest/entity/Module/query?sessionId","Module is still in planning position with planStatus=""PLANNED_DELETED"", nothing changed","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - Module in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA"" (type of device master): NmsModule.json
    - Module in Command with same createLinkDeviceMaster=""EKJAG5VN1YBKEH"" and createLinkZone=""zoneElid"" and id = nmdId of NmsModule and cSourceId = nmsInternalId: CommandModule.json","Medium",""," Final","1. Fill Module into Command table STCDEV_MODULE via BGE endpoint ""/api/rest/entity/Module/placeInZone?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Module is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Query if Module is created via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
Module is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
3. Fill Module data from NmsModule.json into NMS cache CTFIFC_NMS_MODULE via BGE endpoint: ""/axis/api/rest/entity/custom/Module/bulkCreate?sessionId=""
and attached data as RecordNmsModule.java mapped from NmsModule.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. Query if Module is created via BGE endpoint ""/axis/api/rest/entity/custom/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
Expected Result:
Module is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsModule.java
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. Delete Module from Command table STCDEV_MODULE via BGE endpoint ""/api/rest/entity/Module/delete?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Module is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
7. Query if Module is deleted via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
Module is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
8. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
9. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
10. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be no entry in delta table
11. Check if Module is still there and in planned position via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandModuleModel.java
Expected Result:
Module is there with planStatus=""PLANNED_DELETED""","1. Module is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Module is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
3. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. Module is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsModule.java
5. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. Module is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
7. Module is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
8. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
9. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
10. There will be no entry in delta table
11. Module is there with planStatus=""PLANNED_DELETED""","1. Fill Module into Command table STCDEV_MODULE via BGE endpoint ""/api/rest/entity/Module/placeInZone?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
2. Query if Module is created via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Fill Module data from NmsModule.json into NMS cache CTFIFC_NMS_MODULE via BGE endpoint: ""/axis/api/rest/entity/custom/Module/bulkCreate?sessionId=""
and attached data as RecordNmsModule.java mapped from NmsModule.json
4. Query if Module is created via BGE endpoint ""/axis/api/rest/entity/custom/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
6. Delete Module from Command table STCDEV_MODULE via BGE endpoint ""/api/rest/entity/Module/delete?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
7. Query if Module is deleted via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
8. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
9. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
10. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
11. Check if Module is still there and in planned position via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandModuleModel.java","CIF (Command Integration Framework) (Automated testing)","Module is planned to be deleted but there is the Module coming from NMS cache so there will be no action"," End-to-end test","Automated"
"C19735960","Verify that Module is deleted when planned delete and no Module in NMS cache"," API","/axis/api/rest/entity/Module/query?sessionId","Module is deleted from Command","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - No such Module in NMS cache: NmsModule.json
    - Module in Command: CommandModule.json","Medium",""," Final","1. Fill Module into Command table STCDEV_MODULE via BGE endpoint ""/api/rest/entity/Module/placeInZone?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Module is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Query if Module is created via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
Module is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
3. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
4. Delete Module from Command table STCDEV_MODULE via BGE endpoint ""/api/rest/entity/Module/delete?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Module is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
5. Query if Module is deleted via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
Module is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
6. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
7. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
8. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be entry in delta table with delta_case = PLANNED_DELETE and action = Apply Planning (Delete)
9. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
10. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Module will be stored in Command STCDEV_MODULE which should be checked via endpoint ""/axis/api/rest/entity/Module/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandModuleModel.java
11. Check if Module is deleted from Command via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
Expected Result:
The Module won't be in the returnData","1. Module is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Module is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
3. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
4. Module is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
5. Module is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
6. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
7. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
8. There will be entry in delta table with delta_case = PLANNED_DELETE and action = Apply Planning (Delete)
9. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
10. Module will be stored in Command STCDEV_MODULE which should be checked via endpoint ""/axis/api/rest/entity/Module/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandModuleModel.java
11. The Module won't be in the returnData","1. Fill Module into Command table STCDEV_MODULE via BGE endpoint ""/api/rest/entity/Module/placeInZone?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
2. Query if Module is created via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
4. Delete Module from Command table STCDEV_MODULE via BGE endpoint ""/api/rest/entity/Module/delete?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
5. Query if Module is deleted via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
6. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
7. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
8. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
9. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
10. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
11. Check if Module is deleted from Command via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java","CIF (Command Integration Framework) (Automated testing)","Module is planned to be deleted and there is no Module in NMS chache so it will be deleted"," End-to-end test","Automated"
"C19735961","Verify that Module will be deleted and new Module will be created when another Module is in NMS cache"," API","/axis/api/rest/entity/Module/query?sessionId","Module is deleted and other one created","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - Module in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA"" (type of device master): NmsModule.json
    - Module in Command not with same createLinkDeviceMaster=""EKJAG5VN1YBKEH"" and not createLinkZone=""zoneElid"" and not id = nmdId of NmsModule and not cSourceId = nmsInternalId: CommandModule.json","Medium",""," Rework","1. Fill Module into Command table STCDEV_MODULE via BGE endpoint ""/api/rest/entity/Module/placeInZone?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Module is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Query if Module is created via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
Module is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
3. Fill Module data from NmsModule.json into NMS cache CTFIFC_NMS_MODULE via BGE endpoint: ""/axis/api/rest/entity/custom/Module/bulkCreate?sessionId=""
and attached data as RecordNmsModule.java mapped from NmsModule.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. Query if Module is created via BGE endpoint ""/axis/api/rest/entity/custom/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
Expected Result:
Module is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsModule.java
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. Delete Module from Command table STCDEV_MODULE via BGE endpoint ""/api/rest/entity/Module/delete?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Module is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
7. Query if Module is deleted via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
Module is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
8. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
9. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
10. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will two entries in delta Table:
- action=""Apply Planning (Delete)"" and delta=""PLANNED_DELETE_WITH_CREATE""
- action=""Create new with Type b"" and delta=""PLANNED_DELETE_WITH_CREATE""
11. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
12. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST
CALCULATE_DELTA= N
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Module will be stored in Command STCDEV_MODULE which should be checked via endpoint ""/axis/api/rest/entity/Module/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandModuleModel.java
13. Check if first Module is deleted and second one created via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandModuleModel.java
Expected Result:
Module is created and other one deleted","1. Module is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Module is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
3. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. Module is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsModule.java
5. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. Module is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
7. Module is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
8. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
9. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
10. There will two entries in delta Table:
- action=""Apply Planning (Delete)"" and delta=""PLANNED_DELETE_WITH_CREATE""
- action=""Create new with Type b"" and delta=""PLANNED_DELETE_WITH_CREATE""
11. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
12. Module will be stored in Command STCDEV_MODULE which should be checked via endpoint ""/axis/api/rest/entity/Module/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandModuleModel.java
13. Module is created and other one deleted","1. Fill Module into Command table STCDEV_MODULE via BGE endpoint ""/api/rest/entity/Module/placeInZone?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
2. Query if Module is created via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Fill Module data from NmsModule.json into NMS cache CTFIFC_NMS_MODULE via BGE endpoint: ""/axis/api/rest/entity/custom/Module/bulkCreate?sessionId=""
and attached data as RecordNmsModule.java mapped from NmsModule.json
4. Query if Module is created via BGE endpoint ""/axis/api/rest/entity/custom/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
6. Delete Module from Command table STCDEV_MODULE via BGE endpoint ""/api/rest/entity/Module/delete?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
7. Query if Module is deleted via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
8. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
9. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
10. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
11. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
12. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST
CALCULATE_DELTA= N
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
13. Check if first Module is deleted and second one created via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandModuleModel.java","CIF (Command Integration Framework) (Automated testing)","Module is planned to be deleted and there is another Module coming from NMS cache so the first Module will be deleted and the second will be created"," End-to-end test","Automated"
"C19735962","Verify that there is no operation for Module when planned delete but Module is still in NMS cache and planned create without Module in NMS cache"," API","/axis/api/rest/entity/Module/query?sessionId","Module is are in planning position, one with planStatus=""PLANNED_DELETED"", one with planStatus=""PLANNED_CREATED""","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - Module in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA""(type of device master) and id A: NmsModule.json
    - Module in Command 
        - One with same createLinkDeviceMaster=""EKJAG5VN1YBKEH"" and createLinkZone=""zoneElid"" and id = nmdId of NmsModule and cSourceId = nmsInternalId like Module with id A: CommandModule.json
        - One not with same values as id A: CommandModule.json","Medium",""," Rework","1. Fill Module A into Command table STCDEV_MODULE via BGE endpoint ""/api/rest/entity/Module/placeInZone?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Module A is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Query if Module is created via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
Module A is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
3. Fill Module A data from NmsModule.json into NMS cache CTFIFC_NMS_MODULE via BGE endpoint: ""/axis/api/rest/entity/custom/Module/bulkCreate?sessionId=""
and attached data as RecordNmsModule.java mapped from NmsModule.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. Query if Module is created via BGE endpoint ""/axis/api/rest/entity/custom/Module/query?sessionId=""Module
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
Expected Result:
Module A is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsModule.java
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. Delete Module A from Command table STCDEV_MODULE via BGE endpoint ""/api/rest/entity/Module/delete?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Module is deleted, answer can be mapped to BgeCreateObjectResponse.java
7. Query if Module is deleted via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
Module is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
8. Create Module B in Command table STCDEV_MODULE via BGE endpoint ""/axis/api/rest/entity/Module/placeInZone?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Module is created, answer can be mapped to BgeCreateObjectResponse.java
9. Query if Module is created via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
Expected Result:
Module is there with planStatus=""PLANNED_CREATED""
10. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
11. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
12. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be no entry in delta table
13. Check if Module are still there and in planned position via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandModuleModel.java
Expected Result:
Module are there","1. Module A is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Module A is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
3. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. Module A is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsModule.java
5. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. Module is deleted, answer can be mapped to BgeCreateObjectResponse.java
7. Module is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
8. Module is created, answer can be mapped to BgeCreateObjectResponse.java
9. Module is there with planStatus=""PLANNED_CREATED""
10. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
11. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
12. There will be no entry in delta table
13. Module are there","1. Fill Module A into Command table STCDEV_MODULE via BGE endpoint ""/api/rest/entity/Module/placeInZone?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
2. Query if Module is created via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Fill Module A data from NmsModule.json into NMS cache CTFIFC_NMS_MODULE via BGE endpoint: ""/axis/api/rest/entity/custom/Module/bulkCreate?sessionId=""
and attached data as RecordNmsModule.java mapped from NmsModule.json
4. Query if Module is created via BGE endpoint ""/axis/api/rest/entity/custom/Module/query?sessionId=""Module
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
6. Delete Module A from Command table STCDEV_MODULE via BGE endpoint ""/api/rest/entity/Module/delete?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
7. Query if Module is deleted via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
8. Create Module B in Command table STCDEV_MODULE via BGE endpoint ""/axis/api/rest/entity/Module/placeInZone?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
9. Query if Module is created via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
10. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
11. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
12. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
13. Check if Module are still there and in planned position via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandModuleModel.java","CIF (Command Integration Framework) (Automated testing)","Module is planned to be deleted but there is the Module coming from NMS cache so there will be no action and another Module is planned to be created but there will also be no action because it is not in NMS cache."," End-to-end test","Automated"
"C19735963","Verify that Module is deleted when planned delete and Module not in NMS cache and other Module is created when planned create and Module in NMS cache"," API","/axis/api/rest/entity/Module/query?sessionId","Module A is created, Module B is deleted","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - Module in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA""(type of device master) and id A: NmsModule.json
    - Module in Command 
        - One with same createLinkDeviceMaster=""EKJAG5VN1YBKEH"" and createLinkZone=""zoneElid"" and id = nmdId of NmsModule and cSourceId = nmsInternalId like Module with id A: CommandModule.json
        - One not with same values as id A: CommandModule.json","Medium",""," Rework","1. Fill Module B into Command table STCDEV_MODULE via BGE endpoint ""/api/rest/entity/Module/placeInZone?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Module B is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Query if Module B is created via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
Module B is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
3. Fill Module A data from NmsModule.json into NMS cache CTFIFC_NMS_MODULE via BGE endpoint: ""/axis/api/rest/entity/custom/Module/bulkCreate?sessionId=""
and attached data as RecordNmsModule.java mapped from NmsModule.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. Query if Module is created via BGE endpoint ""/axis/api/rest/entity/custom/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
Expected Result:
Module A is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsModule.java
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. Delete Module B from Command table STCDEV_MODULE via BGE endpoint ""/api/rest/entity/Module/delete?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Module is deleted, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
7. Query if Module B is deleted via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
Module is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
8. Create Module A in Command table STCDEV_MODULE via BGE endpoint ""/axis/api/rest/entity/Module/placeInZone?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Module A is created, answer can be mapped to BgeCreateObjectResponse.java
9. Query if Module A is created via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
Expected Result:
Module A is there with planStatus=""PLANNED_CREATED""
10. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
11. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
12. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be two entries in delta table:
- action=""Apply Planning (Delete)"" and delta_case=""PLANNED_DELETE_ WITH_PLANNED_CREATE""
- action=""Apply Planning (Create)"" and delta_case=""PLANNED_DELETE_ WITH_PLANNED_CREATE"" 
13. Set delta table entries approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entries will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
14. 	
Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST
CALCULATE_DELTA= N
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
15. Check if Module A is in Command and if Module B is not in Command anymore via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandModuleModel.java
Expected Result:
Module A is there, Module B is gone","1. Module B is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Module B is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
3. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. Module A is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsModule.java
5. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. Module is deleted, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
7. Module is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
8. Module A is created, answer can be mapped to BgeCreateObjectResponse.java
9. Module A is there with planStatus=""PLANNED_CREATED""
10. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
11. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
12. There will be two entries in delta table:
- action=""Apply Planning (Delete)"" and delta_case=""PLANNED_DELETE_ WITH_PLANNED_CREATE""
- action=""Apply Planning (Create)"" and delta_case=""PLANNED_DELETE_ WITH_PLANNED_CREATE"" 
13. The entries will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
14. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
15. Module A is there, Module B is gone","1. Fill Module B into Command table STCDEV_MODULE via BGE endpoint ""/api/rest/entity/Module/placeInZone?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
2. Query if Module B is created via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Fill Module A data from NmsModule.json into NMS cache CTFIFC_NMS_MODULE via BGE endpoint: ""/axis/api/rest/entity/custom/Module/bulkCreate?sessionId=""
and attached data as RecordNmsModule.java mapped from NmsModule.json
4. Query if Module is created via BGE endpoint ""/axis/api/rest/entity/custom/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
6. Delete Module B from Command table STCDEV_MODULE via BGE endpoint ""/api/rest/entity/Module/delete?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
7. Query if Module B is deleted via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
8. Create Module A in Command table STCDEV_MODULE via BGE endpoint ""/axis/api/rest/entity/Module/placeInZone?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
9. Query if Module A is created via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
10. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
11. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
12. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
13. Set delta table entries approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
14. 	
Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST
CALCULATE_DELTA= N
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
15. Check if Module A is in Command and if Module B is not in Command anymore via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandModuleModel.java","CIF (Command Integration Framework) (Automated testing)","Module is planned to be deleted and there is no Module in NMS cache so it will be deleted and another Module is planned to be created and the corresponding Module in in NMS cache so it can be created."," End-to-end test","Automated"
"C19735964","Verify that Module is deleted when planned delete and Module not in NMS cache and other Module is created with updated type when planned create and Module with same id in NMS cache"," API","/axis/api/rest/entity/Module/query?sessionId","Module A is created with another type, Module B is deleted","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - Module in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA""(type of device master) and id A: NmsModule.json
    - Module in Command 
        - One not with same createLinkDeviceMaster but with same createLinkZone=""zoneElid"" and id = nmdId of NmsModule and cSourceId = nmsInternalId like Module with id A: CommandModule.json
        - One not with same values as id A: CommandModule.json","Medium",""," Rework","1. Fill Module B into Command table STCDEV_MODULE via BGE endpoint ""/api/rest/entity/Module/placeInZone?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Module B is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Query if Module B is created via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
Module B is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
3. Fill Module A data from NmsModule.json into NMS cache CTFIFC_NMS_MODULE via BGE endpoint: ""/axis/api/rest/entity/custom/Module/bulkCreate?sessionId=""
and attached data as RecordNmsModule.java mapped from NmsModule.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. Query if Module is created via BGE endpoint ""/axis/api/rest/entity/custom/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
Expected Result:
Module A is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsModule.java
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. Delete Module B from Command table STCDEV_MODULE via BGE endpoint ""/api/rest/entity/Module/delete?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Module is deleted, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
7. Query if Module B is deleted via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
Module is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
8. Create Module A in Command table STCDEV_MODULE via BGE endpoint ""/axis/api/rest/entity/Module/placeInZone?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Module A is created, answer can be mapped to BgeCreateObjectResponse.java
9. Query if Module A is created via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
Expected Result:
Module A is there with planStatus=""PLANNED_CREATED""
10. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
11. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
12. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be two entries in delta table:
- action=""Apply Planning (Delete)"" and delta_case=""PLANNED_DELETE_WITH_PLANNED_CREATE_BUT_WITH_DIFFERENT_TYPE""
- action=""Update Type + Apply Planning (Create)"" and delta_case=""PLANNED_DELETE_WITH_PLANNED_CREATE_BUT_WITH_DIFFERENT_TYPE"" 
13. Set delta table entries approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entries will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
14. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST
CALCULATE_DELTA= N
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
15. Check if Module A is in Command but with different type and if Module B is not in Command anymore via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandModuleModel.java
Expected Result:
Module A is there with another type, Module B is gone","1. Module B is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Module B is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
3. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. Module A is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsModule.java
5. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. Module is deleted, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
7. Module is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
8. Module A is created, answer can be mapped to BgeCreateObjectResponse.java
9. Module A is there with planStatus=""PLANNED_CREATED""
10. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
11. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
12. There will be two entries in delta table:
- action=""Apply Planning (Delete)"" and delta_case=""PLANNED_DELETE_WITH_PLANNED_CREATE_BUT_WITH_DIFFERENT_TYPE""
- action=""Update Type + Apply Planning (Create)"" and delta_case=""PLANNED_DELETE_WITH_PLANNED_CREATE_BUT_WITH_DIFFERENT_TYPE"" 
13. The entries will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
14. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
15. Module A is there with another type, Module B is gone","1. Fill Module B into Command table STCDEV_MODULE via BGE endpoint ""/api/rest/entity/Module/placeInZone?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
2. Query if Module B is created via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Fill Module A data from NmsModule.json into NMS cache CTFIFC_NMS_MODULE via BGE endpoint: ""/axis/api/rest/entity/custom/Module/bulkCreate?sessionId=""
and attached data as RecordNmsModule.java mapped from NmsModule.json
4. Query if Module is created via BGE endpoint ""/axis/api/rest/entity/custom/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
6. Delete Module B from Command table STCDEV_MODULE via BGE endpoint ""/api/rest/entity/Module/delete?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
7. Query if Module B is deleted via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
8. Create Module A in Command table STCDEV_MODULE via BGE endpoint ""/axis/api/rest/entity/Module/placeInZone?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
9. Query if Module A is created via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
10. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
11. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
12. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
13. Set delta table entries approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
14. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST
CALCULATE_DELTA= N
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
15. Check if Module A is in Command but with different type and if Module B is not in Command anymore via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandModuleModel.java","CIF (Command Integration Framework) (Automated testing)","Module is planned to be deleted and there is no Module in NMS cache so it will be deleted and another Module is planned to be created and the corresponding Module with same id but different type is in NMS cache so it can be created."," End-to-end test","Automated"
"C19735965","Verify that Module is deleted when planned delete and Module not in NMS cache and no operation when Module is planned create but no Module NMS cache"," API","/axis/api/rest/entity/Module/query?sessionId","Module A is deleted, Module B is not created with planStatus=""PLANNED_CREATED""","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - No such Module in NMS cache: NmsModule.json
    - Two Module in Command: CommandModule.json","Medium",""," Rework","1. Fill Module A into Command table STCDEV_MODULE via BGE endpoint ""/api/rest/entity/Module/placeInZone?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Module A is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Query if Module A is created via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
Module A is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
3. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
4. Delete Module A from Command table STCDEV_MODULE via BGE endpoint ""/api/rest/entity/Module/delete?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Module A is deleted, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
5. Query if Module A is deleted via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
Module A is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
6. Create Module B in Command table STCDEV_MODULE via BGE endpoint ""/axis/api/rest/entity/Module/placeInZone?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
Module B is created, answer can be mapped to BgeCreateObjectResponse.java
7. Query if Module B is created via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
Expected Result:
Module B is there with planStatus=""PLANNED_CREATED""
8. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
9. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
10. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be this entries in delta table: 
action=""Apply Planning (Delete)"" and delta_case=""PLANNED_DELETE""
11. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
12. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST
CALCULATE_DELTA= N
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
13. Check if Module A is deleted from Command and if Module B is in Command in planned create state via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandModuleModel.java
Expected Result:
Module A is gone, Module B is in planned create state","1. Module A is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Module A is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
3. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
4. Module A is deleted, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
5. Module A is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandModuleModel.java
6. Module B is created, answer can be mapped to BgeCreateObjectResponse.java
7. Module B is there with planStatus=""PLANNED_CREATED""
8. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
9. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
10. There will be this entries in delta table: 
action=""Apply Planning (Delete)"" and delta_case=""PLANNED_DELETE""
11. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
12. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
13. Module A is gone, Module B is in planned create state","1. Fill Module A into Command table STCDEV_MODULE via BGE endpoint ""/api/rest/entity/Module/placeInZone?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
2. Query if Module A is created via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
4. Delete Module A from Command table STCDEV_MODULE via BGE endpoint ""/api/rest/entity/Module/delete?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
5. Query if Module A is deleted via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
6. Create Module B in Command table STCDEV_MODULE via BGE endpoint ""/axis/api/rest/entity/Module/placeInZone?sessionId="" and data from CommandModule.json mapped to CommandModuleModel.java like:
![](index.php?/attachments/get/12360)
7. Query if Module B is created via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
8. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
9. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
10. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
11. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
12. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST
CALCULATE_DELTA= N
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
13. Check if Module A is deleted from Command and if Module B is in Command in planned create state via BGE endpoint ""/axis/api/rest/entity/Module/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandModuleModel.java","CIF (Command Integration Framework) (Automated testing)","Module is planned to be deleted and there is no Module in NMS cache so it will be deleted and another Module is planned to be created but there is no Module in NMS cache so there will be no action."," End-to-end test","Automated"
"C19735980","Verify that SFP in NMS cache will be created in Command"," API","/axis/api/rest/entity/SFP/query?sessionId","SFP is found in Command","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists

- Test data:
    - SFP in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA"" (type of device master): NmsSFP.json
    - no such SFP in Command: CommandSFP.json","Medium",""," Final","1. Fill SFP data from NmsSFP.json into NMS cache CTFIFC_NMS_SFP via BGE endpoint: ""/axis/api/rest/entity/custom/SFP/bulkCreate?sessionId="" and attached data as RecordNmsSFP.java mapped from NmsSFP.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

2. Query if SFP is created via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
SFP is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
3. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
4. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be an entry in delta table with action = CREATE
5. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
6. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
SFP will be stored in Command STCDEV_SFP which should be checked via endpoint "" ""/axis/api/rest/entity/SFP/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSFPModel.java","1. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

2. SFP is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
3. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
4. There will be an entry in delta table with action = CREATE
5. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
6. SFP will be stored in Command STCDEV_SFP which should be checked via endpoint "" ""/axis/api/rest/entity/SFP/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSFPModel.java","1. Fill SFP data from NmsSFP.json into NMS cache CTFIFC_NMS_SFP via BGE endpoint: ""/axis/api/rest/entity/custom/SFP/bulkCreate?sessionId="" and attached data as RecordNmsSFP.java mapped from NmsSFP.json
2. Query if SFP is created via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
4. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
5. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
6. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y","CIF (Command Integration Framework) (Automated testing)","SFP should be created in Command when it is in NMS chache"," End-to-end test","Automated"
"C19735981","Verify that SFP from NMS cache will be updated in Command"," API","/axis/api/rest/entity/SFP/query?sessionId","SFP is found with updated ip-adress""10.122.77.05"" in Command","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists

- Test data:
    - SFP in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA"" (type of device master): NmsSFP.json
    - SFP in Command with same createLinkDeviceMaster=""EKJAG5VN1YBKEH"" and createLinkZone=""zoneElid"" and id = nmdId of NmsSFP and cSourceId = nmsInternalId but ip-adress=""10.122.77.05"" instead of ""10.122.77.02"": CommandSFP.json","Medium",""," Final","1. Fill SFP into Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/placeInZone?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SFP is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. Query if SFP is created via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

Expected Result:
SFP is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
3. Fill SFP data from NmsSFP.json into NMS cache CTFIFC_NMS_SFP via BGE endpoint: ""/axis/api/rest/entity/custom/SFP/bulkCreate?sessionId=""
and attached data as RecordNmsSFP.java mapped from NmsSFP.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

4. Query if SFP is created via BGE endpoint ""/axis/api/rest/entity/custom/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)

Expected Result:
SFP is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsSFP.java
5. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
6. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be an entry in delta table with action = UPDATE
7. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
8. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
SFP will be stored in Command STCDEV_SFP which should be checked via endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSFPModel.java","1. SFP is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. SFP is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
3. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

4. SFP is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsSFP.java
5. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
6. There will be an entry in delta table with action = UPDATE
7. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
8. SFP will be stored in Command STCDEV_SFP which should be checked via endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSFPModel.java","1. Fill SFP into Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/placeInZone?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
2. Query if SFP is created via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

3. Fill SFP data from NmsSFP.json into NMS cache CTFIFC_NMS_SFP via BGE endpoint: ""/axis/api/rest/entity/custom/SFP/bulkCreate?sessionId=""
and attached data as RecordNmsSFP.java mapped from NmsSFP.json
4. Query if SFP is created via BGE endpoint ""/axis/api/rest/entity/custom/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)

5. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
6. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
7. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
8. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y","CIF (Command Integration Framework) (Automated testing)","SFP should be updated in Command when it is in NMS chache"," End-to-end test","Automated"
"C19735982","Verify that SFP Type from NMS cache will be updated in Command"," API","/axis/api/rest/entity/SFP/query?sessionId","SFP is found with updated type=""???"" in Command","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists

????
- Test data:
    - SFP in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA"" (type of device master): NmsSFP.json
    - SFP in Command with same createLinkDeviceMaster=""EKJAG5VN1YBKEH"" and createLinkZone=""zoneElid"" and id = nmdId of NmsSFP and cSourceId = nmsInternalId but ip-adress=""10.122.77.05"" instead of ""10.122.77.02"": CommandSFP.json","Medium",""," Rework","1. Fill SFP into Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/placeInZone?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)

Expected Result:
SFP is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. Query if SFP is created via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

Expected Result:
SFP is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
3. Fill SFP data from NmsSFP.json into NMS cache CTFIFC_NMS_SFP via BGE endpoint: ""/axis/api/rest/entity/custom/SFP/bulkCreate?sessionId=""
and attached data as RecordNmsSFP.java mapped from NmsSFP.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

4. Query if campus is created via BGE endpoint ""/axis/api/rest/entity/custom/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)

Expected Result:
SFP is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsSFP.java
5. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
6. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be an entry in delta table with action = UPDATE
7. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
8. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
SFP will be stored in Command STCDEV_SFP which should be checked via endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSFPModel.java","1. SFP is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. SFP is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
3. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

4. SFP is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsSFP.java
5. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
6. There will be an entry in delta table with action = UPDATE
7. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
8. SFP will be stored in Command STCDEV_SFP which should be checked via endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSFPModel.java","1. Fill SFP into Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/placeInZone?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)

2. Query if SFP is created via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

3. Fill SFP data from NmsSFP.json into NMS cache CTFIFC_NMS_SFP via BGE endpoint: ""/axis/api/rest/entity/custom/SFP/bulkCreate?sessionId=""
and attached data as RecordNmsSFP.java mapped from NmsSFP.json
4. Query if campus is created via BGE endpoint ""/axis/api/rest/entity/custom/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)

5. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
6. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
7. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
8. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y","CIF (Command Integration Framework) (Automated testing)","SFP Type should be updated in Command when it is in NMS chache"," End-to-end test","Automated"
"C19735983","Verify that SFP will be deleted from Command"," API","/axis/api/rest/entity/SFP/query?sessionId","SFP is deleted from Command","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists

- Test data:
    - No such SFP in NMS cache: NmsSFP.json
    - SFP in Command: CommandSFP.json","Medium",""," Final","1. Fill SFP into Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/placeInZone?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)

Expected Result:
SFP is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. Query if SFP is created via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

Expected Result:
SFP is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
3. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
4. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be an entry in delta table with action = DELETE
5. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
6. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
SFP will be deleted from Command STCDEV_SFP which should be checked via endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSFPModel.java","1. SFP is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. SFP is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
3. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
4. There will be an entry in delta table with action = DELETE
5. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
6. SFP will be deleted from Command STCDEV_SFP which should be checked via endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSFPModel.java","1. Fill SFP into Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/placeInZone?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)

2. Query if SFP is created via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

3. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
4. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
5. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
6. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y","CIF (Command Integration Framework) (Automated testing)","SFP should be delted from Command because it's not in NMS cache"," End-to-end test","Automated"
"C19735984","Verify that there is no operation for SFP when planned but no data in NMS cache"," API","/axis/api/rest/entity/SFP/query?sessionId","SFP is still in planning position, nothing changed","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - No such SFP in NMS cache: NmsSFP.json
    - SFP in Command: CommandSFP.json","Medium",""," Final","1. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
2. Fill SFP into Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/placeInZone?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SFP is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
3. Query if SFP is created via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
SFP is there with planStatus=""PLANNED_CREATED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
4. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
5. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
6. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be no entry in delta table
7. Check if SFP is still there and in planned position via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSFPModel.java
Expected Result:
SFP is there","1. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
2. SFP is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
3. SFP is there with planStatus=""PLANNED_CREATED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
4. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
5. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
6. There will be no entry in delta table
7. SFP is there","1. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
2. Fill SFP into Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/placeInZone?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
3. Query if SFP is created via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
4. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
5. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
6. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
7. Check if SFP is still there and in planned position via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSFPModel.java","CIF (Command Integration Framework) (Automated testing)","SFP is planned to be created but there is no data coming from NMS cache so there will be no action"," End-to-end test","Automated"
"C19735985","Verify that SFP will be created when planned and SFP with same type and id in NMS cache"," API","/axis/api/rest/entity/SFP/query?sessionId","SFP is not in planning position anymore, is created in planned position","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - SFP in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA"" (type of device master): NmsSFP.json
    - SFP in Command with same createLinkDeviceMaster=""EKJAG5VN1YBKEH"" and createLinkZone=""zoneElid"" and id = nmdId of NmsSFP and cSourceId = nmsInternalId: CommandSFP.json","Medium",""," Final","1. Fill SFP data from NmsSFP.json into NMS cache CTFIFC_NMS_SFP via BGE endpoint: ""/axis/api/rest/entity/custom/SFP/bulkCreate?sessionId=""
and attached data as RecordNmsSFP.java mapped from NmsSFP.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
2. Query if SFP is created via BGE endpoint ""/axis/api/rest/entity/custom/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)

Expected Result:
SFP is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsSFP.java
3. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
4. Fill SFP into Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/placeInZone?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SFP is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
5. Query if SFP is created via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
SFP is there with planStatus=""PLANNED_CREATED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
6. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
7. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
8. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be entry in delta table with delta_case = PLANNED_CREATE and action = Apply Planning (Create)
9. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java

10. Check if SFP is created where position was planned via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSFPModel.java
Expected Result:
SFP is there and out of planning state","1. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
2. SFP is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsSFP.java
3. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
4. SFP is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
5. SFP is there with planStatus=""PLANNED_CREATED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
6. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
7. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
8. There will be entry in delta table with delta_case = PLANNED_CREATE and action = Apply Planning (Create)
9. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java

10. SFP is there and out of planning state","1. Fill SFP data from NmsSFP.json into NMS cache CTFIFC_NMS_SFP via BGE endpoint: ""/axis/api/rest/entity/custom/SFP/bulkCreate?sessionId=""
and attached data as RecordNmsSFP.java mapped from NmsSFP.json
2. Query if SFP is created via BGE endpoint ""/axis/api/rest/entity/custom/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)

3. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
4. Fill SFP into Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/placeInZone?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
5. Query if SFP is created via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
6. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
7. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
8. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
9. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
10. Check if SFP is created where position was planned via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSFPModel.java","CIF (Command Integration Framework) (Automated testing)","SFP is planned to be created and SFP with same id and type is in NMs cache so it will be created where planned"," End-to-end test","Automated"
"C19735986","Verify that SFP will be created with updated type when planned and SFP with same id but different type in NMS cache"," API","/axis/api/rest/entity/SFP/query?sessionId","SFP is not in planning position anymore, is created in planned position with updated type","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - Other Type here : SFP in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA"" (type of device master): NmsSFP.json
    - SFP in Command not with same createLinkDeviceMaster=""EKJAG5VN1YBKEH"" but with same createLinkZone=""zoneElid"" and id = nmdId of NmsSFP and cSourceId = nmsInternalId: CommandSFP.json","Medium",""," Rework","1. Fill SFP into Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/placeInZone?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SFP is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Query if SFP is created via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

Expected Result:
SFP is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
3. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
4. Fill SFP into Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/create?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SFP is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
5. Query if SFP is created via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
SFP is there with planStatus=""PLANNED_CREATED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
6. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
7. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
8. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be entry in delta table with delta_case = PLANNED_CREATE_BUT_WITH_DIFFERENT_TYPE and action = Update Type + Apply Planning (Create)
9. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
10. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java

11. Check if SFP is created where position was planned via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSFPModel.java
Expected Result:
SFP is there and out of planning state","1. SFP is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. SFP is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
3. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
4. SFP is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
5. SFP is there with planStatus=""PLANNED_CREATED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
6. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
7. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
8. There will be entry in delta table with delta_case = PLANNED_CREATE_BUT_WITH_DIFFERENT_TYPE and action = Update Type + Apply Planning (Create)
9. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
10. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java

11. SFP is there and out of planning state","1. Fill SFP into Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/placeInZone?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
2. Query if SFP is created via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

3. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
4. Fill SFP into Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/create?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
5. Query if SFP is created via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
6. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
7. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
8. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
9. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
10. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
11. Check if SFP is created where position was planned via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSFPModel.java","CIF (Command Integration Framework) (Automated testing)","SFP is planned to be created and SFP with same id but different type is in NMs cache so it will be created but with different type"," End-to-end test","Automated"
"C19735987","Verify that there is no operation for SFP when planned delete but SFP is still in NMS cache"," API","/axis/api/rest/entity/SFP/query?sessionId","SFP is still in planning position with planStatus=""PLANNED_DELETED"", nothing changed","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - SFP in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA"" (type of device master): NmsSFP.json
    - SFP in Command with same createLinkDeviceMaster=""EKJAG5VN1YBKEH"" and createLinkZone=""zoneElid"" and id = nmdId of NmsSFP and cSourceId = nmsInternalId: CommandSFP.json","Medium",""," Final","1. Fill SFP into Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/placeInZone?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SFP is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Query if SFP is created via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
SFP is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
3. Fill SFP data from NmsSFP.json into NMS cache CTFIFC_NMS_SFP via BGE endpoint: ""/axis/api/rest/entity/custom/SFP/bulkCreate?sessionId=""
and attached data as RecordNmsSFP.java mapped from NmsSFP.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. Query if SFP is created via BGE endpoint ""/axis/api/rest/entity/custom/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
Expected Result:
SFP is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsSFP.java
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. Delete SFP from Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/delete?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SFPs is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
7. Query if SFP is deleted via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
SFP is there with planStatus=""PLANNED_DELETED""
![](index.SFPo CommandSFPModel.java
8. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
9. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
10. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be no entry in delta table
11. Check if SFP is still there and in planned position via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSFPModel.java
Expected Result:
SFP is there with planStatus=""PLANNED_DELETED""","1. SFP is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. SFP is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
3. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. SFP is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsSFP.java
5. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. SFPs is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
7. SFP is there with planStatus=""PLANNED_DELETED""
![](index.SFPo CommandSFPModel.java
8. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
9. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
10. There will be no entry in delta table
11. SFP is there with planStatus=""PLANNED_DELETED""","1. Fill SFP into Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/placeInZone?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
2. Query if SFP is created via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Fill SFP data from NmsSFP.json into NMS cache CTFIFC_NMS_SFP via BGE endpoint: ""/axis/api/rest/entity/custom/SFP/bulkCreate?sessionId=""
and attached data as RecordNmsSFP.java mapped from NmsSFP.json
4. Query if SFP is created via BGE endpoint ""/axis/api/rest/entity/custom/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
6. Delete SFP from Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/delete?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
7. Query if SFP is deleted via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
8. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
9. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
10. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
11. Check if SFP is still there and in planned position via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSFPModel.java","CIF (Command Integration Framework) (Automated testing)","SFP is planned to be deleted but there is the SFP coming from NMS cache so there will be no action"," End-to-end test","Automated"
"C19735988","Verify that SFP is deleted when planned delete and no SFP in NMS cache"," API","/axis/api/rest/entity/SFP/query?sessionId","SFP is deleted from Command","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - No such SFP in NMS cache: NmsSFP.json
    - SFP in Command: CommandSFP.json","Medium",""," Final","1. Fill SFP into Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/placeInZone?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SFP is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Query if SFP is created via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
SFP is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
3. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
4. Delete SFP from Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/delete?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SFP is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
5. Query if SFP is deleted via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
SFP is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
6. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
7. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
8. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be entry in delta table with delta_case = PLANNED_DELETE and action = Apply Planning (Delete)
9. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
10. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
SFP will be stored in Command STCDEV_SFP which should be checked via endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSFPModel.java
11. Check if SFP is deleted from Command via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
Expected Result:
The SFP won't be in the returnData","1. SFP is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. SFP is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
3. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
4. SFP is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
5. SFP is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
6. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
7. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
8. There will be entry in delta table with delta_case = PLANNED_DELETE and action = Apply Planning (Delete)
9. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
10. SFP will be stored in Command STCDEV_SFP which should be checked via endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSFPModel.java
11. The SFP won't be in the returnData","1. Fill SFP into Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/placeInZone?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
2. Query if SFP is created via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
4. Delete SFP from Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/delete?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
5. Query if SFP is deleted via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
6. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
7. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
8. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
9. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
10. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
11. Check if SFP is deleted from Command via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java","CIF (Command Integration Framework) (Automated testing)","SFP is planned to be deleted and there is no SFP in NMS chache so it will be deleted"," End-to-end test","Automated"
"C19735989","Verify that SFP will be deleted and new SFP will be created when another SFP is in NMS cache"," API","/axis/api/rest/entity/SFP/query?sessionId","SFP is deleted and other one created","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - SFP in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA"" (type of device master): NmsSFP.json
    - SFP in Command not with same createLinkDeviceMaster=""EKJAG5VN1YBKEH"" and not createLinkZone=""zoneElid"" and not id = nmdId of NmsSFP and not cSourceId = nmsInternalId: CommandSFP.json","Medium",""," Rework","1. Fill SFP into Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/placeInZone?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SFP is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Query if SFP is created via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
SFP is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
3. Fill SFP data from NmsSFP.json into NMS cache CTFIFC_NMS_SFP via BGE endpoint: ""/axis/api/rest/entity/custom/SFP/bulkCreate?sessionId=""
and attached data as RecordNmsSFP.java mapped from NmsSFP.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. Query if SFP is created via BGE endpoint ""/axis/api/rest/entity/custom/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
Expected Result:
SFP is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsSFP.java
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. Delete SFP from Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/delete?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SFP is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
7. Query if SFP is deleted via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
SFP is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
8. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
9. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
10. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will two entries in delta Table:
- action=""Apply Planning (Delete)"" and delta=""PLANNED_DELETE_WITH_CREATE""
- action=""Create new with Type b"" and delta=""PLANNED_DELETE_WITH_CREATE""
11. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
12. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST
CALCULATE_DELTA= N
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
SFP will be stored in Command STCDEV_SFP which should be checked via endpoint ""/axis/api/rest/entity/SFP/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSFPModel.java
13. Check if first SFP is deleted and second one created via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSFPModel.java
Expected Result:
SFP is created and other one deleted","1. SFP is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. SFP is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
3. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. SFP is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsSFP.java
5. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. SFP is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
7. SFP is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
8. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
9. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
10. There will two entries in delta Table:
- action=""Apply Planning (Delete)"" and delta=""PLANNED_DELETE_WITH_CREATE""
- action=""Create new with Type b"" and delta=""PLANNED_DELETE_WITH_CREATE""
11. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
12. SFP will be stored in Command STCDEV_SFP which should be checked via endpoint ""/axis/api/rest/entity/SFP/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSFPModel.java
13. SFP is created and other one deleted","1. Fill SFP into Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/placeInZone?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
2. Query if SFP is created via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Fill SFP data from NmsSFP.json into NMS cache CTFIFC_NMS_SFP via BGE endpoint: ""/axis/api/rest/entity/custom/SFP/bulkCreate?sessionId=""
and attached data as RecordNmsSFP.java mapped from NmsSFP.json
4. Query if SFP is created via BGE endpoint ""/axis/api/rest/entity/custom/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
6. Delete SFP from Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/delete?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
7. Query if SFP is deleted via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
8. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
9. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
10. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
11. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
12. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST
CALCULATE_DELTA= N
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
13. Check if first SFP is deleted and second one created via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSFPModel.java","CIF (Command Integration Framework) (Automated testing)","SFP is planned to be deleted and there is another SFP coming from NMS cache so the first SFP will be deleted and the second will be created"," End-to-end test","Automated"
"C19735990","Verify that there is no operation for SFP when planned delete but SFP is still in NMS cache and planned create without SFP in NMS cache"," API","/axis/api/rest/entity/SFP/query?sessionId","SFP is are in planning position, one with planStatus=""PLANNED_DELETED"", one with planStatus=""PLANNED_CREATED""","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - SFP in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA""(type of device master) and id A: NmsSFP.json
    - SFP in Command 
        - One with same createLinkDeviceMaster=""EKJAG5VN1YBKEH"" and createLinkZone=""zoneElid"" and id = nmdId of NmsSFP and cSourceId = nmsInternalId like SFP with id A: CommandSFP.json
        - One not with same values as id A: CommandSFP.json","Medium",""," Rework","1. Fill SFP A into Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/placeInZone?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SFP A is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Query if SFP is created via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
SFP A is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
3. Fill SFP A data from NmsSFP.json into NMS cache CTFIFC_NMS_SFP via BGE endpoint: ""/axis/api/rest/entity/custom/SFP/bulkCreate?sessionId=""
and attached data as RecordNmsSFP.java mapped from NmsSFP.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. Query if SFP is created via BGE endpoint ""/axis/api/rest/entity/custom/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
Expected Result:
SFP A is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsSFP.java
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. Delete SFP A from Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/delete?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SFP is deleted, answer can be mapped to BgeCreateObjectResponse.java
7. Query if SFP is deleted via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
SFP is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
8. Create SFP B in Command table STCDEV_SFP via BGE endpoint ""/axis/api/rest/entity/SFP/placeInZone?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SFP is created, answer can be mapped to BgeCreateObjectResponse.java
9. Query if SFP is created via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
Expected Result:
SFP is there with planStatus=""PLANNED_CREATED""
10. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
11. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
12. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be no entry in delta table
13. Check if SFP are still there and in planned position via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSFPodel.java
Expected Result:
SFP are there","1. SFP A is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. SFP A is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
3. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. SFP A is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsSFP.java
5. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. SFP is deleted, answer can be mapped to BgeCreateObjectResponse.java
7. SFP is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
8. SFP is created, answer can be mapped to BgeCreateObjectResponse.java
9. SFP is there with planStatus=""PLANNED_CREATED""
10. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
11. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
12. There will be no entry in delta table
13. SFP are there","1. Fill SFP A into Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/placeInZone?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
2. Query if SFP is created via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Fill SFP A data from NmsSFP.json into NMS cache CTFIFC_NMS_SFP via BGE endpoint: ""/axis/api/rest/entity/custom/SFP/bulkCreate?sessionId=""
and attached data as RecordNmsSFP.java mapped from NmsSFP.json
4. Query if SFP is created via BGE endpoint ""/axis/api/rest/entity/custom/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
6. Delete SFP A from Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/delete?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
7. Query if SFP is deleted via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
8. Create SFP B in Command table STCDEV_SFP via BGE endpoint ""/axis/api/rest/entity/SFP/placeInZone?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
9. Query if SFP is created via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
10. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
11. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
12. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
13. Check if SFP are still there and in planned position via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSFPodel.java","CIF (Command Integration Framework) (Automated testing)","SFP is planned to be deleted but there is the SFP coming from NMS cache so there will be no action and another SFP is planned to be created but there will also be no action because it is not in NMS cache."," End-to-end test","Automated"
"C19735991","Verify that SFP is deleted when planned delete and SFP not in NMS cache and other SFP is created when planned create and SFP in NMS cache"," API","/axis/api/rest/entity/SFP/query?sessionId","SFP A is created, SFP B is deleted","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - SFP in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA""(type of device master) and id A: NmsSFP.json
    - SFP in Command 
        - One with same createLinkDeviceMaster=""EKJAG5VN1YBKEH"" and createLinkZone=""zoneElid"" and id = nmdId of NmsSFP and cSourceId = nmsInternalId like SFP with id A: CommandSFP.json
        - One not with same values as id A: CommandSFP.json","Medium",""," Rework","1. Fill SFP B into Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/placeInZone?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SFP B is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Query if SFP B is created via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
SFP B is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
3. Fill SFP A data from NmsSFP.json into NMS cache CTFIFC_NMS_SFP via BGE endpoint: ""/axis/api/rest/entity/custom/SFP/bulkCreate?sessionId=""
and attached data as RecordNmsSFP.java mapped from NmsSFP.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. Query if SFP is created via BGE endpoint ""/axis/api/rest/entity/custom/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
Expected Result:
SFP A is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsSFP.java
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. Delete SFP B from Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/delete?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SFP is deleted, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
7. Query if SFP B is deleted via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
SFP is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
8. Create SFP A in Command table STCDEV_SFP via BGE endpoint ""/axis/api/rest/entity/SFP/placeInZone?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SFP A is created, answer can be mapped to BgeCreateObjectResponse.java
9. Query if SFP A is created via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
Expected Result:
SFP A is there with planStatus=""PLANNED_CREATED""
10. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
11. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
12. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be two entries in delta table:
- action=""Apply Planning (Delete)"" and delta_case=""PLANNED_DELETE_ WITH_PLANNED_CREATE""
- action=""Apply Planning (Create)"" and delta_case=""PLANNED_DELETE_ WITH_PLANNED_CREATE"" 
13. Set delta table entries approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entries will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
14. 	
Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST
CALCULATE_DELTA= N
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
15. Check if SFP A is in Command and if SFP B is not in Command anymore via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSFPModel.java
Expected Result:
SFP A is there, SFP B is gone","1. SFP B is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. SFP B is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
3. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. SFP A is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsSFP.java
5. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. SFP is deleted, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
7. SFP is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
8. SFP A is created, answer can be mapped to BgeCreateObjectResponse.java
9. SFP A is there with planStatus=""PLANNED_CREATED""
10. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
11. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
12. There will be two entries in delta table:
- action=""Apply Planning (Delete)"" and delta_case=""PLANNED_DELETE_ WITH_PLANNED_CREATE""
- action=""Apply Planning (Create)"" and delta_case=""PLANNED_DELETE_ WITH_PLANNED_CREATE"" 
13. The entries will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
14. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
15. SFP A is there, SFP B is gone","1. Fill SFP B into Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/placeInZone?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
2. Query if SFP B is created via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Fill SFP A data from NmsSFP.json into NMS cache CTFIFC_NMS_SFP via BGE endpoint: ""/axis/api/rest/entity/custom/SFP/bulkCreate?sessionId=""
and attached data as RecordNmsSFP.java mapped from NmsSFP.json
4. Query if SFP is created via BGE endpoint ""/axis/api/rest/entity/custom/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
6. Delete SFP B from Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/delete?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
7. Query if SFP B is deleted via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
8. Create SFP A in Command table STCDEV_SFP via BGE endpoint ""/axis/api/rest/entity/SFP/placeInZone?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
9. Query if SFP A is created via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
10. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
11. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
12. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
13. Set delta table entries approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
14. 	
Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST
CALCULATE_DELTA= N
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
15. Check if SFP A is in Command and if SFP B is not in Command anymore via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSFPModel.java","CIF (Command Integration Framework) (Automated testing)","SFP is planned to be deleted and there is no SFP in NMS cache so it will be deleted and another SFP is planned to be created and the corresponding SFP in in NMS cache so it can be created."," End-to-end test","Automated"
"C19735992","Verify that SFP is deleted when planned delete and SFP not in NMS cache and other SFP is created with updated type when planned create and SFP with same id in NMS cache"," API","/axis/api/rest/entity/SFP/query?sessionId","SFP A is created with another type, SFP B is deleted","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - SFP in NMS cache with zoneId concatenated of campus|building|floor|room and commandType ""3HE09196AA""(type of device master) and id A: NmsSFP.json
    - SFP in Command 
        - One not with same createLinkDeviceMaster but with same createLinkZone=""zoneElid"" and id = nmdId of NmsSFP and cSourceId = nmsInternalId like SFP with id A: CommandSFP.json
        - One not with same values as id A: CommandSFP.json","Medium",""," Rework","1. Fill SFP B into Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/placeInZone?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SFP B is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Query if SFP B is created via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
SFP B is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
3. Fill SFP A data from NmsSFP.json into NMS cache CTFIFC_NMS_SFP via BGE endpoint: ""/axis/api/rest/entity/custom/SFP/bulkCreate?sessionId=""
and attached data as RecordNmsSFP.java mapped from NmsSFP.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. Query if SFP is created via BGE endpoint ""/axis/api/rest/entity/custom/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
Expected Result:
SFP A is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsSFP.java
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. Delete SFP B from Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/delete?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SFP is deleted, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
7. Query if SFP B is deleted via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
SFP is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
8. Create SFP A in Command table STCDEV_SFP via BGE endpoint ""/axis/api/rest/entity/SFP/placeInZone?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SFP A is created, answer can be mapped to BgeCreateObjectResponse.java
9. Query if SFP A is created via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
Expected Result:
SFP A is there with planStatus=""PLANNED_CREATED""
10. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
11. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
12. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be two entries in delta table:
- action=""Apply Planning (Delete)"" and delta_case=""PLANNED_DELETE_WITH_PLANNED_CREATE_BUT_WITH_DIFFERENT_TYPE""
- action=""Update Type + Apply Planning (Create)"" and delta_case=""PLANNED_DELETE_WITH_PLANNED_CREATE_BUT_WITH_DIFFERENT_TYPE"" 
13. Set delta table entries approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entries will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
14. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST
CALCULATE_DELTA= N
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
15. Check if SFP A is in Command but with different type and if SFP B is not in Command anymore via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSFPModel.java
Expected Result:
SFP A is there with another type, SFP B is gone","1. SFP B is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. SFP B is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
3. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java
4. SFP A is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsSFP.java
5. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
6. SFP is deleted, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
7. SFP is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
8. SFP A is created, answer can be mapped to BgeCreateObjectResponse.java
9. SFP A is there with planStatus=""PLANNED_CREATED""
10. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
11. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
12. There will be two entries in delta table:
- action=""Apply Planning (Delete)"" and delta_case=""PLANNED_DELETE_WITH_PLANNED_CREATE_BUT_WITH_DIFFERENT_TYPE""
- action=""Update Type + Apply Planning (Create)"" and delta_case=""PLANNED_DELETE_WITH_PLANNED_CREATE_BUT_WITH_DIFFERENT_TYPE"" 
13. The entries will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
14. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
15. SFP A is there with another type, SFP B is gone","1. Fill SFP B into Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/placeInZone?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
2. Query if SFP B is created via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Fill SFP A data from NmsSFP.json into NMS cache CTFIFC_NMS_SFP via BGE endpoint: ""/axis/api/rest/entity/custom/SFP/bulkCreate?sessionId=""
and attached data as RecordNmsSFP.java mapped from NmsSFP.json
4. Query if SFP is created via BGE endpoint ""/axis/api/rest/entity/custom/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)
5. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
6. Delete SFP B from Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/delete?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
7. Query if SFP B is deleted via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
8. Create SFP A in Command table STCDEV_SFP via BGE endpoint ""/axis/api/rest/entity/SFP/placeInZone?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
9. Query if SFP A is created via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
10. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
11. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
12. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
13. Set delta table entries approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
14. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST
CALCULATE_DELTA= N
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
15. Check if SFP A is in Command but with different type and if SFP B is not in Command anymore via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSFPModel.java","CIF (Command Integration Framework) (Automated testing)","SFP is planned to be deleted and there is no SFP in NMS cache so it will be deleted and another SFP is planned to be created and the corresponding SFP with same id but different type is in NMS cache so it can be created."," End-to-end test","Automated"
"C19735993","Verify that SFP is deleted when planned delete and SFP not in NMS cache and no operation when SFP is planned create but no SFP NMS cache"," API","/axis/api/rest/entity/SFP/query?sessionId","SFP A is deleted, SFP B is not created with planStatus=""PLANNED_CREATED""","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull
- Zone exists
- Device Master with elid ""EKJAG5VN1YBKEH"" exists
- Planning Protocol exists

- Test data:
    - No such SFP in NMS cache: NmsSFP.json
    - Two SFP in Command: CommandSFP.json","Medium",""," Rework","1. Fill SFP A into Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/placeInZone?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SFP A is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. Query if SFP A is created via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
SFP A is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
3. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
4. Delete SFP A from Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/delete?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SFP A is deleted, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
5. Query if SFP A is deleted via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
SFP A is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
6. Create SFP B in Command table STCDEV_SFP via BGE endpoint ""/axis/api/rest/entity/SFP/placeInZone?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
Expected Result:
SFP B is created, answer can be mapped to BgeCreateObjectResponse.java
7. Query if SFP B is created via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
Expected Result:
SFP B is there with planStatus=""PLANNED_CREATED""
8. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
Expected Result:
Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
9. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
10. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be this entries in delta table: 
action=""Apply Planning (Delete)"" and delta_case=""PLANNED_DELETE""
11. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
12. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST
CALCULATE_DELTA= N
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
13. Check if SFP A is deleted from Command and if SFP B is in Command in planned create state via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSFPModel.java
Expected Result:
SFP A is gone, SFP B is in planned create state","1. SFP A is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
2. SFP A is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
3. Planning Protocol will be activated with errorCode=0 in response and returnData which can be mapped to CommandPlanningProtocolModel.java
4. SFP A is deleted, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java
5. SFP A is there with planStatus=""PLANNED_DELETED""
![](index.php?/attachments/get/12363)
Can be mapped to CommandSFPModel.java
6. SFP B is created, answer can be mapped to BgeCreateObjectResponse.java
7. SFP B is there with planStatus=""PLANNED_CREATED""
8. Planning Protocol will be deactivated with errorCode=0 in response and empty returnData
9. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
10. There will be this entries in delta table: 
action=""Apply Planning (Delete)"" and delta_case=""PLANNED_DELETE""
11. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
12. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
13. SFP A is gone, SFP B is in planned create state","1. Fill SFP A into Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/placeInZone?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
2. Query if SFP A is created via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Activate planning protocol via BGE endpoint ""/axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
4. Delete SFP A from Command table STCDEV_SFP via BGE endpoint ""/api/rest/entity/SFP/delete?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
5. Query if SFP A is deleted via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
6. Create SFP B in Command table STCDEV_SFP via BGE endpoint ""/axis/api/rest/entity/SFP/placeInZone?sessionId="" and data from CommandSFP.json mapped to CommandSFPModel.java like:
![](index.php?/attachments/get/12360)
7. Query if SFP B is created via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java
8. Deactivate planning protocol via BGE endpoint ""axis/api/rest/entity/planningProtocol/{elidProtocol}/deactivate?sessionId="" and empty restrictions BgeRestrictionsModel.java
9. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_HARDWARE_DATA = Y
10. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
11. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
12. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST
CALCULATE_DELTA= N
LOAD_HARDWARE_DATA = Y
SYNCHRONIZE = Y
13. Check if SFP A is deleted from Command and if SFP B is in Command in planned create state via BGE endpoint ""/axis/api/rest/entity/SFP/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandSFPModel.java","CIF (Command Integration Framework) (Automated testing)","SFP is planned to be deleted and there is no SFP in NMS cache so it will be deleted and another SFP is planned to be created but there is no SFP in NMS cache so there will be no action."," End-to-end test","Automated"
"C19093834","Real: DELETE: (TM= , SM= , RM= , AA= ): Delete","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19093835","Real: CREATE: (TM= , SM= , RM= , AA= ): Create","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19093836","Real: UPDATE: (TM=Y, SM=Y, RM=Y, AA= ): Update attributes","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19093837","Real: RECREATE: (TM=Y, SM=Y, RM=N, AA= ): Recreate Service","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19093840","Real: RECREATE: (TM=Y, SM=N, RM=N, AA= ):Recreate Service","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19093841","Real: RECREATE: (TM=N, SM=Y, RM=N, AA= ):Recreate Service","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19093843","Real: RECREATE: (TM=N, SM=N, RM=N, AA= ): Recreate Service","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19093855","Real: DELETE: (TM= , SM= , RM= , AA= ): Delete","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19093856","Real: CREATE: (TM= , SM= , RM= , AA= ): Create","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19093857","Real: UPDATE: (TM=Y, SM=Y, RM=Y, AA= ): Update attributes","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19155640","Real: DELETE: (TM= , SM= , RM= , AA= ): Delete","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19155641","Real: CREATE: (TM= , SM= , RM= , AA= ): Create","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19155642","Real: UPDATE: (TM=Y, SM=Y, RM=Y, AA= ): Update attributes","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19155643","Real: DELETE: (TM= , SM= , RM= , AA= ): Delete","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19155644","Real: CREATE: (TM= , SM= , RM= , AA= ): Create","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19155645","Real: UPDATE: (TM=Y, SM=Y, RM=Y, AA= ): Update attributes","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19155655","Real: DELETE: (TM= , SM= , RM= , AA= ): Delete","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19155656","Real: CREATE: (TM= , SM= , RM= , AA= ): Create","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19155657","Real: UPDATE: (TM=Y, SM=Y, RM=Y, AA= ): Update attributes","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19093939","Real: DELETE: (TM= , SM= , RM= , AA= ): Delete","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19093940","Real: CREATE: (TM= , SM= , RM= , AA= ): Create","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19093941","Real: UPDATE: (TM=Y, SM=Y, RM=Y, AA= ): Update attributes","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19093942","Real: RECREATE: (TM=Y, SM=Y, RM=N, AA= ): Recreate Service","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19093945","Real: RECREATE: (TM=Y, SM=N, RM=N, AA= ):Recreate Service","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19093946","Real: RECREATE: (TM=N, SM=Y, RM=N, AA= ):Recreate Service","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19093948","Real: RECREATE: (TM=N, SM=N, RM=N, AA= ): Recreate Service","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19155652","Real: DELETE: (TM= , SM= , RM= , AA= ): Delete","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19155653","Real: CREATE: (TM= , SM= , RM= , AA= ): Create","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19155654","Real: UPDATE: (TM=Y, SM=Y, RM=Y, AA= ): Update attributes","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19155646","Real: DELETE: (TM= , SM= , RM= , AA= ): Delete","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19155647","Real: CREATE: (TM= , SM= , RM= , AA= ): Create","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19155648","Real: UPDATE: (TM=Y, SM=Y, RM=Y, AA= ): Update attributes","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19155649","Real: DELETE: (TM= , SM= , RM= , AA= ): Delete","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19155650","Real: CREATE: (TM= , SM= , RM= , AA= ): Create","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19155651","Real: UPDATE: (TM=Y, SM=Y, RM=Y, AA= ): Update attributes","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19147215","Verify that Campus in NMS cache will be created in Command"," API","/axis/api/rest/entity/campus/query?sessionId","Campus is found in Command","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull

- Test data:
    - Campus in NMS cache: NmsCampus.json
    - no such campus in Command: CommandCampus.json","Medium",""," Ready for review","1. Fill campus data from NmsCampus.json into NMS cache CTFIFC_NMS_CAMPUS via BGE endpoint: ""/axis/api/rest/entity/custom/campus/bulkCreate?sessionId="" and attached data as RecordNmsCampus.java mapped from NmsCampus.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

2. Query if campus is created via BGE endpoint ""/axis/api/rest/entity/campus/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
Campus is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandCampusModel.java
3. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_ZONE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
4. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be an entry in delta table with action = CREATE
5. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
6. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_ZONE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Campus will be stored in Command STCCBA_CAMPUS which should be checked via endpoint "" ""/axis/api/rest/entity/campus/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandCampusModel.java","1. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

2. Campus is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandCampusModel.java
3. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
4. There will be an entry in delta table with action = CREATE
5. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
6. Campus will be stored in Command STCCBA_CAMPUS which should be checked via endpoint "" ""/axis/api/rest/entity/campus/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandCampusModel.java","1. Fill campus data from NmsCampus.json into NMS cache CTFIFC_NMS_CAMPUS via BGE endpoint: ""/axis/api/rest/entity/custom/campus/bulkCreate?sessionId="" and attached data as RecordNmsCampus.java mapped from NmsCampus.json
2. Query if campus is created via BGE endpoint ""/axis/api/rest/entity/campus/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_ZONE_DATA = Y
4. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
5. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
6. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_ZONE_DATA = Y
SYNCHRONIZE = Y","CIF (Command Integration Framework) (Automated testing)","Campus should be created in Command when it is in NMS chache"," End-to-end test","Automated"
"C19640275","Verify that Campus from NMS cache will be updated in Command"," API","/axis/api/rest/entity/campus/query?sessionId","Campus is found with updated location ""Berlin"" in Command","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull

- Test data:
    - Campus in NMS cache with location=""Ellwangen"": NmsCampus.json
    - Campus in Command with same id as nmdId of NmsCampus and cSourceId = nmsInternalId but location=""Berlin"": CommandCampus.json","Medium",""," Ready for review","1. Fill campus into Command table STCCBA_CAMPUS via BGE endpoint ""/api/rest/entity/campus/create?sessionId="" and data from CommandCampus.json mapped to CommandCampusModel.java like:
![](index.php?/attachments/get/12360)

Expected Result:
Campus is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. Query if campus is created via BGE endpoint ""/axis/api/rest/entity/campus/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

Expected Result:
Campus is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandCampusModel.java
3. Fill campus data from NmsCampus.json into NMS cache CTFIFC_NMS_CAMPUS via BGE endpoint: ""/axis/api/rest/entity/custom/campus/bulkCreate?sessionId=""
and attached data as RecordNmsCampus.java mapped from NmsCampus.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

4. Query if campus is created via BGE endpoint ""/axis/api/rest/entity/custom/campus/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)

Expected Result:
Campus is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsCampus.java
5. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_ZONE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
6. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be an entry in delta table with action = UPDATE
7. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
8. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_ZONE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Campus will be stored in Command STCCBA_CAMPUS which should be checked via endpoint ""/axis/api/rest/entity/campus/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandCampusModel.java","1. Campus is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. Campus is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandCampusModel.java
3. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

4. Campus is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsCampus.java
5. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
6. There will be an entry in delta table with action = UPDATE
7. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
8. Campus will be stored in Command STCCBA_CAMPUS which should be checked via endpoint ""/axis/api/rest/entity/campus/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandCampusModel.java","1. Fill campus into Command table STCCBA_CAMPUS via BGE endpoint ""/api/rest/entity/campus/create?sessionId="" and data from CommandCampus.json mapped to CommandCampusModel.java like:
![](index.php?/attachments/get/12360)

2. Query if campus is created via BGE endpoint ""/axis/api/rest/entity/campus/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

3. Fill campus data from NmsCampus.json into NMS cache CTFIFC_NMS_CAMPUS via BGE endpoint: ""/axis/api/rest/entity/custom/campus/bulkCreate?sessionId=""
and attached data as RecordNmsCampus.java mapped from NmsCampus.json
4. Query if campus is created via BGE endpoint ""/axis/api/rest/entity/custom/campus/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)

5. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_ZONE_DATA = Y
6. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
7. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
8. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_ZONE_DATA = Y
SYNCHRONIZE = Y","CIF (Command Integration Framework) (Automated testing)","Campus should be updated in Command when it is in NMS chache"," End-to-end test","Automated"
"C19640281","Verify that Campus  will be deleted from Command"," API","/axis/api/rest/entity/campus/query?sessionId","Campus is deleted from Command","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull

- Test data:
    - No such Campus in NMS cache: NmsCampus.json
    - Campus in Command: CommandCampus.json","Medium",""," Ready for review","1. Fill campus into Command table STCCBA_CAMPUS via BGE endpoint ""/api/rest/entity/campus/create?sessionId="" and data from CommandCampus.json mapped to CommandCampusModel.java like:
![](index.php?/attachments/get/12360)

Expected Result:
Campus is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. Query if campus is created via BGE endpoint ""/axis/api/rest/entity/campus/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

Expected Result:
Campus is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandCampusModel.java
3. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_ZONE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
4. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be an entry in delta table with action = DELETE
5. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
6. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_ZONE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Campus will be deleted from Command STCCBA_CAMPUS which should be checked via endpoint ""/axis/api/rest/entity/campus/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandCampusModel.java","1. Campus is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. Campus is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandCampusModel.java
3. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
4. There will be an entry in delta table with action = DELETE
5. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
6. Campus will be deleted from Command STCCBA_CAMPUS which should be checked via endpoint ""/axis/api/rest/entity/campus/query?sessionId=""  with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandCampusModel.java","1. Fill campus into Command table STCCBA_CAMPUS via BGE endpoint ""/api/rest/entity/campus/create?sessionId="" and data from CommandCampus.json mapped to CommandCampusModel.java like:
![](index.php?/attachments/get/12360)

2. Query if campus is created via BGE endpoint ""/axis/api/rest/entity/campus/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

3. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_ZONE_DATA = Y
4. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
5. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
6. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_ZONE_DATA = Y
SYNCHRONIZE = Y","CIF (Command Integration Framework) (Automated testing)","Campus should be delted from Command because it's not in NMS cache"," End-to-end test","Automated"
"C19640272","Verify that Building in NMS cache will be created in Command"," API","/axis/api/rest/entity/building/query?sessionId","Building is found in Command","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull

- Test data:
    - Building in NMS cache with campusNmsId filled with nmsId from previously created campus: NmsBuilding.json
    - no such building in Command: CommandBuilding.json","Medium",""," Ready for review","1. Fill building data from NmsBuilding.json into NMS cache CTFIFC_NMS_BUILDING via BGE endpoint: ""/axis/api/rest/entity/custom/building/bulkCreate?sessionId="" and attached data as RecordNmsBuilding.java mapped from NmsBuilding.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

2. Query if building is created via BGE endpoint ""/axis/api/rest/entity/building/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
Building is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandBuildingModel.java
3. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_ZONE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
4. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be an entry in delta table with action = CREATE
5. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
6. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_ZONE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Building will be stored in Command STCCBA_BUILDING which should be checked via endpoint ""/axis/api/rest/entity/building/query?sessionId="" and mapped response to CommandBuildingModel.java","1. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

2. Building is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandBuildingModel.java
3. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
4. There will be an entry in delta table with action = CREATE
5. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
6. Building will be stored in Command STCCBA_BUILDING which should be checked via endpoint ""/axis/api/rest/entity/building/query?sessionId="" and mapped response to CommandBuildingModel.java","1. Fill building data from NmsBuilding.json into NMS cache CTFIFC_NMS_BUILDING via BGE endpoint: ""/axis/api/rest/entity/custom/building/bulkCreate?sessionId="" and attached data as RecordNmsBuilding.java mapped from NmsBuilding.json
2. Query if building is created via BGE endpoint ""/axis/api/rest/entity/building/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_ZONE_DATA = Y
4. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
5. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
6. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_ZONE_DATA = Y
SYNCHRONIZE = Y","CIF (Command Integration Framework) (Automated testing)","Building should be created in Command when it is in NMS chache"," End-to-end test","Automated"
"C19640278","Verify that Building from NMS cache will be updated in Command"," API","/axis/api/rest/entity/building/query?sessionId","Building is found with updated description ""Updated building for automated testing"" in Command","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull

- Test data:
    - Building in NMS cache with description=""Building for automated testing"": NmsCampus.json
    - Building in Command with same id as nmsId of NmsBuilding and cSourceId = nmsInternalId but description=""Updated building for automated testing"": CommandBuilding.json","Medium",""," Ready for review","1. Fill Building into Command table STCCBA_BUILDING via BGE endpoint ""/api/rest/entity/building/create?sessionId="" and data from CommandBuilding.json mapped to CommandBuildingModel.java like:
![](index.php?/attachments/get/12360)

Expected Result:
Building is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. Query if Building is created via BGE endpoint ""/axis/api/rest/entity/building/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

Expected Result:
Building is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandBuildingModel.java
3. Fill Building data from NmsBuilding.json into NMS cache CTFIFC_NMS_BUILDING via BGE endpoint: ""/axis/api/rest/entity/custom/building/bulkCreate?sessionId=""
and attached data as RecordNmsBuilding.java mapped from NmsBuilding.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

4. Query if Building is created via BGE endpoint ""/axis/api/rest/entity/custom/building/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)

Expected Result:
Building is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsBuilding.java
5. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_ZONE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
6. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be an entry in delta table with action = UPDATE
7. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
8. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_ZONE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Building will be stored in Command STCCBA_BUILDING which should be checked via endpoint ""/axis/api/rest/entity/building/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandBuildingModel.java","1. Building is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. Building is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandBuildingModel.java
3. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

4. Building is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsBuilding.java
5. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
6. There will be an entry in delta table with action = UPDATE
7. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
8. Building will be stored in Command STCCBA_BUILDING which should be checked via endpoint ""/axis/api/rest/entity/building/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandBuildingModel.java","1. Fill Building into Command table STCCBA_BUILDING via BGE endpoint ""/api/rest/entity/building/create?sessionId="" and data from CommandBuilding.json mapped to CommandBuildingModel.java like:
![](index.php?/attachments/get/12360)

2. Query if Building is created via BGE endpoint ""/axis/api/rest/entity/building/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

3. Fill Building data from NmsBuilding.json into NMS cache CTFIFC_NMS_BUILDING via BGE endpoint: ""/axis/api/rest/entity/custom/building/bulkCreate?sessionId=""
and attached data as RecordNmsBuilding.java mapped from NmsBuilding.json
4. Query if Building is created via BGE endpoint ""/axis/api/rest/entity/custom/building/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)

5. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_ZONE_DATA = Y
6. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
7. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
8. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_ZONE_DATA = Y
SYNCHRONIZE = Y","CIF (Command Integration Framework) (Automated testing)","Building should be updated in Command when it is in NMS chache"," End-to-end test","Automated"
"C19640282","Verify that Building will be deleted from Command"," API","/axis/api/rest/entity/building/query?sessionId","Building is deleted from Command","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull

- Test data:
    - No such building in NMS cache: NmsCampus.json
    - Building in Command: CommandBuilding.json","Medium",""," Ready for review","1. Fill Building into Command table STCCBA_BUILDING via BGE endpoint ""/api/rest/entity/building/create?sessionId="" and data from CommandBuilding.json mapped to CommandBuildingModel.java like:
![](index.php?/attachments/get/12360)

Expected Result:
Building is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. Query if Building is created via BGE endpoint ""/axis/api/rest/entity/building/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

Expected Result:
Building is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandBuildingModel.java
3. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_ZONE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
4. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be an entry in delta table with action = DELETE
5. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
6. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_ZONE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Building will be delted from Command STCCBA_BUILDING which should be checked via endpoint ""/axis/api/rest/entity/building/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandBuildingModel.java","1. Building is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. Building is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandBuildingModel.java
3. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
4. There will be an entry in delta table with action = DELETE
5. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
6. Building will be delted from Command STCCBA_BUILDING which should be checked via endpoint ""/axis/api/rest/entity/building/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandBuildingModel.java","1. Fill Building into Command table STCCBA_BUILDING via BGE endpoint ""/api/rest/entity/building/create?sessionId="" and data from CommandBuilding.json mapped to CommandBuildingModel.java like:
![](index.php?/attachments/get/12360)

2. Query if Building is created via BGE endpoint ""/axis/api/rest/entity/building/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

3. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_ZONE_DATA = Y
4. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
5. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
6. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_ZONE_DATA = Y
SYNCHRONIZE = Y","CIF (Command Integration Framework) (Automated testing)","Building should be deleted from Command because it's not in NMS chache"," End-to-end test","Automated"
"C19640276","Verify that Floor in NMS cache will be created in Command"," API","/axis/api/rest/entity/floor/query?sessionId","Floor is found in Command","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull

- Test data:
    - Floor in NMS cache with campusNmsId frilled with nmsId from campus and buildingNmsId filled with nmsId from previously created building: NmsFloor.json
    - no such Floor in Command: CommandFloor.json","Medium",""," Ready for review","1. Fill floor data from NmsFloor.json into NMS cache CTFIFC_NMS_FLOOR via BGE endpoint: ""/axis/api/rest/entity/custom/floor/bulkCreate?sessionId="" and attached data as RecordNmsFloor.java mapped from NmsFloor.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

2. Query if floor is created via BGE endpoint ""/axis/api/rest/entity/floor/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
Floor is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandFloorModel.java
3. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_ZONE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
4. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be an entry in delta table with action = CREATE
5. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
6. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_ZONE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Floor will be stored in Command STCCBA_FLOOR which should be checked via endpoint ""/axis/api/rest/entity/floor/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandFloorModel.java","1. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

2. Floor is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandFloorModel.java
3. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
4. There will be an entry in delta table with action = CREATE
5. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
6. Floor will be stored in Command STCCBA_FLOOR which should be checked via endpoint ""/axis/api/rest/entity/floor/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandFloorModel.java","1. Fill floor data from NmsFloor.json into NMS cache CTFIFC_NMS_FLOOR via BGE endpoint: ""/axis/api/rest/entity/custom/floor/bulkCreate?sessionId="" and attached data as RecordNmsFloor.java mapped from NmsFloor.json
2. Query if floor is created via BGE endpoint ""/axis/api/rest/entity/floor/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_ZONE_DATA = Y
4. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
5. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
6. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_ZONE_DATA = Y
SYNCHRONIZE = Y","CIF (Command Integration Framework) (Automated testing)","Floor should be created in Command when it is in NMS chache"," End-to-end test","Automated"
"C19640279","Verify that Floor from NMS cache will be updated in Command"," API","/axis/api/rest/entity/floor/query?sessionId","Floor is found with updated description ""Updated floor for automated testing"" in Command","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull

- Test data:
    - Floor in NMS cache with description=""Floor for automated testing"": NmsFloor.json
    - Floor in Command with same id as nmsId of NmsFloor and cSourceId = nmsInternalId but description=""Updated floor for automated testing"": CommandFloor.json","Medium",""," Ready for review","1. Fill Floor into Command table STCCBA_FLOOR via BGE endpoint ""/api/rest/entity/floor/create?sessionId="" and data from CommandFloor.json mapped to CommandFloorModel.java like:
![](index.php?/attachments/get/12360)

Expected Result:
Floor is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. Query if Floor is created via BGE endpoint ""/axis/api/rest/entity/floor/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

Expected Result:
Floor is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandFloorModel.java
3. Fill Floor data from NmsFloor.json into NMS cache CTFIFC_NMS_FLOOR via BGE endpoint: ""/axis/api/rest/entity/custom/floor/bulkCreate?sessionId=""
and attached data as RecordNmsFloor.java mapped from NmsFloor.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

4. Query if Floor is created via BGE endpoint ""/axis/api/rest/entity/custom/floor/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)

Expected Result:
Floor is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsFloor.java
5. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_ZONE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
6. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be an entry in delta table with action = UPDATE
7. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
8. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_ZONE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Floor will be stored in Command STCCBA_FLOOR which should be checked via endpoint ""/axis/api/rest/entity/floor/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandFloorModel.java","1. Floor is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. Floor is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandFloorModel.java
3. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

4. Floor is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsFloor.java
5. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
6. There will be an entry in delta table with action = UPDATE
7. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
8. Floor will be stored in Command STCCBA_FLOOR which should be checked via endpoint ""/axis/api/rest/entity/floor/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandFloorModel.java","1. Fill Floor into Command table STCCBA_FLOOR via BGE endpoint ""/api/rest/entity/floor/create?sessionId="" and data from CommandFloor.json mapped to CommandFloorModel.java like:
![](index.php?/attachments/get/12360)

2. Query if Floor is created via BGE endpoint ""/axis/api/rest/entity/floor/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

3. Fill Floor data from NmsFloor.json into NMS cache CTFIFC_NMS_FLOOR via BGE endpoint: ""/axis/api/rest/entity/custom/floor/bulkCreate?sessionId=""
and attached data as RecordNmsFloor.java mapped from NmsFloor.json
4. Query if Floor is created via BGE endpoint ""/axis/api/rest/entity/custom/floor/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)

5. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_ZONE_DATA = Y
6. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
7. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
8. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_ZONE_DATA = Y
SYNCHRONIZE = Y","CIF (Command Integration Framework) (Automated testing)","Floor should be updated in Command when it is in NMS chache"," End-to-end test","Automated"
"C19640283","Verify that Floor will be deleted from Command"," API","/axis/api/rest/entity/floor/query?sessionId","Floor is deleted from Command","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull

- Test data:
    - No such floor in NMS cache: NmsFloor.json
    - Floor in Command: CommandFloor.json","Medium",""," Ready for review","1. Fill Floor into Command table STCCBA_FLOOR via BGE endpoint ""/api/rest/entity/floor/create?sessionId="" and data from CommandFloor.json mapped to CommandFloorModel.java like:
![](index.php?/attachments/get/12360)

Expected Result:
Floor is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. Query if Floor is created via BGE endpoint ""/axis/api/rest/entity/floor/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

Expected Result:
Floor is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandFloorModel.java
3. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_ZONE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
4. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be an entry in delta table with action = DELETE
5. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
6. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_ZONE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Floor will be deleted from Command STCCBA_FLOOR which should be checked via endpoint ""/axis/api/rest/entity/floor/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandFloorModel.java","1. Floor is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. Floor is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandFloorModel.java
3. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
4. There will be an entry in delta table with action = DELETE
5. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
6. Floor will be deleted from Command STCCBA_FLOOR which should be checked via endpoint ""/axis/api/rest/entity/floor/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandFloorModel.java","1. Fill Floor into Command table STCCBA_FLOOR via BGE endpoint ""/api/rest/entity/floor/create?sessionId="" and data from CommandFloor.json mapped to CommandFloorModel.java like:
![](index.php?/attachments/get/12360)

2. Query if Floor is created via BGE endpoint ""/axis/api/rest/entity/floor/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

3. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_ZONE_DATA = Y
4. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
5. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
6. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_ZONE_DATA = Y
SYNCHRONIZE = Y","CIF (Command Integration Framework) (Automated testing)","Floor should be updated in Command when it is in NMS chache"," End-to-end test","Automated"
"C19640277","Verify that Room in NMS cache will be created in Command"," API","/axis/api/rest/entity/room/query?sessionId","Room is found in Command","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull

- Test data:
    - Room in NMS cache with campusNmsId filled with nmsId from campus, buildingNmsId filled with nmsId from building and floorNmsId with nmsId from previously created floor: NmsRoom.json
    - no such Room in Command: CommandRoom.json","Medium",""," Ready for review","1. Fill Room data from NmsRoom.json into NMS cache CTFIFC_NMS_ROOM via BGE endpoint: ""/axis/api/rest/entity/custom/room/bulkCreate?sessionId="" and attached data as RecordNmsRoom.java mapped from NmsRoom.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

2. Query if room is created via BGE endpoint ""/axis/api/rest/entity/room/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
Expected Result:
Room is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandRoomModel.java
3. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_ZONE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
4. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be an entry in delta table with action = CREATE
5. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
6. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_ZONE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Room will be stored in Command STCCBA_ROOM which should be checked via endpoint ""/axis/api/rest/entity/room/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandRoomModel.java","1. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

2. Room is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandRoomModel.java
3. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
4. There will be an entry in delta table with action = CREATE
5. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
6. Room will be stored in Command STCCBA_ROOM which should be checked via endpoint ""/axis/api/rest/entity/room/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandRoomModel.java","1. Fill Room data from NmsRoom.json into NMS cache CTFIFC_NMS_ROOM via BGE endpoint: ""/axis/api/rest/entity/custom/room/bulkCreate?sessionId="" and attached data as RecordNmsRoom.java mapped from NmsRoom.json
2. Query if room is created via BGE endpoint ""/axis/api/rest/entity/room/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)
3. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_ZONE_DATA = Y
4. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
5. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
6. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_ZONE_DATA = Y
SYNCHRONIZE = Y","CIF (Command Integration Framework) (Automated testing)","Room should be created in Command when it is in NMS chache"," End-to-end test","Automated"
"C19640280","Verify that Room from NMS cache will be updated in Command"," API","/axis/api/rest/entity/room/query?sessionId","Room is found with updated description ""Updated room for automated testing"" in Command","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull

- Test data:
    - Room in NMS cache with description=""Room for automated testing"": NmsRoom.json
    - Room in Command with same id as nmsId of NmsRoom and cSourceId = nmsInternalId but description=""Updated room for automated testing"": CommandRoom.json","Medium",""," Ready for review","1. Fill Room into Command table STCCBA_ROOM via BGE endpoint ""/api/rest/entity/room/create?sessionId="" and data from CommandRoom.json mapped to CommandRoomModel.java like:
![](index.php?/attachments/get/12360)

Expected Result:
Room is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. Query if Room is created via BGE endpoint ""/axis/api/rest/entity/room/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

Expected Result:
Room is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandRoomModel.java
3. Fill Room data from NmsRoom.json into NMS cache CTFIFC_NMS_ROOM via BGE endpoint: ""/axis/api/rest/entity/custom/room/bulkCreate?sessionId=""
and attached data as RecordNmsRoom.java mapped from NmsRoom.json
Expected Result:
Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

4. Query if Room is created via BGE endpoint ""/axis/api/rest/entity/custom/room/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)

Expected Result:
Room is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsRoom.java
5. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_ZONE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
6. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be an entry in delta table with action = UPDATE
7. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
8. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_ZONE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Room will be stored in Command STCCBA_ROOM which should be checked via endpoint ""/axis/api/rest/entity/room/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandRoomModel.java","1. Room is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. Room is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandRoomModel.java
3. Error Code of response is 0, answer can be mapped to BgeCreateObjectResponse.java

4. Room is there
![](index.php?/attachments/get/12365)
Can be mapped to RecordNmsRoom.java
5. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
6. There will be an entry in delta table with action = UPDATE
7. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
8. Room will be stored in Command STCCBA_ROOM which should be checked via endpoint ""/axis/api/rest/entity/room/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandRoomModel.java","1. Fill Room into Command table STCCBA_ROOM via BGE endpoint ""/api/rest/entity/room/create?sessionId="" and data from CommandRoom.json mapped to CommandRoomModel.java like:
![](index.php?/attachments/get/12360)

2. Query if Room is created via BGE endpoint ""/axis/api/rest/entity/room/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

3. Fill Room data from NmsRoom.json into NMS cache CTFIFC_NMS_ROOM via BGE endpoint: ""/axis/api/rest/entity/custom/room/bulkCreate?sessionId=""
and attached data as RecordNmsRoom.java mapped from NmsRoom.json
4. Query if Room is created via BGE endpoint ""/axis/api/rest/entity/custom/room/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12364)

5. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_ZONE_DATA = Y
6. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
7. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
8. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_ZONE_DATA = Y
SYNCHRONIZE = Y","CIF (Command Integration Framework) (Automated testing)","Room should be updated in Command when it is in NMS chache"," End-to-end test","Automated"
"C19640284","Verify that Room will be deleted from Command"," API","/axis/api/rest/entity/room/query?sessionId","Room is deleted from Command","- Source System CIF_AUTOMATED_TEST exists
- Job CIF_AUTOMATED_TEST_JOB exists
- Login to Command was successfull

- Test data:
    - No such room in NMS cache: NmsRoom.json
    - Room in Command: CommandRoom.json","Medium",""," Ready for review","1. Fill Room into Command table STCCBA_ROOM via BGE endpoint ""/api/rest/entity/room/create?sessionId="" and data from CommandRoom.json mapped to CommandRoomModel.java like:
![](index.php?/attachments/get/12360)

Expected Result:
Room is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. Query if Room is created via BGE endpoint ""/axis/api/rest/entity/room/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

Expected Result:
Room is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandRoomModel.java
3. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_ZONE_DATA = Y
Expected Result:
Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
4. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
Expected Result:
There will be an entry in delta table with action = DELETE
5. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
Expected Result:
The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
6. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_ZONE_DATA = Y
SYNCHRONIZE = Y
Expected Result:
Room will be deleted from Command STCCBA_ROOM which should be checked via endpoint ""/axis/api/rest/entity/room/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandRoomModel.java","1. Room is created, answer in following form:
![](index.php?/attachments/get/12361)
Can be mapped to BgeCreateObjectResponse.java


2. Room is there
![](index.php?/attachments/get/12363)
Can be mapped to CommandRoomModel.java
3. Job has status FINISHED, which can be read from response.
Response can be mapped to BgeRunInterfaceResponse.java
4. There will be an entry in delta table with action = DELETE
5. The entry will be approved, which can be checked via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
6. Room will be deleted from Command STCCBA_ROOM which should be checked via endpoint ""/axis/api/rest/entity/room/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java and response mapped to CommandRoomModel.java","1. Fill Room into Command table STCCBA_ROOM via BGE endpoint ""/api/rest/entity/room/create?sessionId="" and data from CommandRoom.json mapped to CommandRoomModel.java like:
![](index.php?/attachments/get/12360)

2. Query if Room is created via BGE endpoint ""/axis/api/rest/entity/room/query?sessionId=""
And restrictions mapped to BgeRestrictionsModel.java:
![](index.php?/attachments/get/12362)

3. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync"" and Additional Settings from jobRun.json in resources folder with case ""CALCULATE_DELTA_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA=Y
LOAD_ZONE_DATA = Y
4. Check if delta has been calculated and the entry is stored into delta table 
via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/query?sessionId="" with restrictions mapped to BgeRestrictionsModel.java
5. Set delta table entry approved via BGE endpoint ""/axis/api/rest/entity/deltaReportZone/setApprovedForDeltaRecords?sessionId="" with model mapped to ApprovedModel.java
6. Execute Job via BGE endpoint ""/axis/api/rest/entity/toolFrameworkJob/startJobSync?sessionId="" and Additional Settings from jobRun.json in resources folder with case ""SYNCHRONIZE_ZONE"" mapped to JobRunModel.java:
SOURCE_SYSTEM = CIF_AUTOMATED_TEST 
CALCULATE_DELTA= N 
LOAD_ZONE_DATA = Y
SYNCHRONIZE = Y","CIF (Command Integration Framework) (Automated testing)","Room should be deleted from Command because it's not in NMS chache"," End-to-end test","Automated"
"C19147218","Verify that Common data is created in command"," API","","","Delta auto-apply configuration:
- Delta= Common Delta
- Active = ON
- Delta auto-apply condition:
	AND Action = CREATE
	AND Source system = CIF_AUTOMATED_TESTING

Job's Additional Settings:
SOURCE_SYSTEM = CIF_AUTOMATED_TESTING
LOAD_COMMON_DATA = Y
CALCULATE_DELTA=Y
SYNCHRONIZE_DATA =Y

Test Data preparation:
- NmsCustomer object in nms cache
- NmsPerson object in nms cache
- delete data from command common table that has same name/id","Medium",""," Rework","1. 1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly
Expected Result:
Changes (CREATE/UPDATE/DELETE) are applied correctly","1. Changes (CREATE/UPDATE/DELETE) are applied correctly","1. 1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly","CIF (Command Integration Framework) (Automated testing)","Common data should be present in NMS Cache (Tables) but absent in Command so after Delta calculation there will be delta action CREATE
"," End-to-end test","Automated"
"C19147219","Common Delta  (UPDATE)","","","","Delta auto-apply configuration:
- Delta= Common Delta
- Active = ON
- Delta auto-apply condition:
	AND Action = UPDATE
	AND Source system = e.g. TEST_SK1

Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_COMMON_DATA = Y
SYNCHRONIZE_DATA =Y

Test Data preparation:
1. Download xls import file(s) from Entity Manager: Business Gateway Entity

Nms Entities:
NmsCustomer
NmsPerson

2 Populate xls file(s) with necessary values.
3 Import xls file(s) in Administration module to populate NMS Cache table with data
Menu Import/Export: Import Configuration data","Medium",""," Ready for review","1. To check UPDATE operation data in Command (e.g. Description, Remark) should differ from data in NMS Cache (Tables).

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly
Expected Result:
Changes (CREATE/UPDATE/DELETE) are applied correctly","1. Changes (CREATE/UPDATE/DELETE) are applied correctly","1. To check UPDATE operation data in Command (e.g. Description, Remark) should differ from data in NMS Cache (Tables).

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19147220","Common Delta (DELETE)","","","","Delta auto-apply configuration:
- Delta= Common Delta
- Active = ON
- Delta auto-apply condition:
	AND Action = DELETE
	AND Source system = e.g. TEST_SK1

Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_COMMON_DATA = Y
SYNCHRONIZE_DATA =Y


Test Data preparation:
1. Download xls import file(s) from Entity Manager: Business Gateway Entity

Nms Entities:
NmsCustomer
NmsPerson

2 Populate xls file(s) with necessary values.
3 Import xls file(s) in Administration module to populate NMS Cache table with data
Menu Import/Export: Import Configuration data","Medium",""," Ready for review","1. To check DELETE operation data should present in Command but absent in NMS Cache (Tables).

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly
Expected Result:
Changes (CREATE/UPDATE/DELETE) are applied correctly","1. Changes (CREATE/UPDATE/DELETE) are applied correctly","1. To check DELETE operation data should present in Command but absent in NMS Cache (Tables).

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19147221","Common Link Delta  (CREATE)","","","","Delta auto-apply configuration:
- Delta= Common Link Delta
- Active = ON
- Delta auto-apply condition:
	AND Action = CREATE
	AND Source system = e.g. TEST_SK1


Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_COMMON_DATA = Y
SYNCHRONIZE_DATA =Y

-----------------------
------------------------------------------
Test Data preparation:
1. Download xls import file(s) from Entity Manager: Business Gateway Entity

Nms Entities:
NmsCustomerPersonLink

2 Populate xls file(s) with necessary values.
3 Import xls file(s) in Administration module to populate NMS Cache table with data
Menu Import/Export: Import Configuration data
","Medium",""," Ready for review","1. To check CREATE operation data should present in NMS Cache (Tables) but absent in Command.

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly
Expected Result:
Changes (CREATE/UPDATE/DELETE) are applied correctly","1. Changes (CREATE/UPDATE/DELETE) are applied correctly","1. To check CREATE operation data should present in NMS Cache (Tables) but absent in Command.

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19147222","Common Link Delta  (UPDATE)","","","","Delta auto-apply configuration:
- Delta= Common Link Delta
- Active = ON
- Delta auto-apply condition:
	AND Action = UPDATE
	AND Source system = e.g. TEST_SK1


Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_COMMON_DATA = Y
SYNCHRONIZE_DATA =Y

------------------------------------------
Test Data preparation:
1. Download xls import file(s) from Entity Manager: Business Gateway Entity

Nms Entities:
NmsCustomerPersonLink

2 Populate xls file(s) with necessary values.
3 Import xls file(s) in Administration module to populate NMS Cache table with data
Menu Import/Export: Import Configuration data","Medium",""," Ready for review","1. To check UPDATE operation data in Command (e.g. Description, Remark) should differ from data in NMS Cache (Tables).

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly
Expected Result:
Changes (CREATE/UPDATE/DELETE) are applied correctly","1. Changes (CREATE/UPDATE/DELETE) are applied correctly","1. To check UPDATE operation data in Command (e.g. Description, Remark) should differ from data in NMS Cache (Tables).

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19147223","Common Link Delta  (DELETE)","","","","Delta auto-apply configuration:
- Delta= Common Link Delta
- Active = ON
- Delta auto-apply condition:
	AND Action = DELETE
	AND Source system = e.g. TEST_SK1


Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_COMMON_DATA = Y
SYNCHRONIZE_DATA =Y

------------------------------------------
Test Data preparation:
1. Download xls import file(s) from Entity Manager: Business Gateway Entity

Nms Entities:
NmsCustomerPersonLink

2 Populate xls file(s) with necessary values.
3 Import xls file(s) in Administration module to populate NMS Cache table with data
Menu Import/Export: Import Configuration data
","Medium",""," Ready for review","1. To check DELETE operation data should present in Command but absent in NMS Cache (Tables).


1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly
Expected Result:
Changes (CREATE/UPDATE/DELETE) are applied correctly","1. Changes (CREATE/UPDATE/DELETE) are applied correctly","1. To check DELETE operation data should present in Command but absent in NMS Cache (Tables).


1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19147237","Dynamic Delta  (CREATE)","","","","Delta auto-apply configuration:
- Delta= Dynamic Delta
- Active = ON
- Delta auto-apply condition:
	  AND Action = CREATE
	  AND Source system = e.g. TEST_SK1

Dynamic Entity
Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_DYNAMIC_DATA= Y
SYNCHRONIZE_DATA =Y

--------------
Test Data preparation:
1. Download xls import file(s) from Entity Manager: Business Gateway Entity

Nms Entities:
e.g. NmsNameOfDynamicEntity

2 Populate xls file(s) with necessary values.
3 Import xls file(s) in Administration module to populate NMS Cache table with data
Menu Import/Export: Import Configuration data","Medium",""," Ready for review","1. To check CREATE operation data should present in NMS Cache (Tables) but absent in Command.

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly
Expected Result:
Changes (CREATE/UPDATE/DELETE) are applied correctly","1. Changes (CREATE/UPDATE/DELETE) are applied correctly","1. To check CREATE operation data should present in NMS Cache (Tables) but absent in Command.

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19147238","Dynamic Delta  (UPDATE)","","","","Delta auto-apply configuration:
- Delta= Dynamic Delta
- Active = ON
- Delta auto-apply condition:
	  AND Action = UPDATE
	  AND Source system = e.g. TEST_SK1

Dynamic Entity
Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_DYNAMIC_DATA= Y
SYNCHRONIZE_DATA =Y

--------------
Test Data preparation:
1. Download xls import file(s) from Entity Manager: Business Gateway Entity

Nms Entities:
e.g. NmsNameOfDynamicEntity

2 Populate xls file(s) with necessary values.
3 Import xls file(s) in Administration module to populate NMS Cache table with data
Menu Import/Export: Import Configuration data","Medium",""," Ready for review","1. To check UPDATE operation data in Command (e.g. Description, Remark) should differ from data in NMS Cache (Tables).

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly
Expected Result:
Changes (CREATE/UPDATE/DELETE) are applied correctly","1. Changes (CREATE/UPDATE/DELETE) are applied correctly","1. To check UPDATE operation data in Command (e.g. Description, Remark) should differ from data in NMS Cache (Tables).

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19147239","Dynamic Delta  (DELETE)","","","","Delta auto-apply configuration:
- Delta= Dynamic Delta
- Active = ON
- Delta auto-apply condition:
	  AND Action = DELETE
	  AND Source system = e.g. TEST_SK1

Dynamic Entity
Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_DYNAMIC_DATA= Y
SYNCHRONIZE_DATA =Y

--------------
Test Data preparation:
1. Download xls import file(s) from Entity Manager: Business Gateway Entity

Nms Entities:
e.g. NmsNameOfDynamicEntity

2 Populate xls file(s) with necessary values.
3 Import xls file(s) in Administration module to populate NMS Cache table with data
Menu Import/Export: Import Configuration data","Medium",""," Ready for review","1. To check DELETE operation data should present in Command but absent in NMS Cache (Tables).

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly
Expected Result:
Changes (CREATE/UPDATE/DELETE) are applied correctly","1. Changes (CREATE/UPDATE/DELETE) are applied correctly","1. To check DELETE operation data should present in Command but absent in NMS Cache (Tables).

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19147240","Dynamic Link Delta  (CREATE)","","","","Delta auto-apply configuration:
- Delta= Dynamic Delta
- Active = ON
- Delta auto-apply condition:
	  AND Action = CREATE
	  AND Source system = e.g. TEST_SK1

Dynamic Entity
Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_DYNAMIC_DATA= Y
SYNCHRONIZE_DATA =Y

Test Data preparation:
1. Download xls import file(s) from Entity Manager: Business Gateway Entity

Nms Entities:
e.g. NmsNameOf-Dynamic-LINK-Entity

2 Populate xls file(s) with necessary values.
3 Import xls file(s) in Administration module to populate NMS Cache table with data
Menu Import/Export: Import Configuration data","Medium",""," Ready for review","1. To check CREATE operation data should present in NMS Cache (Tables) but absent in Command.

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly
Expected Result:
Changes (CREATE/UPDATE/DELETE) are applied correctly","1. Changes (CREATE/UPDATE/DELETE) are applied correctly","1. To check CREATE operation data should present in NMS Cache (Tables) but absent in Command.

1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19147241","Dynamic Link Delta  (UPDATE)","","","","Delta auto-apply configuration:
- Delta= Dynamic Delta
- Active = ON
- Delta auto-apply condition:
	  AND Action = UPDATE
	  AND Source system = e.g. TEST_SK1

Dynamic Entity
Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_DYNAMIC_DATA= Y
SYNCHRONIZE_DATA =Y

--------------
Test Data preparation:
1. Download xls import file(s) from Entity Manager: Business Gateway Entity

Nms Entities:
e.g. NmsNameOf-Dynamic-LINK-Entity

2 Populate xls file(s) with necessary values.
3 Import xls file(s) in Administration module to populate NMS Cache table with data
Menu Import/Export: Import Configuration data","Medium",""," Ready for review","1. To check UPDATE operation data in Command (e.g. Description, Remark) should differ from data in NMS Cache (Tables).


1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly
Expected Result:
Changes (CREATE/UPDATE/DELETE) are applied correctly","1. Changes (CREATE/UPDATE/DELETE) are applied correctly","1. To check UPDATE operation data in Command (e.g. Description, Remark) should differ from data in NMS Cache (Tables).


1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19147242","Dynamic Link Delta  (DELETE)","","","","Delta auto-apply configuration:
- Delta= Dynamic Delta
- Active = ON
- Delta auto-apply condition:
	  AND Action = DELETE
	  AND Source system = e.g. TEST_SK1

Dynamic Entity
Job's Additional Settings:
SOURCE_SYSTEM = SourceSystem_ID (e.g. TEST_SK1)
CALCULATE_DELTA=Y
LOAD_DYNAMIC_DATA= Y
SYNCHRONIZE_DATA =Y

----------------
--------------
Test Data preparation:
1. Download xls import file(s) from Entity Manager: Business Gateway Entity

Nms Entities:
e.g. NmsNameOf-Dynamic-LINK-Entity

2 Populate xls file(s) with necessary values.
3 Import xls file(s) in Administration module to populate NMS Cache table with data
Menu Import/Export: Import Configuration data","Medium",""," Ready for review","1. To check DELETE operation data should present in Command but absent in NMS Cache (Tables).


1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly
Expected Result:
Changes (CREATE/UPDATE/DELETE) are applied correctly","1. Changes (CREATE/UPDATE/DELETE) are applied correctly","1. To check DELETE operation data should present in Command but absent in NMS Cache (Tables).


1. Open in Administration -> CIF Entity configuration
2. Check that there is no Warning symbol in column ""Discrepancy between cache table and configuration"" for appropriate Entities mentioned in Preconditions
3. Open in Administration -> Delta auto-apply configuration
4. Create Active auto apply configuration mentioned in Preconditions
5. Create Job mentioned in Preconditions
6. Execute Job and check if Delta (CREATE/UPDATE/Delete) is applied correctly
7. Open Job-> Monitoring and check that corret log entries are present, no Errors/Exceptions
8. Open appropriate module (e.g. Navigator, TELCO) and check that changes are applied correctly","CIF (Command Integration Framework) (Automated testing)","","","Manual"
"C19093806","Planning: DELETE: NOP","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19093807","Planning: DELETE: Apply Planing (Delete)","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19093810","Planning: CREATE: NOP","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19093811","Planning: CREATE: Apply Planing (Create)","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19093808","Planning: REPATCH","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19093819","Real: Delete","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19093820","Real: Create","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19093821","Real: Update attributes","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19093822","Real: Updayte type and attributes","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19093812","Real: REPATCH","","","","","Medium","","","","","","CIF (Command Integration Framework) (Automated testing)","","","ToBeAutomated"
"C19276350","Verify that BGE is running"," API","","","","Critical",""," Final","1. Get request is sent to base url 
Expected Result:
Status code 200 OK is returned","1. Status code 200 OK is returned","1. Get request is sent to base url","CIF (Command Integration Framework) (Automated testing)",""," Smoke test","ToBeAutomated"
"C19273067","Verify that error code 0 and sessionId is returned when BGE login is successful"," API","/axis/api/rest/businessGateway/login","","- BGE is running, which is proved by [C19276350]
- Crendentials need to be filled out properly as described in [C19273069], [C19289813] and [C19289814]","High",""," Final","1. POST request is sent to endpoint with login credentials as JSON-Object
Expected Result:
Error code of returned JSON is 0 and sessionId is there as in image:
![](index.php?/attachments/get/12227)","1. Error code of returned JSON is 0 and sessionId is there as in image:
![](index.php?/attachments/get/12227)","1. POST request is sent to endpoint with login credentials as JSON-Object","CIF (Command Integration Framework) (Automated testing)","login in BGE is done"," Smoke test","Automated"
"C19273068","Verify that error code 100 is returned when wrong credentials are used in a BGE login request"," API","/axis/api/rest/businessGateway/login","","BGE is running, which is proved by [C19276350]","Low",""," Final","1. POST request with wrong credentials is sent to endpoint
Expected Result:
Status code 100 as in image:
![](index.php?/attachments/get/12217)","1. Status code 100 as in image:
![](index.php?/attachments/get/12217)","1. POST request with wrong credentials is sent to endpoint","CIF (Command Integration Framework) (Automated testing)","Error message received when login fails: Login failed."," Smoke test","Automated"
"C19273069","Verify that error code 104 is returned when mandatory credential Usergroup name is missing from the BGE login request"," API","/axis/api/rest/businessGateway/login","","BGE is running, which is proved by [C19276350]","Low",""," Final","1. POST request is sent to endpoint without the credential usergroup name
Expected Result:
Status code 104 as in image:
![](index.php?/attachments/get/12220)","1. Status code 104 as in image:
![](index.php?/attachments/get/12220)","1. POST request is sent to endpoint without the credential usergroup name","CIF (Command Integration Framework) (Automated testing)","Mandatory fields 
- User
- Password
- usergroup name
They need to be sent and filled out to successfully login. This will be tested."," Smoke test","Automated"
"C19289813","Verify that error code 104 is returned when mandatory credential User is missing from the BGE login request"," API","/axis/api/rest/businessGateway/login","","BGE is running, which is proved by [C19276350]","Low",""," Final","1. POST request is send to endpoint without the credential user
Expected Result:
Status code 104 as in image:
![](index.php?/attachments/get/12221)","1. Status code 104 as in image:
![](index.php?/attachments/get/12221)","1. POST request is send to endpoint without the credential user","CIF (Command Integration Framework) (Automated testing)","Mandatory fields 
- User
- Password
- usergroup name
They need to be sent and filled out to successfully login. This will be tested."," Smoke test","Automated"
"C19289814","Verify that error code 104 is returned when mandatory credential Password is missing from the BGE login request"," API","/axis/api/rest/businessGateway/login","","BGE is running, which is proved by [C19276350]","Low",""," Final","1. POST request is send to endpoint without the credential Password
Expected Result:
Status code 104 as in image:
![](index.php?/attachments/get/12222)","1. Status code 104 as in image:
![](index.php?/attachments/get/12222)","1. POST request is send to endpoint without the credential Password","CIF (Command Integration Framework) (Automated testing)","Mandatory fields 
- User
- Password
- usergroup name
They need to be sent and filled out to successfully login. This will be tested."," Smoke test","Automated"
"C19289815","Verify that error code 0 is returned when not mandatory credential manId is missing from the BGE login request"," API","/axis/api/rest/businessGateway/login","","- BGE is running, which is proved by [C19276350]
- Crendentials need to be filled out properly as described in [C19273069], [C19289813] and [C19289814]","Low",""," Final","1. POST request is sent to endpoint without the credential manId
Expected Result:
Status code 0 as in image:
![](index.php?/attachments/get/12223)","1. Status code 0 as in image:
![](index.php?/attachments/get/12223)","1. POST request is sent to endpoint without the credential manId","CIF (Command Integration Framework) (Automated testing)","The field manId is ususally sent with tehe other credentials but is not mandatory. It is tested if errorCode 0 and a sessionId will be returned"," Smoke test","Automated"
"C19276348","Verify that error code 0 is returned when BGE logout is successful"," API","/axis/api/rest/businessGateway/logout?{sessionId}","","- BGE is running, which is proved by [C19276350]
- sessionId needs to exist","High",""," Final","1. POST request is sent to endpoint with sessionId 
Expected Result:
Error Code of JSON answer is 0 as in image:
![](index.php?/attachments/get/12226)","1. Error Code of JSON answer is 0 as in image:
![](index.php?/attachments/get/12226)","1. POST request is sent to endpoint with sessionId","CIF (Command Integration Framework) (Automated testing)","It will be tested if logout works as it should"," Smoke test","Automated"
"C19784851","Verify that desired entry is in data lexicon"," API","axis/api/rest/entity/dataDictionary/dataDictionary?sessionId=","","- BGE is running, which is proved by [C19276350]

","Medium",""," Final","1. Data dictionary: it must be checked that the name of the source system CIF_AUTOMATED_TEST is entered in the CDDMOD_SOURCE_SYSTEM data lexicon as shown in the image by BGE REST call.
![](index.php?/attachments/get/12117)
Expected Result:
CIF_AUTOMATED_TEST is in data dictionary so in Response of BGE there must be this value:
![](index.php?/attachments/get/12250)
will be from response type BgeQueryResponse<BgeQueryResponseDataDictionary>","1. CIF_AUTOMATED_TEST is in data dictionary so in Response of BGE there must be this value:
![](index.php?/attachments/get/12250)
will be from response type BgeQueryResponse<BgeQueryResponseDataDictionary>","1. Data dictionary: it must be checked that the name of the source system CIF_AUTOMATED_TEST is entered in the CDDMOD_SOURCE_SYSTEM data lexicon as shown in the image by BGE REST call.
![](index.php?/attachments/get/12117)","CIF (Command Integration Framework) (Automated testing)",""," Smoke test","Automated"
"C19784852","Verify that planning protocol exists"," API","axis/api/rest/entity/planningProtocol?sessionId=","","- BGE is running, which is proved by [C19276350]

","Medium",""," Final","1. Planning Protocol: it must be checked that planning protocol for CIF_AUTOMATED_TEST existst
Expected Result:
Response will have format BgeQueryResponse<PlanningProtocolModel>","1. Response will have format BgeQueryResponse<PlanningProtocolModel>","1. Planning Protocol: it must be checked that planning protocol for CIF_AUTOMATED_TEST existst","CIF (Command Integration Framework) (Automated testing)",""," Smoke test","Automated"
"C19146924","Verify that device master exists"," API","axis/api/rest/entity/deviceMaster?sessionId=","","- BGE is running, which is proved by [C19276350]

","Medium",""," Final","1. DeviceMaster: it must be checked that DeviceMaster with type 3HE09196AA exists via BGE REST request
Expected Result:
Device Master data is returned in format BgeQueryResponse<DeviceMasterQuery>","1. Device Master data is returned in format BgeQueryResponse<DeviceMasterQuery>","1. DeviceMaster: it must be checked that DeviceMaster with type 3HE09196AA exists via BGE REST request","CIF (Command Integration Framework) (Automated testing)",""," Smoke test","Automated"
"C19653620","Verify that planing protocoll is created"," API","","","","Medium",""," Final","","","","CIF (Command Integration Framework) (Automated testing)",""," Smoke test","Automated"
"C19653621","Verify that Chassis are deleted from Command"," API","","","","Medium",""," Final","","","","CIF (Command Integration Framework) (Automated testing)",""," Smoke test","Automated"
"C19653622","Verify that zone is deleted from Command"," API","","","","Medium",""," Final","","","","CIF (Command Integration Framework) (Automated testing)",""," Smoke test","Automated"
"C19653623","Verify that chassis are deleted from NMS"," API","","","","Medium",""," Final","","","","CIF (Command Integration Framework) (Automated testing)",""," Smoke test","Automated"
"C19656938","Verify that zone is created for tests"," API","","","","Medium",""," Final","","","","CIF (Command Integration Framework) (Automated testing)",""," Smoke test","Automated"
"C19670575","Verify that zone data is deleted from nms"," API","","","","Medium",""," Final","","","","CIF (Command Integration Framework) (Automated testing)",""," Smoke test","Automated"
"C19672265","Verify that test data was set up"," API","","","","Medium",""," Final","","","","CIF (Command Integration Framework) (Automated testing)",""," Smoke test","Automated"
