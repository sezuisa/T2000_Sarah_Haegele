Whitebox Tests:

Whitebox Testing erlaubt es, ein System sehr gründlich und tiefgreifend zu testen, da spezielle Verzweigungen angezielt werden können. Es können somit vielerlei Fehler sehr früh entdeckt werden. Weiterhin ist diese Methode für die Optimierung von Code durchaus förderlich, da Bottlenecks (EXPLANATION) frühzeitig erkannt werden können. Whitebox Tests sind ferner relativ einfach zu automatisieren (EXPLANATION + CITATION) und ermöglichen eine Rückverfolgung der Tests vom Code aus, um dortige Änderungen einfach in neuen Tests zu erfassen (CITATION, EXPLANATION?).

Die starke Fixierung auf die Struktur eines \ac*{SUT} bringt allerdings auch Nachteile mit sich. So schlagen Whitebox Tests schnell fehl, wenn an der Implementation einer Funktionalität Änderungen durchgeführt werden. Die Tests müssen also mit dem Code geupdatet und gewartet werden. Eng hiermit verbunden besteht die Gefahr, dass bei einer neuen Implementierung, welche an der Funktionalität selbst nichts verändert, Testergebnisse fälschlischerweise positiv angezeigt werden und so tatsächliche Fehler verschleiern. Whitebox Tests können außerdem den Testprozess verkomplizieren, da sie ein bestimmtes Grad an Know-How und Vertrautheit mit dem zu testenden Code erfordern. Schließlich decken Whitebox Tests nur den Ist-Zustand eines Systems ab und stellen so nicht sicher, dass jede geforderte Funktionalität eines Systems vorhanden ist.


\cite[S. 35]{witte:2019}
\cite[S. 52]{witte:2019}
 

\cite[S. 161]{witte:2019}
